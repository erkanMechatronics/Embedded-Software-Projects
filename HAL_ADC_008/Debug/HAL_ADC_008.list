
HAL_ADC_008.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002be4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002cf0  08002cf0  00012cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d6c  08002d6c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002d6c  08002d6c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d6c  08002d6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d6c  08002d6c  00012d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d70  08002d70  00012d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08002de4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08002de4  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080d1  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000163e  00000000  00000000  0002816a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  000297a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  00029ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017331  00000000  00000000  0002a5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000901f  00000000  00000000  000418d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084f7b  00000000  00000000  0004a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf86b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000203c  00000000  00000000  000cf8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cd8 	.word	0x08002cd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002cd8 	.word	0x08002cd8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa74 	bl	800063c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f842 	bl	80001dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8f8 	bl	800034c <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f88e 	bl	800027c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f8ca 	bl	80002f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0);
 8000164:	2200      	movs	r2, #0
 8000166:	2101      	movs	r1, #1
 8000168:	4816      	ldr	r0, [pc, #88]	; (80001c4 <main+0x78>)
 800016a:	f001 f9a5 	bl	80014b8 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 800016e:	4816      	ldr	r0, [pc, #88]	; (80001c8 <main+0x7c>)
 8000170:	f000 fbc2 	bl	80008f8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000174:	f04f 31ff 	mov.w	r1, #4294967295
 8000178:	4813      	ldr	r0, [pc, #76]	; (80001c8 <main+0x7c>)
 800017a:	f000 fc97 	bl	8000aac <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 800017e:	4812      	ldr	r0, [pc, #72]	; (80001c8 <main+0x7c>)
 8000180:	f000 fd9a 	bl	8000cb8 <HAL_ADC_GetValue>
 8000184:	4603      	mov	r3, r0
 8000186:	b29a      	uxth	r2, r3
 8000188:	4b10      	ldr	r3, [pc, #64]	; (80001cc <main+0x80>)
 800018a:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 800018c:	480e      	ldr	r0, [pc, #56]	; (80001c8 <main+0x7c>)
 800018e:	f000 fc61 	bl	8000a54 <HAL_ADC_Stop>

	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 8000192:	2201      	movs	r2, #1
 8000194:	2101      	movs	r1, #1
 8000196:	480b      	ldr	r0, [pc, #44]	; (80001c4 <main+0x78>)
 8000198:	f001 f98e 	bl	80014b8 <HAL_GPIO_WritePin>

	  sprintf(message,"%u \r\n",adc_value);
 800019c:	4b0b      	ldr	r3, [pc, #44]	; (80001cc <main+0x80>)
 800019e:	881b      	ldrh	r3, [r3, #0]
 80001a0:	461a      	mov	r2, r3
 80001a2:	490b      	ldr	r1, [pc, #44]	; (80001d0 <main+0x84>)
 80001a4:	480b      	ldr	r0, [pc, #44]	; (80001d4 <main+0x88>)
 80001a6:	f002 f91d 	bl	80023e4 <siprintf>
	  HAL_UART_Transmit(&huart1, message, sizeof(message), HAL_MAX_DELAY);
 80001aa:	f04f 33ff 	mov.w	r3, #4294967295
 80001ae:	220a      	movs	r2, #10
 80001b0:	4908      	ldr	r1, [pc, #32]	; (80001d4 <main+0x88>)
 80001b2:	4809      	ldr	r0, [pc, #36]	; (80001d8 <main+0x8c>)
 80001b4:	f001 ff64 	bl	8002080 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80001b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001bc:	f000 faa0 	bl	8000700 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80001c0:	e7d5      	b.n	800016e <main+0x22>
 80001c2:	bf00      	nop
 80001c4:	40010c00 	.word	0x40010c00
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	2000008c 	.word	0x2000008c
 80001d0:	08002cf0 	.word	0x08002cf0
 80001d4:	20000090 	.word	0x20000090
 80001d8:	200000cc 	.word	0x200000cc

080001dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b094      	sub	sp, #80	; 0x50
 80001e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e6:	2228      	movs	r2, #40	; 0x28
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f002 f8f2 	bl	80023d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f0:	f107 0314 	add.w	r3, r7, #20
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020c:	2302      	movs	r3, #2
 800020e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000210:	2301      	movs	r3, #1
 8000212:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000214:	2310      	movs	r3, #16
 8000216:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000218:	2300      	movs	r3, #0
 800021a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000220:	4618      	mov	r0, r3
 8000222:	f001 f961 	bl	80014e8 <HAL_RCC_OscConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800022c:	f000 f8cc 	bl	80003c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000230:	230f      	movs	r3, #15
 8000232:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000234:	2300      	movs	r3, #0
 8000236:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f001 fbce 	bl	80019ec <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000256:	f000 f8b7 	bl	80003c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800025a:	2302      	movs	r3, #2
 800025c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800025e:	2300      	movs	r3, #0
 8000260:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f001 fd4f 	bl	8001d08 <HAL_RCCEx_PeriphCLKConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000270:	f000 f8aa 	bl	80003c8 <Error_Handler>
  }
}
 8000274:	bf00      	nop
 8000276:	3750      	adds	r7, #80	; 0x50
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800028c:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <MX_ADC1_Init+0x74>)
 800028e:	4a19      	ldr	r2, [pc, #100]	; (80002f4 <MX_ADC1_Init+0x78>)
 8000290:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000292:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <MX_ADC1_Init+0x74>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000298:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <MX_ADC1_Init+0x74>)
 800029a:	2201      	movs	r2, #1
 800029c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800029e:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ac:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002b2:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002ba:	f000 fa45 	bl	8000748 <HAL_ADC_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002c4:	f000 f880 	bl	80003c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002c8:	2301      	movs	r3, #1
 80002ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002cc:	2301      	movs	r3, #1
 80002ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	4619      	mov	r1, r3
 80002d8:	4805      	ldr	r0, [pc, #20]	; (80002f0 <MX_ADC1_Init+0x74>)
 80002da:	f000 fcf9 	bl	8000cd0 <HAL_ADC_ConfigChannel>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002e4:	f000 f870 	bl	80003c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	2000009c 	.word	0x2000009c
 80002f4:	40012400 	.word	0x40012400

080002f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 80002fe:	4a12      	ldr	r2, [pc, #72]	; (8000348 <MX_USART1_UART_Init+0x50>)
 8000300:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000302:	4b10      	ldr	r3, [pc, #64]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 8000304:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000308:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 800031e:	220c      	movs	r2, #12
 8000320:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 8000330:	f001 fe56 	bl	8001fe0 <HAL_UART_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800033a:	f000 f845 	bl	80003c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	200000cc 	.word	0x200000cc
 8000348:	40013800 	.word	0x40013800

0800034c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b086      	sub	sp, #24
 8000350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000360:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <MX_GPIO_Init+0x74>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a16      	ldr	r2, [pc, #88]	; (80003c0 <MX_GPIO_Init+0x74>)
 8000366:	f043 0304 	orr.w	r3, r3, #4
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <MX_GPIO_Init+0x74>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0304 	and.w	r3, r3, #4
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <MX_GPIO_Init+0x74>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a10      	ldr	r2, [pc, #64]	; (80003c0 <MX_GPIO_Init+0x74>)
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_GPIO_Init+0x74>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0308 	and.w	r3, r3, #8
 800038c:	603b      	str	r3, [r7, #0]
 800038e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2101      	movs	r1, #1
 8000394:	480b      	ldr	r0, [pc, #44]	; (80003c4 <MX_GPIO_Init+0x78>)
 8000396:	f001 f88f 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800039a:	2301      	movs	r3, #1
 800039c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039e:	2301      	movs	r3, #1
 80003a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a6:	2302      	movs	r3, #2
 80003a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	4619      	mov	r1, r3
 80003b0:	4804      	ldr	r0, [pc, #16]	; (80003c4 <MX_GPIO_Init+0x78>)
 80003b2:	f000 ff05 	bl	80011c0 <HAL_GPIO_Init>

}
 80003b6:	bf00      	nop
 80003b8:	3718      	adds	r7, #24
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40010c00 	.word	0x40010c00

080003c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003cc:	b672      	cpsid	i
}
 80003ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <Error_Handler+0x8>
	...

080003d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <HAL_MspInit+0x40>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	4a0d      	ldr	r2, [pc, #52]	; (8000414 <HAL_MspInit+0x40>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6193      	str	r3, [r2, #24]
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <HAL_MspInit+0x40>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <HAL_MspInit+0x40>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	4a07      	ldr	r2, [pc, #28]	; (8000414 <HAL_MspInit+0x40>)
 80003f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003fc:	61d3      	str	r3, [r2, #28]
 80003fe:	4b05      	ldr	r3, [pc, #20]	; (8000414 <HAL_MspInit+0x40>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000406:	603b      	str	r3, [r7, #0]
 8000408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr
 8000414:	40021000 	.word	0x40021000

08000418 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000420:	f107 0310 	add.w	r3, r7, #16
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a14      	ldr	r2, [pc, #80]	; (8000484 <HAL_ADC_MspInit+0x6c>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d121      	bne.n	800047c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000438:	4b13      	ldr	r3, [pc, #76]	; (8000488 <HAL_ADC_MspInit+0x70>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a12      	ldr	r2, [pc, #72]	; (8000488 <HAL_ADC_MspInit+0x70>)
 800043e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b10      	ldr	r3, [pc, #64]	; (8000488 <HAL_ADC_MspInit+0x70>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <HAL_ADC_MspInit+0x70>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a0c      	ldr	r2, [pc, #48]	; (8000488 <HAL_ADC_MspInit+0x70>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <HAL_ADC_MspInit+0x70>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000468:	2302      	movs	r3, #2
 800046a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800046c:	2303      	movs	r3, #3
 800046e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <HAL_ADC_MspInit+0x74>)
 8000478:	f000 fea2 	bl	80011c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800047c:	bf00      	nop
 800047e:	3720      	adds	r7, #32
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40012400 	.word	0x40012400
 8000488:	40021000 	.word	0x40021000
 800048c:	40010800 	.word	0x40010800

08000490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a1c      	ldr	r2, [pc, #112]	; (800051c <HAL_UART_MspInit+0x8c>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d131      	bne.n	8000514 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004b0:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <HAL_UART_MspInit+0x90>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a1a      	ldr	r2, [pc, #104]	; (8000520 <HAL_UART_MspInit+0x90>)
 80004b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b18      	ldr	r3, [pc, #96]	; (8000520 <HAL_UART_MspInit+0x90>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004c4:	60fb      	str	r3, [r7, #12]
 80004c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	4b15      	ldr	r3, [pc, #84]	; (8000520 <HAL_UART_MspInit+0x90>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a14      	ldr	r2, [pc, #80]	; (8000520 <HAL_UART_MspInit+0x90>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <HAL_UART_MspInit+0x90>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0304 	and.w	r3, r3, #4
 80004dc:	60bb      	str	r3, [r7, #8]
 80004de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e6:	2302      	movs	r3, #2
 80004e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ea:	2303      	movs	r3, #3
 80004ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4619      	mov	r1, r3
 80004f4:	480b      	ldr	r0, [pc, #44]	; (8000524 <HAL_UART_MspInit+0x94>)
 80004f6:	f000 fe63 	bl	80011c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	4619      	mov	r1, r3
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <HAL_UART_MspInit+0x94>)
 8000510:	f000 fe56 	bl	80011c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000514:	bf00      	nop
 8000516:	3720      	adds	r7, #32
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40013800 	.word	0x40013800
 8000520:	40021000 	.word	0x40021000
 8000524:	40010800 	.word	0x40010800

08000528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800052c:	e7fe      	b.n	800052c <NMI_Handler+0x4>

0800052e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <HardFault_Handler+0x4>

08000534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <MemManage_Handler+0x4>

0800053a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800053e:	e7fe      	b.n	800053e <BusFault_Handler+0x4>

08000540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000544:	e7fe      	b.n	8000544 <UsageFault_Handler+0x4>

08000546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800056e:	f000 f8ab 	bl	80006c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000580:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <_sbrk+0x5c>)
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <_sbrk+0x60>)
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800058c:	4b13      	ldr	r3, [pc, #76]	; (80005dc <_sbrk+0x64>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d102      	bne.n	800059a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <_sbrk+0x64>)
 8000596:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <_sbrk+0x68>)
 8000598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <_sbrk+0x64>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4413      	add	r3, r2
 80005a2:	693a      	ldr	r2, [r7, #16]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d207      	bcs.n	80005b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005a8:	f001 feea 	bl	8002380 <__errno>
 80005ac:	4603      	mov	r3, r0
 80005ae:	220c      	movs	r2, #12
 80005b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295
 80005b6:	e009      	b.n	80005cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <_sbrk+0x64>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <_sbrk+0x64>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	4a05      	ldr	r2, [pc, #20]	; (80005dc <_sbrk+0x64>)
 80005c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ca:	68fb      	ldr	r3, [r7, #12]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20002800 	.word	0x20002800
 80005d8:	00000400 	.word	0x00000400
 80005dc:	20000114 	.word	0x20000114
 80005e0:	20000130 	.word	0x20000130

080005e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005f0:	f7ff fff8 	bl	80005e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005f6:	490c      	ldr	r1, [pc, #48]	; (8000628 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005f8:	4a0c      	ldr	r2, [pc, #48]	; (800062c <LoopFillZerobss+0x16>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005fc:	e002      	b.n	8000604 <LoopCopyDataInit>

080005fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000602:	3304      	adds	r3, #4

08000604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000608:	d3f9      	bcc.n	80005fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060a:	4a09      	ldr	r2, [pc, #36]	; (8000630 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800060c:	4c09      	ldr	r4, [pc, #36]	; (8000634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000610:	e001      	b.n	8000616 <LoopFillZerobss>

08000612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000614:	3204      	adds	r2, #4

08000616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000618:	d3fb      	bcc.n	8000612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800061a:	f001 feb7 	bl	800238c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061e:	f7ff fd95 	bl	800014c <main>
  bx lr
 8000622:	4770      	bx	lr
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800062c:	08002d74 	.word	0x08002d74
  ldr r2, =_sbss
 8000630:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000634:	2000012c 	.word	0x2000012c

08000638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC1_2_IRQHandler>
	...

0800063c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <HAL_Init+0x28>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a07      	ldr	r2, [pc, #28]	; (8000664 <HAL_Init+0x28>)
 8000646:	f043 0310 	orr.w	r3, r3, #16
 800064a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800064c:	2003      	movs	r0, #3
 800064e:	f000 fd83 	bl	8001158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000652:	200f      	movs	r0, #15
 8000654:	f000 f808 	bl	8000668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000658:	f7ff febc 	bl	80003d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40022000 	.word	0x40022000

08000668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <HAL_InitTick+0x54>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_InitTick+0x58>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4619      	mov	r1, r3
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000682:	fbb2 f3f3 	udiv	r3, r2, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fd8d 	bl	80011a6 <HAL_SYSTICK_Config>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	e00e      	b.n	80006b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b0f      	cmp	r3, #15
 800069a:	d80a      	bhi.n	80006b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800069c:	2200      	movs	r2, #0
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	f04f 30ff 	mov.w	r0, #4294967295
 80006a4:	f000 fd63 	bl	800116e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a8:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <HAL_InitTick+0x5c>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ae:	2300      	movs	r3, #0
 80006b0:	e000      	b.n	80006b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006b2:	2301      	movs	r3, #1
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000000 	.word	0x20000000
 80006c0:	20000008 	.word	0x20000008
 80006c4:	20000004 	.word	0x20000004

080006c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <HAL_IncTick+0x1c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_IncTick+0x20>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	4a03      	ldr	r2, [pc, #12]	; (80006e8 <HAL_IncTick+0x20>)
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000118 	.word	0x20000118

080006ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return uwTick;
 80006f0:	4b02      	ldr	r3, [pc, #8]	; (80006fc <HAL_GetTick+0x10>)
 80006f2:	681b      	ldr	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	20000118 	.word	0x20000118

08000700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000708:	f7ff fff0 	bl	80006ec <HAL_GetTick>
 800070c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000718:	d005      	beq.n	8000726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <HAL_Delay+0x44>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	4413      	add	r3, r2
 8000724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000726:	bf00      	nop
 8000728:	f7ff ffe0 	bl	80006ec <HAL_GetTick>
 800072c:	4602      	mov	r2, r0
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	429a      	cmp	r2, r3
 8000736:	d8f7      	bhi.n	8000728 <HAL_Delay+0x28>
  {
  }
}
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000008 	.word	0x20000008

08000748 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000750:	2300      	movs	r3, #0
 8000752:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d101      	bne.n	800076a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e0be      	b.n	80008e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000774:	2b00      	cmp	r3, #0
 8000776:	d109      	bne.n	800078c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2200      	movs	r2, #0
 800077c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff fe46 	bl	8000418 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 fbf1 	bl	8000f74 <ADC_ConversionStop_Disable>
 8000792:	4603      	mov	r3, r0
 8000794:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800079a:	f003 0310 	and.w	r3, r3, #16
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f040 8099 	bne.w	80008d6 <HAL_ADC_Init+0x18e>
 80007a4:	7dfb      	ldrb	r3, [r7, #23]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	f040 8095 	bne.w	80008d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007b4:	f023 0302 	bic.w	r3, r3, #2
 80007b8:	f043 0202 	orr.w	r2, r3, #2
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7b1b      	ldrb	r3, [r3, #12]
 80007ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007e0:	d003      	beq.n	80007ea <HAL_ADC_Init+0xa2>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d102      	bne.n	80007f0 <HAL_ADC_Init+0xa8>
 80007ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ee:	e000      	b.n	80007f2 <HAL_ADC_Init+0xaa>
 80007f0:	2300      	movs	r3, #0
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7d1b      	ldrb	r3, [r3, #20]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d119      	bne.n	8000834 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7b1b      	ldrb	r3, [r3, #12]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d109      	bne.n	800081c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	3b01      	subs	r3, #1
 800080e:	035a      	lsls	r2, r3, #13
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	4313      	orrs	r3, r2
 8000814:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	e00b      	b.n	8000834 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000820:	f043 0220 	orr.w	r2, r3, #32
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082c:	f043 0201 	orr.w	r2, r3, #1
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	430a      	orrs	r2, r1
 8000846:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <HAL_ADC_Init+0x1a8>)
 8000850:	4013      	ands	r3, r2
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	6812      	ldr	r2, [r2, #0]
 8000856:	68b9      	ldr	r1, [r7, #8]
 8000858:	430b      	orrs	r3, r1
 800085a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000864:	d003      	beq.n	800086e <HAL_ADC_Init+0x126>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d104      	bne.n	8000878 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	691b      	ldr	r3, [r3, #16]
 8000872:	3b01      	subs	r3, #1
 8000874:	051b      	lsls	r3, r3, #20
 8000876:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	430a      	orrs	r2, r1
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	689a      	ldr	r2, [r3, #8]
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_ADC_Init+0x1ac>)
 8000894:	4013      	ands	r3, r2
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	429a      	cmp	r2, r3
 800089a:	d10b      	bne.n	80008b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a6:	f023 0303 	bic.w	r3, r3, #3
 80008aa:	f043 0201 	orr.w	r2, r3, #1
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008b2:	e018      	b.n	80008e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b8:	f023 0312 	bic.w	r3, r3, #18
 80008bc:	f043 0210 	orr.w	r2, r3, #16
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c8:	f043 0201 	orr.w	r2, r3, #1
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008d4:	e007      	b.n	80008e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008da:	f043 0210 	orr.w	r2, r3, #16
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	ffe1f7fd 	.word	0xffe1f7fd
 80008f4:	ff1f0efe 	.word	0xff1f0efe

080008f8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000900:	2300      	movs	r3, #0
 8000902:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800090a:	2b01      	cmp	r3, #1
 800090c:	d101      	bne.n	8000912 <HAL_ADC_Start+0x1a>
 800090e:	2302      	movs	r3, #2
 8000910:	e098      	b.n	8000a44 <HAL_ADC_Start+0x14c>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2201      	movs	r2, #1
 8000916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 fad0 	bl	8000ec0 <ADC_Enable>
 8000920:	4603      	mov	r3, r0
 8000922:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	2b00      	cmp	r3, #0
 8000928:	f040 8087 	bne.w	8000a3a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000934:	f023 0301 	bic.w	r3, r3, #1
 8000938:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a41      	ldr	r2, [pc, #260]	; (8000a4c <HAL_ADC_Start+0x154>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d105      	bne.n	8000956 <HAL_ADC_Start+0x5e>
 800094a:	4b41      	ldr	r3, [pc, #260]	; (8000a50 <HAL_ADC_Start+0x158>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000952:	2b00      	cmp	r3, #0
 8000954:	d115      	bne.n	8000982 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800096c:	2b00      	cmp	r3, #0
 800096e:	d026      	beq.n	80009be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000974:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000978:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000980:	e01d      	b.n	80009be <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000986:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a2f      	ldr	r2, [pc, #188]	; (8000a50 <HAL_ADC_Start+0x158>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d004      	beq.n	80009a2 <HAL_ADC_Start+0xaa>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a2b      	ldr	r2, [pc, #172]	; (8000a4c <HAL_ADC_Start+0x154>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d10d      	bne.n	80009be <HAL_ADC_Start+0xc6>
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <HAL_ADC_Start+0x158>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d006      	beq.n	80009d8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ce:	f023 0206 	bic.w	r2, r3, #6
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80009d6:	e002      	b.n	80009de <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2200      	movs	r2, #0
 80009e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f06f 0202 	mvn.w	r2, #2
 80009ee:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80009fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80009fe:	d113      	bne.n	8000a28 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a04:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <HAL_ADC_Start+0x154>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d105      	bne.n	8000a16 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_ADC_Start+0x158>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d108      	bne.n	8000a28 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	689a      	ldr	r2, [r3, #8]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	e00c      	b.n	8000a42 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	e003      	b.n	8000a42 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40012800 	.word	0x40012800
 8000a50:	40012400 	.word	0x40012400

08000a54 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d101      	bne.n	8000a6e <HAL_ADC_Stop+0x1a>
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	e01a      	b.n	8000aa4 <HAL_ADC_Stop+0x50>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2201      	movs	r2, #1
 8000a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f000 fa7c 	bl	8000f74 <ADC_ConversionStop_Disable>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d109      	bne.n	8000a9a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a8e:	f023 0301 	bic.w	r3, r3, #1
 8000a92:	f043 0201 	orr.w	r2, r3, #1
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b087      	sub	sp, #28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ac2:	f7ff fe13 	bl	80006ec <HAL_GetTick>
 8000ac6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d00b      	beq.n	8000aee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ada:	f043 0220 	orr.w	r2, r3, #32
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e0d3      	b.n	8000c96 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d131      	bne.n	8000b60 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b02:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d12a      	bne.n	8000b60 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b0a:	e021      	b.n	8000b50 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b12:	d01d      	beq.n	8000b50 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d007      	beq.n	8000b2a <HAL_ADC_PollForConversion+0x7e>
 8000b1a:	f7ff fde7 	bl	80006ec <HAL_GetTick>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d212      	bcs.n	8000b50 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d10b      	bne.n	8000b50 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3c:	f043 0204 	orr.w	r2, r3, #4
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	e0a2      	b.n	8000c96 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0d6      	beq.n	8000b0c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b5e:	e070      	b.n	8000c42 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000b60:	4b4f      	ldr	r3, [pc, #316]	; (8000ca0 <HAL_ADC_PollForConversion+0x1f4>)
 8000b62:	681c      	ldr	r4, [r3, #0]
 8000b64:	2002      	movs	r0, #2
 8000b66:	f001 f985 	bl	8001e74 <HAL_RCCEx_GetPeriphCLKFreq>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	6919      	ldr	r1, [r3, #16]
 8000b76:	4b4b      	ldr	r3, [pc, #300]	; (8000ca4 <HAL_ADC_PollForConversion+0x1f8>)
 8000b78:	400b      	ands	r3, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d118      	bne.n	8000bb0 <HAL_ADC_PollForConversion+0x104>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68d9      	ldr	r1, [r3, #12]
 8000b84:	4b48      	ldr	r3, [pc, #288]	; (8000ca8 <HAL_ADC_PollForConversion+0x1fc>)
 8000b86:	400b      	ands	r3, r1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d111      	bne.n	8000bb0 <HAL_ADC_PollForConversion+0x104>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	6919      	ldr	r1, [r3, #16]
 8000b92:	4b46      	ldr	r3, [pc, #280]	; (8000cac <HAL_ADC_PollForConversion+0x200>)
 8000b94:	400b      	ands	r3, r1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d108      	bne.n	8000bac <HAL_ADC_PollForConversion+0x100>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68d9      	ldr	r1, [r3, #12]
 8000ba0:	4b43      	ldr	r3, [pc, #268]	; (8000cb0 <HAL_ADC_PollForConversion+0x204>)
 8000ba2:	400b      	ands	r3, r1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d101      	bne.n	8000bac <HAL_ADC_PollForConversion+0x100>
 8000ba8:	2314      	movs	r3, #20
 8000baa:	e020      	b.n	8000bee <HAL_ADC_PollForConversion+0x142>
 8000bac:	2329      	movs	r3, #41	; 0x29
 8000bae:	e01e      	b.n	8000bee <HAL_ADC_PollForConversion+0x142>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	6919      	ldr	r1, [r3, #16]
 8000bb6:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <HAL_ADC_PollForConversion+0x200>)
 8000bb8:	400b      	ands	r3, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d106      	bne.n	8000bcc <HAL_ADC_PollForConversion+0x120>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	68d9      	ldr	r1, [r3, #12]
 8000bc4:	4b3a      	ldr	r3, [pc, #232]	; (8000cb0 <HAL_ADC_PollForConversion+0x204>)
 8000bc6:	400b      	ands	r3, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00d      	beq.n	8000be8 <HAL_ADC_PollForConversion+0x13c>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	6919      	ldr	r1, [r3, #16]
 8000bd2:	4b38      	ldr	r3, [pc, #224]	; (8000cb4 <HAL_ADC_PollForConversion+0x208>)
 8000bd4:	400b      	ands	r3, r1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d108      	bne.n	8000bec <HAL_ADC_PollForConversion+0x140>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	68d9      	ldr	r1, [r3, #12]
 8000be0:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <HAL_ADC_PollForConversion+0x208>)
 8000be2:	400b      	ands	r3, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d101      	bne.n	8000bec <HAL_ADC_PollForConversion+0x140>
 8000be8:	2354      	movs	r3, #84	; 0x54
 8000bea:	e000      	b.n	8000bee <HAL_ADC_PollForConversion+0x142>
 8000bec:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000bee:	fb02 f303 	mul.w	r3, r2, r3
 8000bf2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000bf4:	e021      	b.n	8000c3a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bfc:	d01a      	beq.n	8000c34 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d007      	beq.n	8000c14 <HAL_ADC_PollForConversion+0x168>
 8000c04:	f7ff fd72 	bl	80006ec <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	683a      	ldr	r2, [r7, #0]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d20f      	bcs.n	8000c34 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d90b      	bls.n	8000c34 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c20:	f043 0204 	orr.w	r2, r3, #4
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000c30:	2303      	movs	r3, #3
 8000c32:	e030      	b.n	8000c96 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	3301      	adds	r3, #1
 8000c38:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d8d9      	bhi.n	8000bf6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f06f 0212 	mvn.w	r2, #18
 8000c4a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c62:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c66:	d115      	bne.n	8000c94 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d111      	bne.n	8000c94 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d105      	bne.n	8000c94 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8c:	f043 0201 	orr.w	r2, r3, #1
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	371c      	adds	r7, #28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd90      	pop	{r4, r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	24924924 	.word	0x24924924
 8000ca8:	00924924 	.word	0x00924924
 8000cac:	12492492 	.word	0x12492492
 8000cb0:	00492492 	.word	0x00492492
 8000cb4:	00249249 	.word	0x00249249

08000cb8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d101      	bne.n	8000cf0 <HAL_ADC_ConfigChannel+0x20>
 8000cec:	2302      	movs	r3, #2
 8000cee:	e0dc      	b.n	8000eaa <HAL_ADC_ConfigChannel+0x1da>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b06      	cmp	r3, #6
 8000cfe:	d81c      	bhi.n	8000d3a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	3b05      	subs	r3, #5
 8000d12:	221f      	movs	r2, #31
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	4019      	ands	r1, r3
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	3b05      	subs	r3, #5
 8000d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	635a      	str	r2, [r3, #52]	; 0x34
 8000d38:	e03c      	b.n	8000db4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b0c      	cmp	r3, #12
 8000d40:	d81c      	bhi.n	8000d7c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	3b23      	subs	r3, #35	; 0x23
 8000d54:	221f      	movs	r2, #31
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	4019      	ands	r1, r3
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	6818      	ldr	r0, [r3, #0]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	4613      	mov	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	3b23      	subs	r3, #35	; 0x23
 8000d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	430a      	orrs	r2, r1
 8000d78:	631a      	str	r2, [r3, #48]	; 0x30
 8000d7a:	e01b      	b.n	8000db4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	4613      	mov	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	3b41      	subs	r3, #65	; 0x41
 8000d8e:	221f      	movs	r2, #31
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4019      	ands	r1, r3
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	4613      	mov	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	3b41      	subs	r3, #65	; 0x41
 8000da8:	fa00 f203 	lsl.w	r2, r0, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b09      	cmp	r3, #9
 8000dba:	d91c      	bls.n	8000df6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	68d9      	ldr	r1, [r3, #12]
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	3b1e      	subs	r3, #30
 8000dce:	2207      	movs	r2, #7
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	4019      	ands	r1, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	6898      	ldr	r0, [r3, #8]
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	3b1e      	subs	r3, #30
 8000de8:	fa00 f203 	lsl.w	r2, r0, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	e019      	b.n	8000e2a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6919      	ldr	r1, [r3, #16]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4613      	mov	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4413      	add	r3, r2
 8000e06:	2207      	movs	r2, #7
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	4019      	ands	r1, r3
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	6898      	ldr	r0, [r3, #8]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	4413      	add	r3, r2
 8000e1e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	430a      	orrs	r2, r1
 8000e28:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b10      	cmp	r3, #16
 8000e30:	d003      	beq.n	8000e3a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e36:	2b11      	cmp	r3, #17
 8000e38:	d132      	bne.n	8000ea0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a1d      	ldr	r2, [pc, #116]	; (8000eb4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d125      	bne.n	8000e90 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d126      	bne.n	8000ea0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e60:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b10      	cmp	r3, #16
 8000e68:	d11a      	bne.n	8000ea0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <HAL_ADC_ConfigChannel+0x1ec>)
 8000e70:	fba2 2303 	umull	r2, r3, r2, r3
 8000e74:	0c9a      	lsrs	r2, r3, #18
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e80:	e002      	b.n	8000e88 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f9      	bne.n	8000e82 <HAL_ADC_ConfigChannel+0x1b2>
 8000e8e:	e007      	b.n	8000ea0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e94:	f043 0220 	orr.w	r2, r3, #32
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	40012400 	.word	0x40012400
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	431bde83 	.word	0x431bde83

08000ec0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d040      	beq.n	8000f60 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f042 0201 	orr.w	r2, r2, #1
 8000eec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <ADC_Enable+0xac>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a1f      	ldr	r2, [pc, #124]	; (8000f70 <ADC_Enable+0xb0>)
 8000ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef8:	0c9b      	lsrs	r3, r3, #18
 8000efa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000efc:	e002      	b.n	8000f04 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f9      	bne.n	8000efe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f0a:	f7ff fbef 	bl	80006ec <HAL_GetTick>
 8000f0e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f10:	e01f      	b.n	8000f52 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f12:	f7ff fbeb 	bl	80006ec <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d918      	bls.n	8000f52 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d011      	beq.n	8000f52 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f32:	f043 0210 	orr.w	r2, r3, #16
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3e:	f043 0201 	orr.w	r2, r3, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e007      	b.n	8000f62 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d1d8      	bne.n	8000f12 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	431bde83 	.word	0x431bde83

08000f74 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d12e      	bne.n	8000fec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0201 	bic.w	r2, r2, #1
 8000f9c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f9e:	f7ff fba5 	bl	80006ec <HAL_GetTick>
 8000fa2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fa4:	e01b      	b.n	8000fde <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fa6:	f7ff fba1 	bl	80006ec <HAL_GetTick>
 8000faa:	4602      	mov	r2, r0
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d914      	bls.n	8000fde <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d10d      	bne.n	8000fde <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc6:	f043 0210 	orr.w	r2, r3, #16
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd2:	f043 0201 	orr.w	r2, r3, #1
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e007      	b.n	8000fee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d0dc      	beq.n	8000fa6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001014:	4013      	ands	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102a:	4a04      	ldr	r2, [pc, #16]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	60d3      	str	r3, [r2, #12]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <__NVIC_GetPriorityGrouping+0x18>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	f003 0307 	and.w	r3, r3, #7
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001124:	d301      	bcc.n	800112a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001126:	2301      	movs	r3, #1
 8001128:	e00f      	b.n	800114a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <SysTick_Config+0x40>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001132:	210f      	movs	r1, #15
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f7ff ff90 	bl	800105c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <SysTick_Config+0x40>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <SysTick_Config+0x40>)
 8001144:	2207      	movs	r2, #7
 8001146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	e000e010 	.word	0xe000e010

08001158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff49 	bl	8000ff8 <__NVIC_SetPriorityGrouping>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001180:	f7ff ff5e 	bl	8001040 <__NVIC_GetPriorityGrouping>
 8001184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff ff90 	bl	80010b0 <NVIC_EncodePriority>
 8001190:	4602      	mov	r2, r0
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff5f 	bl	800105c <__NVIC_SetPriority>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ffb0 	bl	8001114 <SysTick_Config>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b08b      	sub	sp, #44	; 0x2c
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d2:	e161      	b.n	8001498 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011d4:	2201      	movs	r2, #1
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	69fa      	ldr	r2, [r7, #28]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	f040 8150 	bne.w	8001492 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4a97      	ldr	r2, [pc, #604]	; (8001454 <HAL_GPIO_Init+0x294>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d05e      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 80011fc:	4a95      	ldr	r2, [pc, #596]	; (8001454 <HAL_GPIO_Init+0x294>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d875      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 8001202:	4a95      	ldr	r2, [pc, #596]	; (8001458 <HAL_GPIO_Init+0x298>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d058      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 8001208:	4a93      	ldr	r2, [pc, #588]	; (8001458 <HAL_GPIO_Init+0x298>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d86f      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 800120e:	4a93      	ldr	r2, [pc, #588]	; (800145c <HAL_GPIO_Init+0x29c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d052      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 8001214:	4a91      	ldr	r2, [pc, #580]	; (800145c <HAL_GPIO_Init+0x29c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d869      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 800121a:	4a91      	ldr	r2, [pc, #580]	; (8001460 <HAL_GPIO_Init+0x2a0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d04c      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 8001220:	4a8f      	ldr	r2, [pc, #572]	; (8001460 <HAL_GPIO_Init+0x2a0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d863      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 8001226:	4a8f      	ldr	r2, [pc, #572]	; (8001464 <HAL_GPIO_Init+0x2a4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d046      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 800122c:	4a8d      	ldr	r2, [pc, #564]	; (8001464 <HAL_GPIO_Init+0x2a4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d85d      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 8001232:	2b12      	cmp	r3, #18
 8001234:	d82a      	bhi.n	800128c <HAL_GPIO_Init+0xcc>
 8001236:	2b12      	cmp	r3, #18
 8001238:	d859      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <HAL_GPIO_Init+0x80>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	080012bb 	.word	0x080012bb
 8001244:	08001295 	.word	0x08001295
 8001248:	080012a7 	.word	0x080012a7
 800124c:	080012e9 	.word	0x080012e9
 8001250:	080012ef 	.word	0x080012ef
 8001254:	080012ef 	.word	0x080012ef
 8001258:	080012ef 	.word	0x080012ef
 800125c:	080012ef 	.word	0x080012ef
 8001260:	080012ef 	.word	0x080012ef
 8001264:	080012ef 	.word	0x080012ef
 8001268:	080012ef 	.word	0x080012ef
 800126c:	080012ef 	.word	0x080012ef
 8001270:	080012ef 	.word	0x080012ef
 8001274:	080012ef 	.word	0x080012ef
 8001278:	080012ef 	.word	0x080012ef
 800127c:	080012ef 	.word	0x080012ef
 8001280:	080012ef 	.word	0x080012ef
 8001284:	0800129d 	.word	0x0800129d
 8001288:	080012b1 	.word	0x080012b1
 800128c:	4a76      	ldr	r2, [pc, #472]	; (8001468 <HAL_GPIO_Init+0x2a8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001292:	e02c      	b.n	80012ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	623b      	str	r3, [r7, #32]
          break;
 800129a:	e029      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	3304      	adds	r3, #4
 80012a2:	623b      	str	r3, [r7, #32]
          break;
 80012a4:	e024      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	3308      	adds	r3, #8
 80012ac:	623b      	str	r3, [r7, #32]
          break;
 80012ae:	e01f      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	330c      	adds	r3, #12
 80012b6:	623b      	str	r3, [r7, #32]
          break;
 80012b8:	e01a      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012c2:	2304      	movs	r3, #4
 80012c4:	623b      	str	r3, [r7, #32]
          break;
 80012c6:	e013      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d105      	bne.n	80012dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d0:	2308      	movs	r3, #8
 80012d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	611a      	str	r2, [r3, #16]
          break;
 80012da:	e009      	b.n	80012f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012dc:	2308      	movs	r3, #8
 80012de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	615a      	str	r2, [r3, #20]
          break;
 80012e6:	e003      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
          break;
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          break;
 80012ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2bff      	cmp	r3, #255	; 0xff
 80012f4:	d801      	bhi.n	80012fa <HAL_GPIO_Init+0x13a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	e001      	b.n	80012fe <HAL_GPIO_Init+0x13e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3304      	adds	r3, #4
 80012fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	2bff      	cmp	r3, #255	; 0xff
 8001304:	d802      	bhi.n	800130c <HAL_GPIO_Init+0x14c>
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	e002      	b.n	8001312 <HAL_GPIO_Init+0x152>
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	3b08      	subs	r3, #8
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	210f      	movs	r1, #15
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	401a      	ands	r2, r3
 8001324:	6a39      	ldr	r1, [r7, #32]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	431a      	orrs	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 80a9 	beq.w	8001492 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001340:	4b4a      	ldr	r3, [pc, #296]	; (800146c <HAL_GPIO_Init+0x2ac>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a49      	ldr	r2, [pc, #292]	; (800146c <HAL_GPIO_Init+0x2ac>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b47      	ldr	r3, [pc, #284]	; (800146c <HAL_GPIO_Init+0x2ac>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001358:	4a45      	ldr	r2, [pc, #276]	; (8001470 <HAL_GPIO_Init+0x2b0>)
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001364:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	220f      	movs	r2, #15
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a3d      	ldr	r2, [pc, #244]	; (8001474 <HAL_GPIO_Init+0x2b4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d00d      	beq.n	80013a0 <HAL_GPIO_Init+0x1e0>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a3c      	ldr	r2, [pc, #240]	; (8001478 <HAL_GPIO_Init+0x2b8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d007      	beq.n	800139c <HAL_GPIO_Init+0x1dc>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a3b      	ldr	r2, [pc, #236]	; (800147c <HAL_GPIO_Init+0x2bc>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d101      	bne.n	8001398 <HAL_GPIO_Init+0x1d8>
 8001394:	2302      	movs	r3, #2
 8001396:	e004      	b.n	80013a2 <HAL_GPIO_Init+0x1e2>
 8001398:	2303      	movs	r3, #3
 800139a:	e002      	b.n	80013a2 <HAL_GPIO_Init+0x1e2>
 800139c:	2301      	movs	r3, #1
 800139e:	e000      	b.n	80013a2 <HAL_GPIO_Init+0x1e2>
 80013a0:	2300      	movs	r3, #0
 80013a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a4:	f002 0203 	and.w	r2, r2, #3
 80013a8:	0092      	lsls	r2, r2, #2
 80013aa:	4093      	lsls	r3, r2
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013b2:	492f      	ldr	r1, [pc, #188]	; (8001470 <HAL_GPIO_Init+0x2b0>)
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	3302      	adds	r3, #2
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d006      	beq.n	80013da <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013cc:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <HAL_GPIO_Init+0x2c0>)
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	492b      	ldr	r1, [pc, #172]	; (8001480 <HAL_GPIO_Init+0x2c0>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	608b      	str	r3, [r1, #8]
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <HAL_GPIO_Init+0x2c0>)
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	4927      	ldr	r1, [pc, #156]	; (8001480 <HAL_GPIO_Init+0x2c0>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d006      	beq.n	8001402 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <HAL_GPIO_Init+0x2c0>)
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	4921      	ldr	r1, [pc, #132]	; (8001480 <HAL_GPIO_Init+0x2c0>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	60cb      	str	r3, [r1, #12]
 8001400:	e006      	b.n	8001410 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <HAL_GPIO_Init+0x2c0>)
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	43db      	mvns	r3, r3
 800140a:	491d      	ldr	r1, [pc, #116]	; (8001480 <HAL_GPIO_Init+0x2c0>)
 800140c:	4013      	ands	r3, r2
 800140e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_GPIO_Init+0x2c0>)
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	4917      	ldr	r1, [pc, #92]	; (8001480 <HAL_GPIO_Init+0x2c0>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_GPIO_Init+0x2c0>)
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	43db      	mvns	r3, r3
 8001432:	4913      	ldr	r1, [pc, #76]	; (8001480 <HAL_GPIO_Init+0x2c0>)
 8001434:	4013      	ands	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d01f      	beq.n	8001484 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_GPIO_Init+0x2c0>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	490d      	ldr	r1, [pc, #52]	; (8001480 <HAL_GPIO_Init+0x2c0>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
 8001450:	e01f      	b.n	8001492 <HAL_GPIO_Init+0x2d2>
 8001452:	bf00      	nop
 8001454:	10320000 	.word	0x10320000
 8001458:	10310000 	.word	0x10310000
 800145c:	10220000 	.word	0x10220000
 8001460:	10210000 	.word	0x10210000
 8001464:	10120000 	.word	0x10120000
 8001468:	10110000 	.word	0x10110000
 800146c:	40021000 	.word	0x40021000
 8001470:	40010000 	.word	0x40010000
 8001474:	40010800 	.word	0x40010800
 8001478:	40010c00 	.word	0x40010c00
 800147c:	40011000 	.word	0x40011000
 8001480:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_GPIO_Init+0x2f4>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	43db      	mvns	r3, r3
 800148c:	4909      	ldr	r1, [pc, #36]	; (80014b4 <HAL_GPIO_Init+0x2f4>)
 800148e:	4013      	ands	r3, r2
 8001490:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	3301      	adds	r3, #1
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	fa22 f303 	lsr.w	r3, r2, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f47f ae96 	bne.w	80011d4 <HAL_GPIO_Init+0x14>
  }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	372c      	adds	r7, #44	; 0x2c
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	40010400 	.word	0x40010400

080014b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]
 80014c4:	4613      	mov	r3, r2
 80014c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c8:	787b      	ldrb	r3, [r7, #1]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014d4:	e003      	b.n	80014de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	041a      	lsls	r2, r3, #16
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	611a      	str	r2, [r3, #16]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e272      	b.n	80019e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 8087 	beq.w	8001616 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001508:	4b92      	ldr	r3, [pc, #584]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 030c 	and.w	r3, r3, #12
 8001510:	2b04      	cmp	r3, #4
 8001512:	d00c      	beq.n	800152e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001514:	4b8f      	ldr	r3, [pc, #572]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b08      	cmp	r3, #8
 800151e:	d112      	bne.n	8001546 <HAL_RCC_OscConfig+0x5e>
 8001520:	4b8c      	ldr	r3, [pc, #560]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152c:	d10b      	bne.n	8001546 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152e:	4b89      	ldr	r3, [pc, #548]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d06c      	beq.n	8001614 <HAL_RCC_OscConfig+0x12c>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d168      	bne.n	8001614 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e24c      	b.n	80019e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154e:	d106      	bne.n	800155e <HAL_RCC_OscConfig+0x76>
 8001550:	4b80      	ldr	r3, [pc, #512]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a7f      	ldr	r2, [pc, #508]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	e02e      	b.n	80015bc <HAL_RCC_OscConfig+0xd4>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10c      	bne.n	8001580 <HAL_RCC_OscConfig+0x98>
 8001566:	4b7b      	ldr	r3, [pc, #492]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a7a      	ldr	r2, [pc, #488]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 800156c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	4b78      	ldr	r3, [pc, #480]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a77      	ldr	r2, [pc, #476]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e01d      	b.n	80015bc <HAL_RCC_OscConfig+0xd4>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0xbc>
 800158a:	4b72      	ldr	r3, [pc, #456]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a71      	ldr	r2, [pc, #452]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b6f      	ldr	r3, [pc, #444]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a6e      	ldr	r2, [pc, #440]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 800159c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e00b      	b.n	80015bc <HAL_RCC_OscConfig+0xd4>
 80015a4:	4b6b      	ldr	r3, [pc, #428]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a6a      	ldr	r2, [pc, #424]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4b68      	ldr	r3, [pc, #416]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a67      	ldr	r2, [pc, #412]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d013      	beq.n	80015ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff f892 	bl	80006ec <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff f88e 	bl	80006ec <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	; 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e200      	b.n	80019e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	4b5d      	ldr	r3, [pc, #372]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0xe4>
 80015ea:	e014      	b.n	8001616 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff f87e 	bl	80006ec <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f4:	f7ff f87a 	bl	80006ec <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b64      	cmp	r3, #100	; 0x64
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e1ec      	b.n	80019e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001606:	4b53      	ldr	r3, [pc, #332]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x10c>
 8001612:	e000      	b.n	8001616 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d063      	beq.n	80016ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001622:	4b4c      	ldr	r3, [pc, #304]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00b      	beq.n	8001646 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800162e:	4b49      	ldr	r3, [pc, #292]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b08      	cmp	r3, #8
 8001638:	d11c      	bne.n	8001674 <HAL_RCC_OscConfig+0x18c>
 800163a:	4b46      	ldr	r3, [pc, #280]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d116      	bne.n	8001674 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001646:	4b43      	ldr	r3, [pc, #268]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d005      	beq.n	800165e <HAL_RCC_OscConfig+0x176>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d001      	beq.n	800165e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e1c0      	b.n	80019e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165e:	4b3d      	ldr	r3, [pc, #244]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	4939      	ldr	r1, [pc, #228]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001672:	e03a      	b.n	80016ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d020      	beq.n	80016be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800167c:	4b36      	ldr	r3, [pc, #216]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 800167e:	2201      	movs	r2, #1
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7ff f833 	bl	80006ec <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168a:	f7ff f82f 	bl	80006ec <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e1a1      	b.n	80019e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169c:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a8:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4927      	ldr	r1, [pc, #156]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	600b      	str	r3, [r1, #0]
 80016bc:	e015      	b.n	80016ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016be:	4b26      	ldr	r3, [pc, #152]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff f812 	bl	80006ec <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016cc:	f7ff f80e 	bl	80006ec <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e180      	b.n	80019e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016de:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d03a      	beq.n	800176c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d019      	beq.n	8001732 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001700:	2201      	movs	r2, #1
 8001702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001704:	f7fe fff2 	bl	80006ec <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170c:	f7fe ffee 	bl	80006ec <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e160      	b.n	80019e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800172a:	2001      	movs	r0, #1
 800172c:	f000 face 	bl	8001ccc <RCC_Delay>
 8001730:	e01c      	b.n	800176c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001738:	f7fe ffd8 	bl	80006ec <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800173e:	e00f      	b.n	8001760 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001740:	f7fe ffd4 	bl	80006ec <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d908      	bls.n	8001760 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e146      	b.n	80019e0 <HAL_RCC_OscConfig+0x4f8>
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	42420000 	.word	0x42420000
 800175c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001760:	4b92      	ldr	r3, [pc, #584]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1e9      	bne.n	8001740 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80a6 	beq.w	80018c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800177e:	4b8b      	ldr	r3, [pc, #556]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10d      	bne.n	80017a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b88      	ldr	r3, [pc, #544]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a87      	ldr	r2, [pc, #540]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	61d3      	str	r3, [r2, #28]
 8001796:	4b85      	ldr	r3, [pc, #532]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017a2:	2301      	movs	r3, #1
 80017a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a6:	4b82      	ldr	r3, [pc, #520]	; (80019b0 <HAL_RCC_OscConfig+0x4c8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d118      	bne.n	80017e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017b2:	4b7f      	ldr	r3, [pc, #508]	; (80019b0 <HAL_RCC_OscConfig+0x4c8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a7e      	ldr	r2, [pc, #504]	; (80019b0 <HAL_RCC_OscConfig+0x4c8>)
 80017b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017be:	f7fe ff95 	bl	80006ec <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c6:	f7fe ff91 	bl	80006ec <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b64      	cmp	r3, #100	; 0x64
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e103      	b.n	80019e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d8:	4b75      	ldr	r3, [pc, #468]	; (80019b0 <HAL_RCC_OscConfig+0x4c8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d106      	bne.n	80017fa <HAL_RCC_OscConfig+0x312>
 80017ec:	4b6f      	ldr	r3, [pc, #444]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4a6e      	ldr	r2, [pc, #440]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6213      	str	r3, [r2, #32]
 80017f8:	e02d      	b.n	8001856 <HAL_RCC_OscConfig+0x36e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10c      	bne.n	800181c <HAL_RCC_OscConfig+0x334>
 8001802:	4b6a      	ldr	r3, [pc, #424]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	4a69      	ldr	r2, [pc, #420]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001808:	f023 0301 	bic.w	r3, r3, #1
 800180c:	6213      	str	r3, [r2, #32]
 800180e:	4b67      	ldr	r3, [pc, #412]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	4a66      	ldr	r2, [pc, #408]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001814:	f023 0304 	bic.w	r3, r3, #4
 8001818:	6213      	str	r3, [r2, #32]
 800181a:	e01c      	b.n	8001856 <HAL_RCC_OscConfig+0x36e>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2b05      	cmp	r3, #5
 8001822:	d10c      	bne.n	800183e <HAL_RCC_OscConfig+0x356>
 8001824:	4b61      	ldr	r3, [pc, #388]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4a60      	ldr	r2, [pc, #384]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 800182a:	f043 0304 	orr.w	r3, r3, #4
 800182e:	6213      	str	r3, [r2, #32]
 8001830:	4b5e      	ldr	r3, [pc, #376]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	4a5d      	ldr	r2, [pc, #372]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6213      	str	r3, [r2, #32]
 800183c:	e00b      	b.n	8001856 <HAL_RCC_OscConfig+0x36e>
 800183e:	4b5b      	ldr	r3, [pc, #364]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	4a5a      	ldr	r2, [pc, #360]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	6213      	str	r3, [r2, #32]
 800184a:	4b58      	ldr	r3, [pc, #352]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4a57      	ldr	r2, [pc, #348]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001850:	f023 0304 	bic.w	r3, r3, #4
 8001854:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d015      	beq.n	800188a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185e:	f7fe ff45 	bl	80006ec <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001864:	e00a      	b.n	800187c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7fe ff41 	bl	80006ec <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f241 3288 	movw	r2, #5000	; 0x1388
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e0b1      	b.n	80019e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187c:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0ee      	beq.n	8001866 <HAL_RCC_OscConfig+0x37e>
 8001888:	e014      	b.n	80018b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188a:	f7fe ff2f 	bl	80006ec <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001890:	e00a      	b.n	80018a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001892:	f7fe ff2b 	bl	80006ec <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e09b      	b.n	80019e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a8:	4b40      	ldr	r3, [pc, #256]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1ee      	bne.n	8001892 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d105      	bne.n	80018c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ba:	4b3c      	ldr	r3, [pc, #240]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a3b      	ldr	r2, [pc, #236]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 8087 	beq.w	80019de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d0:	4b36      	ldr	r3, [pc, #216]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 030c 	and.w	r3, r3, #12
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d061      	beq.n	80019a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d146      	bne.n	8001972 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e4:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7fe feff 	bl	80006ec <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f2:	f7fe fefb 	bl	80006ec <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e06d      	b.n	80019e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001904:	4b29      	ldr	r3, [pc, #164]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001918:	d108      	bne.n	800192c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	4921      	ldr	r1, [pc, #132]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800192c:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a19      	ldr	r1, [r3, #32]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	430b      	orrs	r3, r1
 800193e:	491b      	ldr	r1, [pc, #108]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7fe fecf 	bl	80006ec <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001952:	f7fe fecb 	bl	80006ec <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e03d      	b.n	80019e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x46a>
 8001970:	e035      	b.n	80019de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_RCC_OscConfig+0x4cc>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7fe feb8 	bl	80006ec <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001980:	f7fe feb4 	bl	80006ec <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e026      	b.n	80019e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x498>
 800199e:	e01e      	b.n	80019de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d107      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e019      	b.n	80019e0 <HAL_RCC_OscConfig+0x4f8>
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40007000 	.word	0x40007000
 80019b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_OscConfig+0x500>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d106      	bne.n	80019da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d001      	beq.n	80019de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40021000 	.word	0x40021000

080019ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0d0      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a00:	4b6a      	ldr	r3, [pc, #424]	; (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d910      	bls.n	8001a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	4b67      	ldr	r3, [pc, #412]	; (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 0207 	bic.w	r2, r3, #7
 8001a16:	4965      	ldr	r1, [pc, #404]	; (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b63      	ldr	r3, [pc, #396]	; (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0b8      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d020      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a48:	4b59      	ldr	r3, [pc, #356]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a58      	ldr	r2, [pc, #352]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a60:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	4a52      	ldr	r2, [pc, #328]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a6c:	4b50      	ldr	r3, [pc, #320]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	494d      	ldr	r1, [pc, #308]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d040      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d115      	bne.n	8001aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e07f      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aaa:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e073      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aba:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e06b      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aca:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f023 0203 	bic.w	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4936      	ldr	r1, [pc, #216]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001adc:	f7fe fe06 	bl	80006ec <HAL_GetTick>
 8001ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae4:	f7fe fe02 	bl	80006ec <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e053      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afa:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 020c 	and.w	r2, r3, #12
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d1eb      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b0c:	4b27      	ldr	r3, [pc, #156]	; (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d210      	bcs.n	8001b3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 0207 	bic.w	r2, r3, #7
 8001b22:	4922      	ldr	r1, [pc, #136]	; (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2a:	4b20      	ldr	r3, [pc, #128]	; (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e032      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4916      	ldr	r1, [pc, #88]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d009      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	490e      	ldr	r1, [pc, #56]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b7a:	f000 f821 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	490a      	ldr	r1, [pc, #40]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8c:	5ccb      	ldrb	r3, [r1, r3]
 8001b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b92:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_RCC_ClockConfig+0x1cc>)
 8001b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_RCC_ClockConfig+0x1d0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fd64 	bl	8000668 <HAL_InitTick>

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40022000 	.word	0x40022000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	08002cf8 	.word	0x08002cf8
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d002      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x30>
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d003      	beq.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x36>
 8001bee:	e027      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bf2:	613b      	str	r3, [r7, #16]
      break;
 8001bf4:	e027      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	0c9b      	lsrs	r3, r3, #18
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c00:	5cd3      	ldrb	r3, [r2, r3]
 8001c02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d010      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	0c5b      	lsrs	r3, r3, #17
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c1a:	5cd3      	ldrb	r3, [r2, r3]
 8001c1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c22:	fb03 f202 	mul.w	r2, r3, r2
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	e004      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a0c      	ldr	r2, [pc, #48]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c34:	fb02 f303 	mul.w	r3, r2, r3
 8001c38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	613b      	str	r3, [r7, #16]
      break;
 8001c3e:	e002      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c42:	613b      	str	r3, [r7, #16]
      break;
 8001c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c46:	693b      	ldr	r3, [r7, #16]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	007a1200 	.word	0x007a1200
 8001c5c:	08002d10 	.word	0x08002d10
 8001c60:	08002d20 	.word	0x08002d20
 8001c64:	003d0900 	.word	0x003d0900

08001c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c6c:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	20000000 	.word	0x20000000

08001c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c80:	f7ff fff2 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	; (8001ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	08002d08 	.word	0x08002d08

08001ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ca8:	f7ff ffde 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	0adb      	lsrs	r3, r3, #11
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	08002d08 	.word	0x08002d08

08001ccc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <RCC_Delay+0x34>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <RCC_Delay+0x38>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	0a5b      	lsrs	r3, r3, #9
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
 8001ce6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ce8:	bf00      	nop
  }
  while (Delay --);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1e5a      	subs	r2, r3, #1
 8001cee:	60fa      	str	r2, [r7, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f9      	bne.n	8001ce8 <RCC_Delay+0x1c>
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	20000000 	.word	0x20000000
 8001d04:	10624dd3 	.word	0x10624dd3

08001d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d07d      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d28:	4b4f      	ldr	r3, [pc, #316]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10d      	bne.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d34:	4b4c      	ldr	r3, [pc, #304]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	4a4b      	ldr	r2, [pc, #300]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	61d3      	str	r3, [r2, #28]
 8001d40:	4b49      	ldr	r3, [pc, #292]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d50:	4b46      	ldr	r3, [pc, #280]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d118      	bne.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5c:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a42      	ldr	r2, [pc, #264]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d68:	f7fe fcc0 	bl	80006ec <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	e008      	b.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d70:	f7fe fcbc 	bl	80006ec <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	; 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e06d      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d8e:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d02e      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d027      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dac:	4b2e      	ldr	r3, [pc, #184]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001db4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001db6:	4b2e      	ldr	r3, [pc, #184]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dbc:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001dc2:	4a29      	ldr	r2, [pc, #164]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d014      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7fe fc8b 	bl	80006ec <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f7fe fc87 	bl	80006ec <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e036      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0ee      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4917      	ldr	r1, [pc, #92]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d105      	bne.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	4a13      	ldr	r2, [pc, #76]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	490b      	ldr	r1, [pc, #44]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d008      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	4904      	ldr	r1, [pc, #16]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40007000 	.word	0x40007000
 8001e70:	42420440 	.word	0x42420440

08001e74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b10      	cmp	r3, #16
 8001e94:	d00a      	beq.n	8001eac <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	f200 808a 	bhi.w	8001fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d045      	beq.n	8001f30 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d075      	beq.n	8001f96 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001eaa:	e082      	b.n	8001fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001eac:	4b46      	ldr	r3, [pc, #280]	; (8001fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001eb2:	4b45      	ldr	r3, [pc, #276]	; (8001fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d07b      	beq.n	8001fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	0c9b      	lsrs	r3, r3, #18
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	4a41      	ldr	r2, [pc, #260]	; (8001fcc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001ec8:	5cd3      	ldrb	r3, [r2, r3]
 8001eca:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d015      	beq.n	8001f02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ed6:	4b3c      	ldr	r3, [pc, #240]	; (8001fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	0c5b      	lsrs	r3, r3, #17
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	4a3b      	ldr	r2, [pc, #236]	; (8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001ee2:	5cd3      	ldrb	r3, [r2, r3]
 8001ee4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00d      	beq.n	8001f0c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001ef0:	4a38      	ldr	r2, [pc, #224]	; (8001fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	e004      	b.n	8001f0c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4a34      	ldr	r2, [pc, #208]	; (8001fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f18:	d102      	bne.n	8001f20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	61bb      	str	r3, [r7, #24]
      break;
 8001f1e:	e04a      	b.n	8001fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4a2d      	ldr	r2, [pc, #180]	; (8001fdc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	085b      	lsrs	r3, r3, #1
 8001f2c:	61bb      	str	r3, [r7, #24]
      break;
 8001f2e:	e042      	b.n	8001fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001f30:	4b25      	ldr	r3, [pc, #148]	; (8001fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f40:	d108      	bne.n	8001f54 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001f4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f50:	61bb      	str	r3, [r7, #24]
 8001f52:	e01f      	b.n	8001f94 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f5e:	d109      	bne.n	8001f74 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001f6c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	e00f      	b.n	8001f94 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f7e:	d11c      	bne.n	8001fba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d016      	beq.n	8001fba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8001f8c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001f90:	61bb      	str	r3, [r7, #24]
      break;
 8001f92:	e012      	b.n	8001fba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001f94:	e011      	b.n	8001fba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001f96:	f7ff fe85 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	0b9b      	lsrs	r3, r3, #14
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	61bb      	str	r3, [r7, #24]
      break;
 8001fb0:	e004      	b.n	8001fbc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001fb2:	bf00      	nop
 8001fb4:	e002      	b.n	8001fbc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001fb6:	bf00      	nop
 8001fb8:	e000      	b.n	8001fbc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001fba:	bf00      	nop
    }
  }
  return (frequency);
 8001fbc:	69bb      	ldr	r3, [r7, #24]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3720      	adds	r7, #32
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	08002d24 	.word	0x08002d24
 8001fd0:	08002d34 	.word	0x08002d34
 8001fd4:	007a1200 	.word	0x007a1200
 8001fd8:	003d0900 	.word	0x003d0900
 8001fdc:	aaaaaaab 	.word	0xaaaaaaab

08001fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e042      	b.n	8002078 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe fa42 	bl	8000490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2224      	movs	r2, #36	; 0x24
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f91d 	bl	8002264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af02      	add	r7, sp, #8
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	4613      	mov	r3, r2
 800208e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b20      	cmp	r3, #32
 800209e:	d16d      	bne.n	800217c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <HAL_UART_Transmit+0x2c>
 80020a6:	88fb      	ldrh	r3, [r7, #6]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e066      	b.n	800217e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2221      	movs	r2, #33	; 0x21
 80020ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020be:	f7fe fb15 	bl	80006ec <HAL_GetTick>
 80020c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	88fa      	ldrh	r2, [r7, #6]
 80020c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	88fa      	ldrh	r2, [r7, #6]
 80020ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d8:	d108      	bne.n	80020ec <HAL_UART_Transmit+0x6c>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d104      	bne.n	80020ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	e003      	b.n	80020f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020f4:	e02a      	b.n	800214c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2200      	movs	r2, #0
 80020fe:	2180      	movs	r1, #128	; 0x80
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f840 	bl	8002186 <UART_WaitOnFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e036      	b.n	800217e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10b      	bne.n	800212e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002124:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	3302      	adds	r3, #2
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	e007      	b.n	800213e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	781a      	ldrb	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	3301      	adds	r3, #1
 800213c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1cf      	bne.n	80020f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2200      	movs	r2, #0
 800215e:	2140      	movs	r1, #64	; 0x40
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 f810 	bl	8002186 <UART_WaitOnFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e006      	b.n	800217e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	e000      	b.n	800217e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800217c:	2302      	movs	r3, #2
  }
}
 800217e:	4618      	mov	r0, r3
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b090      	sub	sp, #64	; 0x40
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	603b      	str	r3, [r7, #0]
 8002192:	4613      	mov	r3, r2
 8002194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002196:	e050      	b.n	800223a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800219a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219e:	d04c      	beq.n	800223a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80021a6:	f7fe faa1 	bl	80006ec <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d241      	bcs.n	800223a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	330c      	adds	r3, #12
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c0:	e853 3f00 	ldrex	r3, [r3]
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	330c      	adds	r3, #12
 80021d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021d6:	637a      	str	r2, [r7, #52]	; 0x34
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021de:	e841 2300 	strex	r3, r2, [r1]
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80021e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1e5      	bne.n	80021b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3314      	adds	r3, #20
 80021f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	e853 3f00 	ldrex	r3, [r3]
 80021f8:	613b      	str	r3, [r7, #16]
   return(result);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	63bb      	str	r3, [r7, #56]	; 0x38
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3314      	adds	r3, #20
 8002208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800220a:	623a      	str	r2, [r7, #32]
 800220c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800220e:	69f9      	ldr	r1, [r7, #28]
 8002210:	6a3a      	ldr	r2, [r7, #32]
 8002212:	e841 2300 	strex	r3, r2, [r1]
 8002216:	61bb      	str	r3, [r7, #24]
   return(result);
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1e5      	bne.n	80021ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2220      	movs	r2, #32
 8002222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2220      	movs	r2, #32
 800222a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e00f      	b.n	800225a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4013      	ands	r3, r2
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	429a      	cmp	r2, r3
 8002248:	bf0c      	ite	eq
 800224a:	2301      	moveq	r3, #1
 800224c:	2300      	movne	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	429a      	cmp	r2, r3
 8002256:	d09f      	beq.n	8002198 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3740      	adds	r7, #64	; 0x40
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	4313      	orrs	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800229e:	f023 030c 	bic.w	r3, r3, #12
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a2c      	ldr	r2, [pc, #176]	; (8002378 <UART_SetConfig+0x114>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d103      	bne.n	80022d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022cc:	f7ff fcea 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	e002      	b.n	80022da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022d4:	f7ff fcd2 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 80022d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	009a      	lsls	r2, r3, #2
 80022e4:	441a      	add	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f0:	4a22      	ldr	r2, [pc, #136]	; (800237c <UART_SetConfig+0x118>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	0119      	lsls	r1, r3, #4
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	009a      	lsls	r2, r3, #2
 8002304:	441a      	add	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002310:	4b1a      	ldr	r3, [pc, #104]	; (800237c <UART_SetConfig+0x118>)
 8002312:	fba3 0302 	umull	r0, r3, r3, r2
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	2064      	movs	r0, #100	; 0x64
 800231a:	fb00 f303 	mul.w	r3, r0, r3
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	3332      	adds	r3, #50	; 0x32
 8002324:	4a15      	ldr	r2, [pc, #84]	; (800237c <UART_SetConfig+0x118>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002330:	4419      	add	r1, r3
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	009a      	lsls	r2, r3, #2
 800233c:	441a      	add	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	fbb2 f2f3 	udiv	r2, r2, r3
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <UART_SetConfig+0x118>)
 800234a:	fba3 0302 	umull	r0, r3, r3, r2
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	2064      	movs	r0, #100	; 0x64
 8002352:	fb00 f303 	mul.w	r3, r0, r3
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	3332      	adds	r3, #50	; 0x32
 800235c:	4a07      	ldr	r2, [pc, #28]	; (800237c <UART_SetConfig+0x118>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	f003 020f 	and.w	r2, r3, #15
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	440a      	add	r2, r1
 800236e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40013800 	.word	0x40013800
 800237c:	51eb851f 	.word	0x51eb851f

08002380 <__errno>:
 8002380:	4b01      	ldr	r3, [pc, #4]	; (8002388 <__errno+0x8>)
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	2000000c 	.word	0x2000000c

0800238c <__libc_init_array>:
 800238c:	b570      	push	{r4, r5, r6, lr}
 800238e:	2600      	movs	r6, #0
 8002390:	4d0c      	ldr	r5, [pc, #48]	; (80023c4 <__libc_init_array+0x38>)
 8002392:	4c0d      	ldr	r4, [pc, #52]	; (80023c8 <__libc_init_array+0x3c>)
 8002394:	1b64      	subs	r4, r4, r5
 8002396:	10a4      	asrs	r4, r4, #2
 8002398:	42a6      	cmp	r6, r4
 800239a:	d109      	bne.n	80023b0 <__libc_init_array+0x24>
 800239c:	f000 fc9c 	bl	8002cd8 <_init>
 80023a0:	2600      	movs	r6, #0
 80023a2:	4d0a      	ldr	r5, [pc, #40]	; (80023cc <__libc_init_array+0x40>)
 80023a4:	4c0a      	ldr	r4, [pc, #40]	; (80023d0 <__libc_init_array+0x44>)
 80023a6:	1b64      	subs	r4, r4, r5
 80023a8:	10a4      	asrs	r4, r4, #2
 80023aa:	42a6      	cmp	r6, r4
 80023ac:	d105      	bne.n	80023ba <__libc_init_array+0x2e>
 80023ae:	bd70      	pop	{r4, r5, r6, pc}
 80023b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b4:	4798      	blx	r3
 80023b6:	3601      	adds	r6, #1
 80023b8:	e7ee      	b.n	8002398 <__libc_init_array+0xc>
 80023ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80023be:	4798      	blx	r3
 80023c0:	3601      	adds	r6, #1
 80023c2:	e7f2      	b.n	80023aa <__libc_init_array+0x1e>
 80023c4:	08002d6c 	.word	0x08002d6c
 80023c8:	08002d6c 	.word	0x08002d6c
 80023cc:	08002d6c 	.word	0x08002d6c
 80023d0:	08002d70 	.word	0x08002d70

080023d4 <memset>:
 80023d4:	4603      	mov	r3, r0
 80023d6:	4402      	add	r2, r0
 80023d8:	4293      	cmp	r3, r2
 80023da:	d100      	bne.n	80023de <memset+0xa>
 80023dc:	4770      	bx	lr
 80023de:	f803 1b01 	strb.w	r1, [r3], #1
 80023e2:	e7f9      	b.n	80023d8 <memset+0x4>

080023e4 <siprintf>:
 80023e4:	b40e      	push	{r1, r2, r3}
 80023e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80023ea:	b500      	push	{lr}
 80023ec:	b09c      	sub	sp, #112	; 0x70
 80023ee:	ab1d      	add	r3, sp, #116	; 0x74
 80023f0:	9002      	str	r0, [sp, #8]
 80023f2:	9006      	str	r0, [sp, #24]
 80023f4:	9107      	str	r1, [sp, #28]
 80023f6:	9104      	str	r1, [sp, #16]
 80023f8:	4808      	ldr	r0, [pc, #32]	; (800241c <siprintf+0x38>)
 80023fa:	4909      	ldr	r1, [pc, #36]	; (8002420 <siprintf+0x3c>)
 80023fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002400:	9105      	str	r1, [sp, #20]
 8002402:	6800      	ldr	r0, [r0, #0]
 8002404:	a902      	add	r1, sp, #8
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	f000 f868 	bl	80024dc <_svfiprintf_r>
 800240c:	2200      	movs	r2, #0
 800240e:	9b02      	ldr	r3, [sp, #8]
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	b01c      	add	sp, #112	; 0x70
 8002414:	f85d eb04 	ldr.w	lr, [sp], #4
 8002418:	b003      	add	sp, #12
 800241a:	4770      	bx	lr
 800241c:	2000000c 	.word	0x2000000c
 8002420:	ffff0208 	.word	0xffff0208

08002424 <__ssputs_r>:
 8002424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002428:	688e      	ldr	r6, [r1, #8]
 800242a:	4682      	mov	sl, r0
 800242c:	429e      	cmp	r6, r3
 800242e:	460c      	mov	r4, r1
 8002430:	4690      	mov	r8, r2
 8002432:	461f      	mov	r7, r3
 8002434:	d838      	bhi.n	80024a8 <__ssputs_r+0x84>
 8002436:	898a      	ldrh	r2, [r1, #12]
 8002438:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800243c:	d032      	beq.n	80024a4 <__ssputs_r+0x80>
 800243e:	6825      	ldr	r5, [r4, #0]
 8002440:	6909      	ldr	r1, [r1, #16]
 8002442:	3301      	adds	r3, #1
 8002444:	eba5 0901 	sub.w	r9, r5, r1
 8002448:	6965      	ldr	r5, [r4, #20]
 800244a:	444b      	add	r3, r9
 800244c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002450:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002454:	106d      	asrs	r5, r5, #1
 8002456:	429d      	cmp	r5, r3
 8002458:	bf38      	it	cc
 800245a:	461d      	movcc	r5, r3
 800245c:	0553      	lsls	r3, r2, #21
 800245e:	d531      	bpl.n	80024c4 <__ssputs_r+0xa0>
 8002460:	4629      	mov	r1, r5
 8002462:	f000 fb6f 	bl	8002b44 <_malloc_r>
 8002466:	4606      	mov	r6, r0
 8002468:	b950      	cbnz	r0, 8002480 <__ssputs_r+0x5c>
 800246a:	230c      	movs	r3, #12
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f8ca 3000 	str.w	r3, [sl]
 8002474:	89a3      	ldrh	r3, [r4, #12]
 8002476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800247a:	81a3      	strh	r3, [r4, #12]
 800247c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002480:	464a      	mov	r2, r9
 8002482:	6921      	ldr	r1, [r4, #16]
 8002484:	f000 face 	bl	8002a24 <memcpy>
 8002488:	89a3      	ldrh	r3, [r4, #12]
 800248a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800248e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002492:	81a3      	strh	r3, [r4, #12]
 8002494:	6126      	str	r6, [r4, #16]
 8002496:	444e      	add	r6, r9
 8002498:	6026      	str	r6, [r4, #0]
 800249a:	463e      	mov	r6, r7
 800249c:	6165      	str	r5, [r4, #20]
 800249e:	eba5 0509 	sub.w	r5, r5, r9
 80024a2:	60a5      	str	r5, [r4, #8]
 80024a4:	42be      	cmp	r6, r7
 80024a6:	d900      	bls.n	80024aa <__ssputs_r+0x86>
 80024a8:	463e      	mov	r6, r7
 80024aa:	4632      	mov	r2, r6
 80024ac:	4641      	mov	r1, r8
 80024ae:	6820      	ldr	r0, [r4, #0]
 80024b0:	f000 fac6 	bl	8002a40 <memmove>
 80024b4:	68a3      	ldr	r3, [r4, #8]
 80024b6:	2000      	movs	r0, #0
 80024b8:	1b9b      	subs	r3, r3, r6
 80024ba:	60a3      	str	r3, [r4, #8]
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	4433      	add	r3, r6
 80024c0:	6023      	str	r3, [r4, #0]
 80024c2:	e7db      	b.n	800247c <__ssputs_r+0x58>
 80024c4:	462a      	mov	r2, r5
 80024c6:	f000 fbb1 	bl	8002c2c <_realloc_r>
 80024ca:	4606      	mov	r6, r0
 80024cc:	2800      	cmp	r0, #0
 80024ce:	d1e1      	bne.n	8002494 <__ssputs_r+0x70>
 80024d0:	4650      	mov	r0, sl
 80024d2:	6921      	ldr	r1, [r4, #16]
 80024d4:	f000 face 	bl	8002a74 <_free_r>
 80024d8:	e7c7      	b.n	800246a <__ssputs_r+0x46>
	...

080024dc <_svfiprintf_r>:
 80024dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024e0:	4698      	mov	r8, r3
 80024e2:	898b      	ldrh	r3, [r1, #12]
 80024e4:	4607      	mov	r7, r0
 80024e6:	061b      	lsls	r3, r3, #24
 80024e8:	460d      	mov	r5, r1
 80024ea:	4614      	mov	r4, r2
 80024ec:	b09d      	sub	sp, #116	; 0x74
 80024ee:	d50e      	bpl.n	800250e <_svfiprintf_r+0x32>
 80024f0:	690b      	ldr	r3, [r1, #16]
 80024f2:	b963      	cbnz	r3, 800250e <_svfiprintf_r+0x32>
 80024f4:	2140      	movs	r1, #64	; 0x40
 80024f6:	f000 fb25 	bl	8002b44 <_malloc_r>
 80024fa:	6028      	str	r0, [r5, #0]
 80024fc:	6128      	str	r0, [r5, #16]
 80024fe:	b920      	cbnz	r0, 800250a <_svfiprintf_r+0x2e>
 8002500:	230c      	movs	r3, #12
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	e0d1      	b.n	80026ae <_svfiprintf_r+0x1d2>
 800250a:	2340      	movs	r3, #64	; 0x40
 800250c:	616b      	str	r3, [r5, #20]
 800250e:	2300      	movs	r3, #0
 8002510:	9309      	str	r3, [sp, #36]	; 0x24
 8002512:	2320      	movs	r3, #32
 8002514:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002518:	2330      	movs	r3, #48	; 0x30
 800251a:	f04f 0901 	mov.w	r9, #1
 800251e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002522:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80026c8 <_svfiprintf_r+0x1ec>
 8002526:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800252a:	4623      	mov	r3, r4
 800252c:	469a      	mov	sl, r3
 800252e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002532:	b10a      	cbz	r2, 8002538 <_svfiprintf_r+0x5c>
 8002534:	2a25      	cmp	r2, #37	; 0x25
 8002536:	d1f9      	bne.n	800252c <_svfiprintf_r+0x50>
 8002538:	ebba 0b04 	subs.w	fp, sl, r4
 800253c:	d00b      	beq.n	8002556 <_svfiprintf_r+0x7a>
 800253e:	465b      	mov	r3, fp
 8002540:	4622      	mov	r2, r4
 8002542:	4629      	mov	r1, r5
 8002544:	4638      	mov	r0, r7
 8002546:	f7ff ff6d 	bl	8002424 <__ssputs_r>
 800254a:	3001      	adds	r0, #1
 800254c:	f000 80aa 	beq.w	80026a4 <_svfiprintf_r+0x1c8>
 8002550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002552:	445a      	add	r2, fp
 8002554:	9209      	str	r2, [sp, #36]	; 0x24
 8002556:	f89a 3000 	ldrb.w	r3, [sl]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80a2 	beq.w	80026a4 <_svfiprintf_r+0x1c8>
 8002560:	2300      	movs	r3, #0
 8002562:	f04f 32ff 	mov.w	r2, #4294967295
 8002566:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800256a:	f10a 0a01 	add.w	sl, sl, #1
 800256e:	9304      	str	r3, [sp, #16]
 8002570:	9307      	str	r3, [sp, #28]
 8002572:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002576:	931a      	str	r3, [sp, #104]	; 0x68
 8002578:	4654      	mov	r4, sl
 800257a:	2205      	movs	r2, #5
 800257c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002580:	4851      	ldr	r0, [pc, #324]	; (80026c8 <_svfiprintf_r+0x1ec>)
 8002582:	f000 fa41 	bl	8002a08 <memchr>
 8002586:	9a04      	ldr	r2, [sp, #16]
 8002588:	b9d8      	cbnz	r0, 80025c2 <_svfiprintf_r+0xe6>
 800258a:	06d0      	lsls	r0, r2, #27
 800258c:	bf44      	itt	mi
 800258e:	2320      	movmi	r3, #32
 8002590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002594:	0711      	lsls	r1, r2, #28
 8002596:	bf44      	itt	mi
 8002598:	232b      	movmi	r3, #43	; 0x2b
 800259a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800259e:	f89a 3000 	ldrb.w	r3, [sl]
 80025a2:	2b2a      	cmp	r3, #42	; 0x2a
 80025a4:	d015      	beq.n	80025d2 <_svfiprintf_r+0xf6>
 80025a6:	4654      	mov	r4, sl
 80025a8:	2000      	movs	r0, #0
 80025aa:	f04f 0c0a 	mov.w	ip, #10
 80025ae:	9a07      	ldr	r2, [sp, #28]
 80025b0:	4621      	mov	r1, r4
 80025b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025b6:	3b30      	subs	r3, #48	; 0x30
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	d94e      	bls.n	800265a <_svfiprintf_r+0x17e>
 80025bc:	b1b0      	cbz	r0, 80025ec <_svfiprintf_r+0x110>
 80025be:	9207      	str	r2, [sp, #28]
 80025c0:	e014      	b.n	80025ec <_svfiprintf_r+0x110>
 80025c2:	eba0 0308 	sub.w	r3, r0, r8
 80025c6:	fa09 f303 	lsl.w	r3, r9, r3
 80025ca:	4313      	orrs	r3, r2
 80025cc:	46a2      	mov	sl, r4
 80025ce:	9304      	str	r3, [sp, #16]
 80025d0:	e7d2      	b.n	8002578 <_svfiprintf_r+0x9c>
 80025d2:	9b03      	ldr	r3, [sp, #12]
 80025d4:	1d19      	adds	r1, r3, #4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	9103      	str	r1, [sp, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bfbb      	ittet	lt
 80025de:	425b      	neglt	r3, r3
 80025e0:	f042 0202 	orrlt.w	r2, r2, #2
 80025e4:	9307      	strge	r3, [sp, #28]
 80025e6:	9307      	strlt	r3, [sp, #28]
 80025e8:	bfb8      	it	lt
 80025ea:	9204      	strlt	r2, [sp, #16]
 80025ec:	7823      	ldrb	r3, [r4, #0]
 80025ee:	2b2e      	cmp	r3, #46	; 0x2e
 80025f0:	d10c      	bne.n	800260c <_svfiprintf_r+0x130>
 80025f2:	7863      	ldrb	r3, [r4, #1]
 80025f4:	2b2a      	cmp	r3, #42	; 0x2a
 80025f6:	d135      	bne.n	8002664 <_svfiprintf_r+0x188>
 80025f8:	9b03      	ldr	r3, [sp, #12]
 80025fa:	3402      	adds	r4, #2
 80025fc:	1d1a      	adds	r2, r3, #4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	9203      	str	r2, [sp, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	bfb8      	it	lt
 8002606:	f04f 33ff 	movlt.w	r3, #4294967295
 800260a:	9305      	str	r3, [sp, #20]
 800260c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80026cc <_svfiprintf_r+0x1f0>
 8002610:	2203      	movs	r2, #3
 8002612:	4650      	mov	r0, sl
 8002614:	7821      	ldrb	r1, [r4, #0]
 8002616:	f000 f9f7 	bl	8002a08 <memchr>
 800261a:	b140      	cbz	r0, 800262e <_svfiprintf_r+0x152>
 800261c:	2340      	movs	r3, #64	; 0x40
 800261e:	eba0 000a 	sub.w	r0, r0, sl
 8002622:	fa03 f000 	lsl.w	r0, r3, r0
 8002626:	9b04      	ldr	r3, [sp, #16]
 8002628:	3401      	adds	r4, #1
 800262a:	4303      	orrs	r3, r0
 800262c:	9304      	str	r3, [sp, #16]
 800262e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002632:	2206      	movs	r2, #6
 8002634:	4826      	ldr	r0, [pc, #152]	; (80026d0 <_svfiprintf_r+0x1f4>)
 8002636:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800263a:	f000 f9e5 	bl	8002a08 <memchr>
 800263e:	2800      	cmp	r0, #0
 8002640:	d038      	beq.n	80026b4 <_svfiprintf_r+0x1d8>
 8002642:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <_svfiprintf_r+0x1f8>)
 8002644:	bb1b      	cbnz	r3, 800268e <_svfiprintf_r+0x1b2>
 8002646:	9b03      	ldr	r3, [sp, #12]
 8002648:	3307      	adds	r3, #7
 800264a:	f023 0307 	bic.w	r3, r3, #7
 800264e:	3308      	adds	r3, #8
 8002650:	9303      	str	r3, [sp, #12]
 8002652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002654:	4433      	add	r3, r6
 8002656:	9309      	str	r3, [sp, #36]	; 0x24
 8002658:	e767      	b.n	800252a <_svfiprintf_r+0x4e>
 800265a:	460c      	mov	r4, r1
 800265c:	2001      	movs	r0, #1
 800265e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002662:	e7a5      	b.n	80025b0 <_svfiprintf_r+0xd4>
 8002664:	2300      	movs	r3, #0
 8002666:	f04f 0c0a 	mov.w	ip, #10
 800266a:	4619      	mov	r1, r3
 800266c:	3401      	adds	r4, #1
 800266e:	9305      	str	r3, [sp, #20]
 8002670:	4620      	mov	r0, r4
 8002672:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002676:	3a30      	subs	r2, #48	; 0x30
 8002678:	2a09      	cmp	r2, #9
 800267a:	d903      	bls.n	8002684 <_svfiprintf_r+0x1a8>
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0c5      	beq.n	800260c <_svfiprintf_r+0x130>
 8002680:	9105      	str	r1, [sp, #20]
 8002682:	e7c3      	b.n	800260c <_svfiprintf_r+0x130>
 8002684:	4604      	mov	r4, r0
 8002686:	2301      	movs	r3, #1
 8002688:	fb0c 2101 	mla	r1, ip, r1, r2
 800268c:	e7f0      	b.n	8002670 <_svfiprintf_r+0x194>
 800268e:	ab03      	add	r3, sp, #12
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	462a      	mov	r2, r5
 8002694:	4638      	mov	r0, r7
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <_svfiprintf_r+0x1fc>)
 8002698:	a904      	add	r1, sp, #16
 800269a:	f3af 8000 	nop.w
 800269e:	1c42      	adds	r2, r0, #1
 80026a0:	4606      	mov	r6, r0
 80026a2:	d1d6      	bne.n	8002652 <_svfiprintf_r+0x176>
 80026a4:	89ab      	ldrh	r3, [r5, #12]
 80026a6:	065b      	lsls	r3, r3, #25
 80026a8:	f53f af2c 	bmi.w	8002504 <_svfiprintf_r+0x28>
 80026ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026ae:	b01d      	add	sp, #116	; 0x74
 80026b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026b4:	ab03      	add	r3, sp, #12
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	462a      	mov	r2, r5
 80026ba:	4638      	mov	r0, r7
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <_svfiprintf_r+0x1fc>)
 80026be:	a904      	add	r1, sp, #16
 80026c0:	f000 f87c 	bl	80027bc <_printf_i>
 80026c4:	e7eb      	b.n	800269e <_svfiprintf_r+0x1c2>
 80026c6:	bf00      	nop
 80026c8:	08002d36 	.word	0x08002d36
 80026cc:	08002d3c 	.word	0x08002d3c
 80026d0:	08002d40 	.word	0x08002d40
 80026d4:	00000000 	.word	0x00000000
 80026d8:	08002425 	.word	0x08002425

080026dc <_printf_common>:
 80026dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026e0:	4616      	mov	r6, r2
 80026e2:	4699      	mov	r9, r3
 80026e4:	688a      	ldr	r2, [r1, #8]
 80026e6:	690b      	ldr	r3, [r1, #16]
 80026e8:	4607      	mov	r7, r0
 80026ea:	4293      	cmp	r3, r2
 80026ec:	bfb8      	it	lt
 80026ee:	4613      	movlt	r3, r2
 80026f0:	6033      	str	r3, [r6, #0]
 80026f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026f6:	460c      	mov	r4, r1
 80026f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026fc:	b10a      	cbz	r2, 8002702 <_printf_common+0x26>
 80026fe:	3301      	adds	r3, #1
 8002700:	6033      	str	r3, [r6, #0]
 8002702:	6823      	ldr	r3, [r4, #0]
 8002704:	0699      	lsls	r1, r3, #26
 8002706:	bf42      	ittt	mi
 8002708:	6833      	ldrmi	r3, [r6, #0]
 800270a:	3302      	addmi	r3, #2
 800270c:	6033      	strmi	r3, [r6, #0]
 800270e:	6825      	ldr	r5, [r4, #0]
 8002710:	f015 0506 	ands.w	r5, r5, #6
 8002714:	d106      	bne.n	8002724 <_printf_common+0x48>
 8002716:	f104 0a19 	add.w	sl, r4, #25
 800271a:	68e3      	ldr	r3, [r4, #12]
 800271c:	6832      	ldr	r2, [r6, #0]
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	42ab      	cmp	r3, r5
 8002722:	dc28      	bgt.n	8002776 <_printf_common+0x9a>
 8002724:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002728:	1e13      	subs	r3, r2, #0
 800272a:	6822      	ldr	r2, [r4, #0]
 800272c:	bf18      	it	ne
 800272e:	2301      	movne	r3, #1
 8002730:	0692      	lsls	r2, r2, #26
 8002732:	d42d      	bmi.n	8002790 <_printf_common+0xb4>
 8002734:	4649      	mov	r1, r9
 8002736:	4638      	mov	r0, r7
 8002738:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800273c:	47c0      	blx	r8
 800273e:	3001      	adds	r0, #1
 8002740:	d020      	beq.n	8002784 <_printf_common+0xa8>
 8002742:	6823      	ldr	r3, [r4, #0]
 8002744:	68e5      	ldr	r5, [r4, #12]
 8002746:	f003 0306 	and.w	r3, r3, #6
 800274a:	2b04      	cmp	r3, #4
 800274c:	bf18      	it	ne
 800274e:	2500      	movne	r5, #0
 8002750:	6832      	ldr	r2, [r6, #0]
 8002752:	f04f 0600 	mov.w	r6, #0
 8002756:	68a3      	ldr	r3, [r4, #8]
 8002758:	bf08      	it	eq
 800275a:	1aad      	subeq	r5, r5, r2
 800275c:	6922      	ldr	r2, [r4, #16]
 800275e:	bf08      	it	eq
 8002760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002764:	4293      	cmp	r3, r2
 8002766:	bfc4      	itt	gt
 8002768:	1a9b      	subgt	r3, r3, r2
 800276a:	18ed      	addgt	r5, r5, r3
 800276c:	341a      	adds	r4, #26
 800276e:	42b5      	cmp	r5, r6
 8002770:	d11a      	bne.n	80027a8 <_printf_common+0xcc>
 8002772:	2000      	movs	r0, #0
 8002774:	e008      	b.n	8002788 <_printf_common+0xac>
 8002776:	2301      	movs	r3, #1
 8002778:	4652      	mov	r2, sl
 800277a:	4649      	mov	r1, r9
 800277c:	4638      	mov	r0, r7
 800277e:	47c0      	blx	r8
 8002780:	3001      	adds	r0, #1
 8002782:	d103      	bne.n	800278c <_printf_common+0xb0>
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800278c:	3501      	adds	r5, #1
 800278e:	e7c4      	b.n	800271a <_printf_common+0x3e>
 8002790:	2030      	movs	r0, #48	; 0x30
 8002792:	18e1      	adds	r1, r4, r3
 8002794:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800279e:	4422      	add	r2, r4
 80027a0:	3302      	adds	r3, #2
 80027a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80027a6:	e7c5      	b.n	8002734 <_printf_common+0x58>
 80027a8:	2301      	movs	r3, #1
 80027aa:	4622      	mov	r2, r4
 80027ac:	4649      	mov	r1, r9
 80027ae:	4638      	mov	r0, r7
 80027b0:	47c0      	blx	r8
 80027b2:	3001      	adds	r0, #1
 80027b4:	d0e6      	beq.n	8002784 <_printf_common+0xa8>
 80027b6:	3601      	adds	r6, #1
 80027b8:	e7d9      	b.n	800276e <_printf_common+0x92>
	...

080027bc <_printf_i>:
 80027bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027c0:	7e0f      	ldrb	r7, [r1, #24]
 80027c2:	4691      	mov	r9, r2
 80027c4:	2f78      	cmp	r7, #120	; 0x78
 80027c6:	4680      	mov	r8, r0
 80027c8:	460c      	mov	r4, r1
 80027ca:	469a      	mov	sl, r3
 80027cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80027ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80027d2:	d807      	bhi.n	80027e4 <_printf_i+0x28>
 80027d4:	2f62      	cmp	r7, #98	; 0x62
 80027d6:	d80a      	bhi.n	80027ee <_printf_i+0x32>
 80027d8:	2f00      	cmp	r7, #0
 80027da:	f000 80d9 	beq.w	8002990 <_printf_i+0x1d4>
 80027de:	2f58      	cmp	r7, #88	; 0x58
 80027e0:	f000 80a4 	beq.w	800292c <_printf_i+0x170>
 80027e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80027ec:	e03a      	b.n	8002864 <_printf_i+0xa8>
 80027ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80027f2:	2b15      	cmp	r3, #21
 80027f4:	d8f6      	bhi.n	80027e4 <_printf_i+0x28>
 80027f6:	a101      	add	r1, pc, #4	; (adr r1, 80027fc <_printf_i+0x40>)
 80027f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80027fc:	08002855 	.word	0x08002855
 8002800:	08002869 	.word	0x08002869
 8002804:	080027e5 	.word	0x080027e5
 8002808:	080027e5 	.word	0x080027e5
 800280c:	080027e5 	.word	0x080027e5
 8002810:	080027e5 	.word	0x080027e5
 8002814:	08002869 	.word	0x08002869
 8002818:	080027e5 	.word	0x080027e5
 800281c:	080027e5 	.word	0x080027e5
 8002820:	080027e5 	.word	0x080027e5
 8002824:	080027e5 	.word	0x080027e5
 8002828:	08002977 	.word	0x08002977
 800282c:	08002899 	.word	0x08002899
 8002830:	08002959 	.word	0x08002959
 8002834:	080027e5 	.word	0x080027e5
 8002838:	080027e5 	.word	0x080027e5
 800283c:	08002999 	.word	0x08002999
 8002840:	080027e5 	.word	0x080027e5
 8002844:	08002899 	.word	0x08002899
 8002848:	080027e5 	.word	0x080027e5
 800284c:	080027e5 	.word	0x080027e5
 8002850:	08002961 	.word	0x08002961
 8002854:	682b      	ldr	r3, [r5, #0]
 8002856:	1d1a      	adds	r2, r3, #4
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	602a      	str	r2, [r5, #0]
 800285c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002860:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002864:	2301      	movs	r3, #1
 8002866:	e0a4      	b.n	80029b2 <_printf_i+0x1f6>
 8002868:	6820      	ldr	r0, [r4, #0]
 800286a:	6829      	ldr	r1, [r5, #0]
 800286c:	0606      	lsls	r6, r0, #24
 800286e:	f101 0304 	add.w	r3, r1, #4
 8002872:	d50a      	bpl.n	800288a <_printf_i+0xce>
 8002874:	680e      	ldr	r6, [r1, #0]
 8002876:	602b      	str	r3, [r5, #0]
 8002878:	2e00      	cmp	r6, #0
 800287a:	da03      	bge.n	8002884 <_printf_i+0xc8>
 800287c:	232d      	movs	r3, #45	; 0x2d
 800287e:	4276      	negs	r6, r6
 8002880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002884:	230a      	movs	r3, #10
 8002886:	485e      	ldr	r0, [pc, #376]	; (8002a00 <_printf_i+0x244>)
 8002888:	e019      	b.n	80028be <_printf_i+0x102>
 800288a:	680e      	ldr	r6, [r1, #0]
 800288c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002890:	602b      	str	r3, [r5, #0]
 8002892:	bf18      	it	ne
 8002894:	b236      	sxthne	r6, r6
 8002896:	e7ef      	b.n	8002878 <_printf_i+0xbc>
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	6820      	ldr	r0, [r4, #0]
 800289c:	1d19      	adds	r1, r3, #4
 800289e:	6029      	str	r1, [r5, #0]
 80028a0:	0601      	lsls	r1, r0, #24
 80028a2:	d501      	bpl.n	80028a8 <_printf_i+0xec>
 80028a4:	681e      	ldr	r6, [r3, #0]
 80028a6:	e002      	b.n	80028ae <_printf_i+0xf2>
 80028a8:	0646      	lsls	r6, r0, #25
 80028aa:	d5fb      	bpl.n	80028a4 <_printf_i+0xe8>
 80028ac:	881e      	ldrh	r6, [r3, #0]
 80028ae:	2f6f      	cmp	r7, #111	; 0x6f
 80028b0:	bf0c      	ite	eq
 80028b2:	2308      	moveq	r3, #8
 80028b4:	230a      	movne	r3, #10
 80028b6:	4852      	ldr	r0, [pc, #328]	; (8002a00 <_printf_i+0x244>)
 80028b8:	2100      	movs	r1, #0
 80028ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80028be:	6865      	ldr	r5, [r4, #4]
 80028c0:	2d00      	cmp	r5, #0
 80028c2:	bfa8      	it	ge
 80028c4:	6821      	ldrge	r1, [r4, #0]
 80028c6:	60a5      	str	r5, [r4, #8]
 80028c8:	bfa4      	itt	ge
 80028ca:	f021 0104 	bicge.w	r1, r1, #4
 80028ce:	6021      	strge	r1, [r4, #0]
 80028d0:	b90e      	cbnz	r6, 80028d6 <_printf_i+0x11a>
 80028d2:	2d00      	cmp	r5, #0
 80028d4:	d04d      	beq.n	8002972 <_printf_i+0x1b6>
 80028d6:	4615      	mov	r5, r2
 80028d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80028dc:	fb03 6711 	mls	r7, r3, r1, r6
 80028e0:	5dc7      	ldrb	r7, [r0, r7]
 80028e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80028e6:	4637      	mov	r7, r6
 80028e8:	42bb      	cmp	r3, r7
 80028ea:	460e      	mov	r6, r1
 80028ec:	d9f4      	bls.n	80028d8 <_printf_i+0x11c>
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d10b      	bne.n	800290a <_printf_i+0x14e>
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	07de      	lsls	r6, r3, #31
 80028f6:	d508      	bpl.n	800290a <_printf_i+0x14e>
 80028f8:	6923      	ldr	r3, [r4, #16]
 80028fa:	6861      	ldr	r1, [r4, #4]
 80028fc:	4299      	cmp	r1, r3
 80028fe:	bfde      	ittt	le
 8002900:	2330      	movle	r3, #48	; 0x30
 8002902:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002906:	f105 35ff 	addle.w	r5, r5, #4294967295
 800290a:	1b52      	subs	r2, r2, r5
 800290c:	6122      	str	r2, [r4, #16]
 800290e:	464b      	mov	r3, r9
 8002910:	4621      	mov	r1, r4
 8002912:	4640      	mov	r0, r8
 8002914:	f8cd a000 	str.w	sl, [sp]
 8002918:	aa03      	add	r2, sp, #12
 800291a:	f7ff fedf 	bl	80026dc <_printf_common>
 800291e:	3001      	adds	r0, #1
 8002920:	d14c      	bne.n	80029bc <_printf_i+0x200>
 8002922:	f04f 30ff 	mov.w	r0, #4294967295
 8002926:	b004      	add	sp, #16
 8002928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800292c:	4834      	ldr	r0, [pc, #208]	; (8002a00 <_printf_i+0x244>)
 800292e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002932:	6829      	ldr	r1, [r5, #0]
 8002934:	6823      	ldr	r3, [r4, #0]
 8002936:	f851 6b04 	ldr.w	r6, [r1], #4
 800293a:	6029      	str	r1, [r5, #0]
 800293c:	061d      	lsls	r5, r3, #24
 800293e:	d514      	bpl.n	800296a <_printf_i+0x1ae>
 8002940:	07df      	lsls	r7, r3, #31
 8002942:	bf44      	itt	mi
 8002944:	f043 0320 	orrmi.w	r3, r3, #32
 8002948:	6023      	strmi	r3, [r4, #0]
 800294a:	b91e      	cbnz	r6, 8002954 <_printf_i+0x198>
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	f023 0320 	bic.w	r3, r3, #32
 8002952:	6023      	str	r3, [r4, #0]
 8002954:	2310      	movs	r3, #16
 8002956:	e7af      	b.n	80028b8 <_printf_i+0xfc>
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	f043 0320 	orr.w	r3, r3, #32
 800295e:	6023      	str	r3, [r4, #0]
 8002960:	2378      	movs	r3, #120	; 0x78
 8002962:	4828      	ldr	r0, [pc, #160]	; (8002a04 <_printf_i+0x248>)
 8002964:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002968:	e7e3      	b.n	8002932 <_printf_i+0x176>
 800296a:	0659      	lsls	r1, r3, #25
 800296c:	bf48      	it	mi
 800296e:	b2b6      	uxthmi	r6, r6
 8002970:	e7e6      	b.n	8002940 <_printf_i+0x184>
 8002972:	4615      	mov	r5, r2
 8002974:	e7bb      	b.n	80028ee <_printf_i+0x132>
 8002976:	682b      	ldr	r3, [r5, #0]
 8002978:	6826      	ldr	r6, [r4, #0]
 800297a:	1d18      	adds	r0, r3, #4
 800297c:	6961      	ldr	r1, [r4, #20]
 800297e:	6028      	str	r0, [r5, #0]
 8002980:	0635      	lsls	r5, r6, #24
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	d501      	bpl.n	800298a <_printf_i+0x1ce>
 8002986:	6019      	str	r1, [r3, #0]
 8002988:	e002      	b.n	8002990 <_printf_i+0x1d4>
 800298a:	0670      	lsls	r0, r6, #25
 800298c:	d5fb      	bpl.n	8002986 <_printf_i+0x1ca>
 800298e:	8019      	strh	r1, [r3, #0]
 8002990:	2300      	movs	r3, #0
 8002992:	4615      	mov	r5, r2
 8002994:	6123      	str	r3, [r4, #16]
 8002996:	e7ba      	b.n	800290e <_printf_i+0x152>
 8002998:	682b      	ldr	r3, [r5, #0]
 800299a:	2100      	movs	r1, #0
 800299c:	1d1a      	adds	r2, r3, #4
 800299e:	602a      	str	r2, [r5, #0]
 80029a0:	681d      	ldr	r5, [r3, #0]
 80029a2:	6862      	ldr	r2, [r4, #4]
 80029a4:	4628      	mov	r0, r5
 80029a6:	f000 f82f 	bl	8002a08 <memchr>
 80029aa:	b108      	cbz	r0, 80029b0 <_printf_i+0x1f4>
 80029ac:	1b40      	subs	r0, r0, r5
 80029ae:	6060      	str	r0, [r4, #4]
 80029b0:	6863      	ldr	r3, [r4, #4]
 80029b2:	6123      	str	r3, [r4, #16]
 80029b4:	2300      	movs	r3, #0
 80029b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029ba:	e7a8      	b.n	800290e <_printf_i+0x152>
 80029bc:	462a      	mov	r2, r5
 80029be:	4649      	mov	r1, r9
 80029c0:	4640      	mov	r0, r8
 80029c2:	6923      	ldr	r3, [r4, #16]
 80029c4:	47d0      	blx	sl
 80029c6:	3001      	adds	r0, #1
 80029c8:	d0ab      	beq.n	8002922 <_printf_i+0x166>
 80029ca:	6823      	ldr	r3, [r4, #0]
 80029cc:	079b      	lsls	r3, r3, #30
 80029ce:	d413      	bmi.n	80029f8 <_printf_i+0x23c>
 80029d0:	68e0      	ldr	r0, [r4, #12]
 80029d2:	9b03      	ldr	r3, [sp, #12]
 80029d4:	4298      	cmp	r0, r3
 80029d6:	bfb8      	it	lt
 80029d8:	4618      	movlt	r0, r3
 80029da:	e7a4      	b.n	8002926 <_printf_i+0x16a>
 80029dc:	2301      	movs	r3, #1
 80029de:	4632      	mov	r2, r6
 80029e0:	4649      	mov	r1, r9
 80029e2:	4640      	mov	r0, r8
 80029e4:	47d0      	blx	sl
 80029e6:	3001      	adds	r0, #1
 80029e8:	d09b      	beq.n	8002922 <_printf_i+0x166>
 80029ea:	3501      	adds	r5, #1
 80029ec:	68e3      	ldr	r3, [r4, #12]
 80029ee:	9903      	ldr	r1, [sp, #12]
 80029f0:	1a5b      	subs	r3, r3, r1
 80029f2:	42ab      	cmp	r3, r5
 80029f4:	dcf2      	bgt.n	80029dc <_printf_i+0x220>
 80029f6:	e7eb      	b.n	80029d0 <_printf_i+0x214>
 80029f8:	2500      	movs	r5, #0
 80029fa:	f104 0619 	add.w	r6, r4, #25
 80029fe:	e7f5      	b.n	80029ec <_printf_i+0x230>
 8002a00:	08002d47 	.word	0x08002d47
 8002a04:	08002d58 	.word	0x08002d58

08002a08 <memchr>:
 8002a08:	4603      	mov	r3, r0
 8002a0a:	b510      	push	{r4, lr}
 8002a0c:	b2c9      	uxtb	r1, r1
 8002a0e:	4402      	add	r2, r0
 8002a10:	4293      	cmp	r3, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	d101      	bne.n	8002a1a <memchr+0x12>
 8002a16:	2000      	movs	r0, #0
 8002a18:	e003      	b.n	8002a22 <memchr+0x1a>
 8002a1a:	7804      	ldrb	r4, [r0, #0]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	428c      	cmp	r4, r1
 8002a20:	d1f6      	bne.n	8002a10 <memchr+0x8>
 8002a22:	bd10      	pop	{r4, pc}

08002a24 <memcpy>:
 8002a24:	440a      	add	r2, r1
 8002a26:	4291      	cmp	r1, r2
 8002a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a2c:	d100      	bne.n	8002a30 <memcpy+0xc>
 8002a2e:	4770      	bx	lr
 8002a30:	b510      	push	{r4, lr}
 8002a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a36:	4291      	cmp	r1, r2
 8002a38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a3c:	d1f9      	bne.n	8002a32 <memcpy+0xe>
 8002a3e:	bd10      	pop	{r4, pc}

08002a40 <memmove>:
 8002a40:	4288      	cmp	r0, r1
 8002a42:	b510      	push	{r4, lr}
 8002a44:	eb01 0402 	add.w	r4, r1, r2
 8002a48:	d902      	bls.n	8002a50 <memmove+0x10>
 8002a4a:	4284      	cmp	r4, r0
 8002a4c:	4623      	mov	r3, r4
 8002a4e:	d807      	bhi.n	8002a60 <memmove+0x20>
 8002a50:	1e43      	subs	r3, r0, #1
 8002a52:	42a1      	cmp	r1, r4
 8002a54:	d008      	beq.n	8002a68 <memmove+0x28>
 8002a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a5e:	e7f8      	b.n	8002a52 <memmove+0x12>
 8002a60:	4601      	mov	r1, r0
 8002a62:	4402      	add	r2, r0
 8002a64:	428a      	cmp	r2, r1
 8002a66:	d100      	bne.n	8002a6a <memmove+0x2a>
 8002a68:	bd10      	pop	{r4, pc}
 8002a6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a72:	e7f7      	b.n	8002a64 <memmove+0x24>

08002a74 <_free_r>:
 8002a74:	b538      	push	{r3, r4, r5, lr}
 8002a76:	4605      	mov	r5, r0
 8002a78:	2900      	cmp	r1, #0
 8002a7a:	d040      	beq.n	8002afe <_free_r+0x8a>
 8002a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a80:	1f0c      	subs	r4, r1, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	bfb8      	it	lt
 8002a86:	18e4      	addlt	r4, r4, r3
 8002a88:	f000 f910 	bl	8002cac <__malloc_lock>
 8002a8c:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <_free_r+0x8c>)
 8002a8e:	6813      	ldr	r3, [r2, #0]
 8002a90:	b933      	cbnz	r3, 8002aa0 <_free_r+0x2c>
 8002a92:	6063      	str	r3, [r4, #4]
 8002a94:	6014      	str	r4, [r2, #0]
 8002a96:	4628      	mov	r0, r5
 8002a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a9c:	f000 b90c 	b.w	8002cb8 <__malloc_unlock>
 8002aa0:	42a3      	cmp	r3, r4
 8002aa2:	d908      	bls.n	8002ab6 <_free_r+0x42>
 8002aa4:	6820      	ldr	r0, [r4, #0]
 8002aa6:	1821      	adds	r1, r4, r0
 8002aa8:	428b      	cmp	r3, r1
 8002aaa:	bf01      	itttt	eq
 8002aac:	6819      	ldreq	r1, [r3, #0]
 8002aae:	685b      	ldreq	r3, [r3, #4]
 8002ab0:	1809      	addeq	r1, r1, r0
 8002ab2:	6021      	streq	r1, [r4, #0]
 8002ab4:	e7ed      	b.n	8002a92 <_free_r+0x1e>
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	b10b      	cbz	r3, 8002ac0 <_free_r+0x4c>
 8002abc:	42a3      	cmp	r3, r4
 8002abe:	d9fa      	bls.n	8002ab6 <_free_r+0x42>
 8002ac0:	6811      	ldr	r1, [r2, #0]
 8002ac2:	1850      	adds	r0, r2, r1
 8002ac4:	42a0      	cmp	r0, r4
 8002ac6:	d10b      	bne.n	8002ae0 <_free_r+0x6c>
 8002ac8:	6820      	ldr	r0, [r4, #0]
 8002aca:	4401      	add	r1, r0
 8002acc:	1850      	adds	r0, r2, r1
 8002ace:	4283      	cmp	r3, r0
 8002ad0:	6011      	str	r1, [r2, #0]
 8002ad2:	d1e0      	bne.n	8002a96 <_free_r+0x22>
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4401      	add	r1, r0
 8002ada:	6011      	str	r1, [r2, #0]
 8002adc:	6053      	str	r3, [r2, #4]
 8002ade:	e7da      	b.n	8002a96 <_free_r+0x22>
 8002ae0:	d902      	bls.n	8002ae8 <_free_r+0x74>
 8002ae2:	230c      	movs	r3, #12
 8002ae4:	602b      	str	r3, [r5, #0]
 8002ae6:	e7d6      	b.n	8002a96 <_free_r+0x22>
 8002ae8:	6820      	ldr	r0, [r4, #0]
 8002aea:	1821      	adds	r1, r4, r0
 8002aec:	428b      	cmp	r3, r1
 8002aee:	bf01      	itttt	eq
 8002af0:	6819      	ldreq	r1, [r3, #0]
 8002af2:	685b      	ldreq	r3, [r3, #4]
 8002af4:	1809      	addeq	r1, r1, r0
 8002af6:	6021      	streq	r1, [r4, #0]
 8002af8:	6063      	str	r3, [r4, #4]
 8002afa:	6054      	str	r4, [r2, #4]
 8002afc:	e7cb      	b.n	8002a96 <_free_r+0x22>
 8002afe:	bd38      	pop	{r3, r4, r5, pc}
 8002b00:	2000011c 	.word	0x2000011c

08002b04 <sbrk_aligned>:
 8002b04:	b570      	push	{r4, r5, r6, lr}
 8002b06:	4e0e      	ldr	r6, [pc, #56]	; (8002b40 <sbrk_aligned+0x3c>)
 8002b08:	460c      	mov	r4, r1
 8002b0a:	6831      	ldr	r1, [r6, #0]
 8002b0c:	4605      	mov	r5, r0
 8002b0e:	b911      	cbnz	r1, 8002b16 <sbrk_aligned+0x12>
 8002b10:	f000 f8bc 	bl	8002c8c <_sbrk_r>
 8002b14:	6030      	str	r0, [r6, #0]
 8002b16:	4621      	mov	r1, r4
 8002b18:	4628      	mov	r0, r5
 8002b1a:	f000 f8b7 	bl	8002c8c <_sbrk_r>
 8002b1e:	1c43      	adds	r3, r0, #1
 8002b20:	d00a      	beq.n	8002b38 <sbrk_aligned+0x34>
 8002b22:	1cc4      	adds	r4, r0, #3
 8002b24:	f024 0403 	bic.w	r4, r4, #3
 8002b28:	42a0      	cmp	r0, r4
 8002b2a:	d007      	beq.n	8002b3c <sbrk_aligned+0x38>
 8002b2c:	1a21      	subs	r1, r4, r0
 8002b2e:	4628      	mov	r0, r5
 8002b30:	f000 f8ac 	bl	8002c8c <_sbrk_r>
 8002b34:	3001      	adds	r0, #1
 8002b36:	d101      	bne.n	8002b3c <sbrk_aligned+0x38>
 8002b38:	f04f 34ff 	mov.w	r4, #4294967295
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	bd70      	pop	{r4, r5, r6, pc}
 8002b40:	20000120 	.word	0x20000120

08002b44 <_malloc_r>:
 8002b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b48:	1ccd      	adds	r5, r1, #3
 8002b4a:	f025 0503 	bic.w	r5, r5, #3
 8002b4e:	3508      	adds	r5, #8
 8002b50:	2d0c      	cmp	r5, #12
 8002b52:	bf38      	it	cc
 8002b54:	250c      	movcc	r5, #12
 8002b56:	2d00      	cmp	r5, #0
 8002b58:	4607      	mov	r7, r0
 8002b5a:	db01      	blt.n	8002b60 <_malloc_r+0x1c>
 8002b5c:	42a9      	cmp	r1, r5
 8002b5e:	d905      	bls.n	8002b6c <_malloc_r+0x28>
 8002b60:	230c      	movs	r3, #12
 8002b62:	2600      	movs	r6, #0
 8002b64:	603b      	str	r3, [r7, #0]
 8002b66:	4630      	mov	r0, r6
 8002b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b6c:	4e2e      	ldr	r6, [pc, #184]	; (8002c28 <_malloc_r+0xe4>)
 8002b6e:	f000 f89d 	bl	8002cac <__malloc_lock>
 8002b72:	6833      	ldr	r3, [r6, #0]
 8002b74:	461c      	mov	r4, r3
 8002b76:	bb34      	cbnz	r4, 8002bc6 <_malloc_r+0x82>
 8002b78:	4629      	mov	r1, r5
 8002b7a:	4638      	mov	r0, r7
 8002b7c:	f7ff ffc2 	bl	8002b04 <sbrk_aligned>
 8002b80:	1c43      	adds	r3, r0, #1
 8002b82:	4604      	mov	r4, r0
 8002b84:	d14d      	bne.n	8002c22 <_malloc_r+0xde>
 8002b86:	6834      	ldr	r4, [r6, #0]
 8002b88:	4626      	mov	r6, r4
 8002b8a:	2e00      	cmp	r6, #0
 8002b8c:	d140      	bne.n	8002c10 <_malloc_r+0xcc>
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	4631      	mov	r1, r6
 8002b92:	4638      	mov	r0, r7
 8002b94:	eb04 0803 	add.w	r8, r4, r3
 8002b98:	f000 f878 	bl	8002c8c <_sbrk_r>
 8002b9c:	4580      	cmp	r8, r0
 8002b9e:	d13a      	bne.n	8002c16 <_malloc_r+0xd2>
 8002ba0:	6821      	ldr	r1, [r4, #0]
 8002ba2:	3503      	adds	r5, #3
 8002ba4:	1a6d      	subs	r5, r5, r1
 8002ba6:	f025 0503 	bic.w	r5, r5, #3
 8002baa:	3508      	adds	r5, #8
 8002bac:	2d0c      	cmp	r5, #12
 8002bae:	bf38      	it	cc
 8002bb0:	250c      	movcc	r5, #12
 8002bb2:	4638      	mov	r0, r7
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	f7ff ffa5 	bl	8002b04 <sbrk_aligned>
 8002bba:	3001      	adds	r0, #1
 8002bbc:	d02b      	beq.n	8002c16 <_malloc_r+0xd2>
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	442b      	add	r3, r5
 8002bc2:	6023      	str	r3, [r4, #0]
 8002bc4:	e00e      	b.n	8002be4 <_malloc_r+0xa0>
 8002bc6:	6822      	ldr	r2, [r4, #0]
 8002bc8:	1b52      	subs	r2, r2, r5
 8002bca:	d41e      	bmi.n	8002c0a <_malloc_r+0xc6>
 8002bcc:	2a0b      	cmp	r2, #11
 8002bce:	d916      	bls.n	8002bfe <_malloc_r+0xba>
 8002bd0:	1961      	adds	r1, r4, r5
 8002bd2:	42a3      	cmp	r3, r4
 8002bd4:	6025      	str	r5, [r4, #0]
 8002bd6:	bf18      	it	ne
 8002bd8:	6059      	strne	r1, [r3, #4]
 8002bda:	6863      	ldr	r3, [r4, #4]
 8002bdc:	bf08      	it	eq
 8002bde:	6031      	streq	r1, [r6, #0]
 8002be0:	5162      	str	r2, [r4, r5]
 8002be2:	604b      	str	r3, [r1, #4]
 8002be4:	4638      	mov	r0, r7
 8002be6:	f104 060b 	add.w	r6, r4, #11
 8002bea:	f000 f865 	bl	8002cb8 <__malloc_unlock>
 8002bee:	f026 0607 	bic.w	r6, r6, #7
 8002bf2:	1d23      	adds	r3, r4, #4
 8002bf4:	1af2      	subs	r2, r6, r3
 8002bf6:	d0b6      	beq.n	8002b66 <_malloc_r+0x22>
 8002bf8:	1b9b      	subs	r3, r3, r6
 8002bfa:	50a3      	str	r3, [r4, r2]
 8002bfc:	e7b3      	b.n	8002b66 <_malloc_r+0x22>
 8002bfe:	6862      	ldr	r2, [r4, #4]
 8002c00:	42a3      	cmp	r3, r4
 8002c02:	bf0c      	ite	eq
 8002c04:	6032      	streq	r2, [r6, #0]
 8002c06:	605a      	strne	r2, [r3, #4]
 8002c08:	e7ec      	b.n	8002be4 <_malloc_r+0xa0>
 8002c0a:	4623      	mov	r3, r4
 8002c0c:	6864      	ldr	r4, [r4, #4]
 8002c0e:	e7b2      	b.n	8002b76 <_malloc_r+0x32>
 8002c10:	4634      	mov	r4, r6
 8002c12:	6876      	ldr	r6, [r6, #4]
 8002c14:	e7b9      	b.n	8002b8a <_malloc_r+0x46>
 8002c16:	230c      	movs	r3, #12
 8002c18:	4638      	mov	r0, r7
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	f000 f84c 	bl	8002cb8 <__malloc_unlock>
 8002c20:	e7a1      	b.n	8002b66 <_malloc_r+0x22>
 8002c22:	6025      	str	r5, [r4, #0]
 8002c24:	e7de      	b.n	8002be4 <_malloc_r+0xa0>
 8002c26:	bf00      	nop
 8002c28:	2000011c 	.word	0x2000011c

08002c2c <_realloc_r>:
 8002c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c30:	4680      	mov	r8, r0
 8002c32:	4614      	mov	r4, r2
 8002c34:	460e      	mov	r6, r1
 8002c36:	b921      	cbnz	r1, 8002c42 <_realloc_r+0x16>
 8002c38:	4611      	mov	r1, r2
 8002c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c3e:	f7ff bf81 	b.w	8002b44 <_malloc_r>
 8002c42:	b92a      	cbnz	r2, 8002c50 <_realloc_r+0x24>
 8002c44:	f7ff ff16 	bl	8002a74 <_free_r>
 8002c48:	4625      	mov	r5, r4
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c50:	f000 f838 	bl	8002cc4 <_malloc_usable_size_r>
 8002c54:	4284      	cmp	r4, r0
 8002c56:	4607      	mov	r7, r0
 8002c58:	d802      	bhi.n	8002c60 <_realloc_r+0x34>
 8002c5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002c5e:	d812      	bhi.n	8002c86 <_realloc_r+0x5a>
 8002c60:	4621      	mov	r1, r4
 8002c62:	4640      	mov	r0, r8
 8002c64:	f7ff ff6e 	bl	8002b44 <_malloc_r>
 8002c68:	4605      	mov	r5, r0
 8002c6a:	2800      	cmp	r0, #0
 8002c6c:	d0ed      	beq.n	8002c4a <_realloc_r+0x1e>
 8002c6e:	42bc      	cmp	r4, r7
 8002c70:	4622      	mov	r2, r4
 8002c72:	4631      	mov	r1, r6
 8002c74:	bf28      	it	cs
 8002c76:	463a      	movcs	r2, r7
 8002c78:	f7ff fed4 	bl	8002a24 <memcpy>
 8002c7c:	4631      	mov	r1, r6
 8002c7e:	4640      	mov	r0, r8
 8002c80:	f7ff fef8 	bl	8002a74 <_free_r>
 8002c84:	e7e1      	b.n	8002c4a <_realloc_r+0x1e>
 8002c86:	4635      	mov	r5, r6
 8002c88:	e7df      	b.n	8002c4a <_realloc_r+0x1e>
	...

08002c8c <_sbrk_r>:
 8002c8c:	b538      	push	{r3, r4, r5, lr}
 8002c8e:	2300      	movs	r3, #0
 8002c90:	4d05      	ldr	r5, [pc, #20]	; (8002ca8 <_sbrk_r+0x1c>)
 8002c92:	4604      	mov	r4, r0
 8002c94:	4608      	mov	r0, r1
 8002c96:	602b      	str	r3, [r5, #0]
 8002c98:	f7fd fc6e 	bl	8000578 <_sbrk>
 8002c9c:	1c43      	adds	r3, r0, #1
 8002c9e:	d102      	bne.n	8002ca6 <_sbrk_r+0x1a>
 8002ca0:	682b      	ldr	r3, [r5, #0]
 8002ca2:	b103      	cbz	r3, 8002ca6 <_sbrk_r+0x1a>
 8002ca4:	6023      	str	r3, [r4, #0]
 8002ca6:	bd38      	pop	{r3, r4, r5, pc}
 8002ca8:	20000124 	.word	0x20000124

08002cac <__malloc_lock>:
 8002cac:	4801      	ldr	r0, [pc, #4]	; (8002cb4 <__malloc_lock+0x8>)
 8002cae:	f000 b811 	b.w	8002cd4 <__retarget_lock_acquire_recursive>
 8002cb2:	bf00      	nop
 8002cb4:	20000128 	.word	0x20000128

08002cb8 <__malloc_unlock>:
 8002cb8:	4801      	ldr	r0, [pc, #4]	; (8002cc0 <__malloc_unlock+0x8>)
 8002cba:	f000 b80c 	b.w	8002cd6 <__retarget_lock_release_recursive>
 8002cbe:	bf00      	nop
 8002cc0:	20000128 	.word	0x20000128

08002cc4 <_malloc_usable_size_r>:
 8002cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cc8:	1f18      	subs	r0, r3, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bfbc      	itt	lt
 8002cce:	580b      	ldrlt	r3, [r1, r0]
 8002cd0:	18c0      	addlt	r0, r0, r3
 8002cd2:	4770      	bx	lr

08002cd4 <__retarget_lock_acquire_recursive>:
 8002cd4:	4770      	bx	lr

08002cd6 <__retarget_lock_release_recursive>:
 8002cd6:	4770      	bx	lr

08002cd8 <_init>:
 8002cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cda:	bf00      	nop
 8002cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cde:	bc08      	pop	{r3}
 8002ce0:	469e      	mov	lr, r3
 8002ce2:	4770      	bx	lr

08002ce4 <_fini>:
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce6:	bf00      	nop
 8002ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cea:	bc08      	pop	{r3}
 8002cec:	469e      	mov	lr, r3
 8002cee:	4770      	bx	lr
