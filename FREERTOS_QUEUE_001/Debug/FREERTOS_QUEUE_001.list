
FREERTOS_QUEUE_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005630  08005630  00006630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005684  08005684  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005684  08005684  00006684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800568c  0800568c  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800568c  0800568c  0000668c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005690  08005690  00006690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005694  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          000041f0  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004250  20004250  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015543  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000309c  00000000  00000000  0001c5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  0001f670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e0e  00000000  00000000  00020880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022de5  00000000  00000000  0002168e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014d56  00000000  00000000  00044473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d42fd  00000000  00000000  000591c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012d4c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e6c  00000000  00000000  0012d50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00132378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005618 	.word	0x08005618

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005618 	.word	0x08005618

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000007c 	.word	0x2000007c
 80004f0:	2000011c 	.word	0x2000011c

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b08e      	sub	sp, #56	@ 0x38
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fafd 	bl	8000af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f83f 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8c5 	bl	8000690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000506:	f000 f899 	bl	800063c <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 800050a:	2300      	movs	r3, #0
 800050c:	633b      	str	r3, [r7, #48]	@ 0x30
 800050e:	2300      	movs	r3, #0
 8000510:	637b      	str	r3, [r7, #52]	@ 0x34
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000512:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000516:	2101      	movs	r1, #1
 8000518:	4618      	mov	r0, r3
 800051a:	f002 fd36 	bl	8002f8a <osSemaphoreCreate>
 800051e:	4603      	mov	r3, r0
 8000520:	4a12      	ldr	r2, [pc, #72]	@ (800056c <main+0x78>)
 8000522:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 5, uint8_t);
 8000524:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <main+0x7c>)
 8000526:	f107 0420 	add.w	r4, r7, #32
 800052a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800052c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000530:	f107 0320 	add.w	r3, r7, #32
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f002 fd59 	bl	8002fee <osMessageCreate>
 800053c:	4603      	mov	r3, r0
 800053e:	4a0d      	ldr	r2, [pc, #52]	@ (8000574 <main+0x80>)
 8000540:	6013      	str	r3, [r2, #0]
  /* definition and creation of Task1 */
//  osThreadDef(Task1, StartTask1, osPriorityNormal, 0, 128);
//  Task1Handle = osThreadCreate(osThread(Task1), NULL);

  /* definition and creation of Task2 */
  osThreadDef(Task2, StartTask2, osPriorityNormal, 0, 128);
 8000542:	4b0d      	ldr	r3, [pc, #52]	@ (8000578 <main+0x84>)
 8000544:	1d3c      	adds	r4, r7, #4
 8000546:	461d      	mov	r5, r3
 8000548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000550:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f002 fcca 	bl	8002ef2 <osThreadCreate>
 800055e:	4603      	mov	r3, r0
 8000560:	4a06      	ldr	r2, [pc, #24]	@ (800057c <main+0x88>)
 8000562:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000564:	f002 fcbe 	bl	8002ee4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <main+0x74>
 800056c:	2000036c 	.word	0x2000036c
 8000570:	08005630 	.word	0x08005630
 8000574:	20000368 	.word	0x20000368
 8000578:	08005648 	.word	0x08005648
 800057c:	20000364 	.word	0x20000364

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	@ 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	@ 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f004 ff5a 	bl	8005448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <SystemClock_Config+0xb4>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	4a21      	ldr	r2, [pc, #132]	@ (8000634 <SystemClock_Config+0xb4>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <SystemClock_Config+0xb4>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <SystemClock_Config+0xb8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000638 <SystemClock_Config+0xb8>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <SystemClock_Config+0xb8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fe1f 	bl	8001234 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005fc:	f000 f90c 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f001 f882 	bl	8001724 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000626:	f000 f8f7 	bl	8000818 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	@ 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000640:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <MX_USART2_UART_Init+0x4c>)
 8000642:	4a12      	ldr	r2, [pc, #72]	@ (800068c <MX_USART2_UART_Init+0x50>)
 8000644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000646:	4b10      	ldr	r3, [pc, #64]	@ (8000688 <MX_USART2_UART_Init+0x4c>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <MX_USART2_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <MX_USART2_UART_Init+0x4c>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <MX_USART2_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <MX_USART2_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	@ (8000688 <MX_USART2_UART_Init+0x4c>)
 8000674:	f001 fd0a 	bl	800208c <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800067e:	f000 f8cb 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000031c 	.word	0x2000031c
 800068c:	40004400 	.word	0x40004400

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000758 <MX_GPIO_Init+0xc8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a2a      	ldr	r2, [pc, #168]	@ (8000758 <MX_GPIO_Init+0xc8>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b28      	ldr	r3, [pc, #160]	@ (8000758 <MX_GPIO_Init+0xc8>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b24      	ldr	r3, [pc, #144]	@ (8000758 <MX_GPIO_Init+0xc8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a23      	ldr	r2, [pc, #140]	@ (8000758 <MX_GPIO_Init+0xc8>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <MX_GPIO_Init+0xc8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <MX_GPIO_Init+0xc8>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000758 <MX_GPIO_Init+0xc8>)
 80006e8:	f043 0308 	orr.w	r3, r3, #8
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000758 <MX_GPIO_Init+0xc8>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000700:	4816      	ldr	r0, [pc, #88]	@ (800075c <MX_GPIO_Init+0xcc>)
 8000702:	f000 fd4b 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000706:	2301      	movs	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800070a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800070e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4619      	mov	r1, r3
 800071a:	4811      	ldr	r0, [pc, #68]	@ (8000760 <MX_GPIO_Init+0xd0>)
 800071c:	f000 fba2 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000720:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4619      	mov	r1, r3
 8000738:	4808      	ldr	r0, [pc, #32]	@ (800075c <MX_GPIO_Init+0xcc>)
 800073a:	f000 fb93 	bl	8000e64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2105      	movs	r1, #5
 8000742:	2006      	movs	r0, #6
 8000744:	f000 fad2 	bl	8000cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000748:	2006      	movs	r0, #6
 800074a:	f000 faeb 	bl	8000d24 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074e:	bf00      	nop
 8000750:	3720      	adds	r7, #32
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40020c00 	.word	0x40020c00
 8000760:	40020000 	.word	0x40020000

08000764 <HAL_GPIO_EXTI_Callback>:
	}
}
*/
// Interrupt Service Routine Number 1
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	80fb      	strh	r3, [r7, #6]


	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]

	// Assuming xSemaphore is your semaphore handle
	xSemaphoreGiveFromISR(myBinarySem01Handle, &xHigherPriorityTaskWoken);
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f107 020c 	add.w	r2, r7, #12
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f002 ff57 	bl	8003630 <xQueueGiveFromISR>

	// If xHigherPriorityTaskWoken was set to true, a context switch should be requested
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d007      	beq.n	8000798 <HAL_GPIO_EXTI_Callback+0x34>
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <HAL_GPIO_EXTI_Callback+0x40>)
 800078a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	f3bf 8f4f 	dsb	sy
 8000794:	f3bf 8f6f 	isb	sy
}
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000036c 	.word	0x2000036c
 80007a4:	e000ed04 	.word	0xe000ed04

080007a8 <HAL_UART_RxCpltCallback>:

// Interrupt Service Routine Number 2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
//		}
//
//		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
//	}

}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void const * argument)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
////  /* Infinite loop */
//	int i = 222;
	uint32_t TickDelay = pdMS_TO_TICKS(1);
 80007c4:	2301      	movs	r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
	//		if(xQueueSend(queueHandle,(void *)&i,portMAX_DELAY) == pdPASS)
	//		{
	//			// char *ptx2 = "Data is sent successfully by task 2.\nLeaving task 2.\n\n\n";
	//			// HAL_UART_Transmit(&huart2, (uint8_t *)ptx2,55 , 500);
	//		}
		if(xSemaphoreTake(myBinarySem01Handle,0) == pdTRUE)
 80007c8:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <StartTask2+0x30>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 ffbe 	bl	8003750 <xQueueSemaphoreTake>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d104      	bne.n	80007e4 <StartTask2+0x28>
		{
			HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 80007da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007de:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <StartTask2+0x34>)
 80007e0:	f000 fcf5 	bl	80011ce <HAL_GPIO_TogglePin>
		}
		// xQueueSend(myQueue01Handle,(void *)&i,portMAX_DELAY);
		vTaskDelay(TickDelay);
 80007e4:	68f8      	ldr	r0, [r7, #12]
 80007e6:	f003 fb75 	bl	8003ed4 <vTaskDelay>
		if(xSemaphoreTake(myBinarySem01Handle,0) == pdTRUE)
 80007ea:	e7ed      	b.n	80007c8 <StartTask2+0xc>
 80007ec:	2000036c 	.word	0x2000036c
 80007f0:	40020c00 	.word	0x40020c00

080007f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d101      	bne.n	800080a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000806:	f000 f999 	bl	8000b3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40001000 	.word	0x40001000

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <Error_Handler+0x8>

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <HAL_MspInit+0x54>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000832:	4a11      	ldr	r2, [pc, #68]	@ (8000878 <HAL_MspInit+0x54>)
 8000834:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000838:	6453      	str	r3, [r2, #68]	@ 0x44
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <HAL_MspInit+0x54>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <HAL_MspInit+0x54>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <HAL_MspInit+0x54>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000854:	6413      	str	r3, [r2, #64]	@ 0x40
 8000856:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <HAL_MspInit+0x54>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	210f      	movs	r1, #15
 8000866:	f06f 0001 	mvn.w	r0, #1
 800086a:	f000 fa3f 	bl	8000cec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	@ 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a1d      	ldr	r2, [pc, #116]	@ (8000910 <HAL_UART_MspInit+0x94>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d133      	bne.n	8000906 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000914 <HAL_UART_MspInit+0x98>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	4a1b      	ldr	r2, [pc, #108]	@ (8000914 <HAL_UART_MspInit+0x98>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ae:	4b19      	ldr	r3, [pc, #100]	@ (8000914 <HAL_UART_MspInit+0x98>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <HAL_UART_MspInit+0x98>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a14      	ldr	r2, [pc, #80]	@ (8000914 <HAL_UART_MspInit+0x98>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <HAL_UART_MspInit+0x98>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008d6:	230c      	movs	r3, #12
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e6:	2307      	movs	r3, #7
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	4809      	ldr	r0, [pc, #36]	@ (8000918 <HAL_UART_MspInit+0x9c>)
 80008f2:	f000 fab7 	bl	8000e64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2105      	movs	r1, #5
 80008fa:	2026      	movs	r0, #38	@ 0x26
 80008fc:	f000 f9f6 	bl	8000cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000900:	2026      	movs	r0, #38	@ 0x26
 8000902:	f000 fa0f 	bl	8000d24 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	@ 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40004400 	.word	0x40004400
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000

0800091c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08e      	sub	sp, #56	@ 0x38
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	4b33      	ldr	r3, [pc, #204]	@ (8000a00 <HAL_InitTick+0xe4>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000934:	4a32      	ldr	r2, [pc, #200]	@ (8000a00 <HAL_InitTick+0xe4>)
 8000936:	f043 0310 	orr.w	r3, r3, #16
 800093a:	6413      	str	r3, [r2, #64]	@ 0x40
 800093c:	4b30      	ldr	r3, [pc, #192]	@ (8000a00 <HAL_InitTick+0xe4>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000940:	f003 0310 	and.w	r3, r3, #16
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000948:	f107 0210 	add.w	r2, r7, #16
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f001 f8c6 	bl	8001ae4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000958:	6a3b      	ldr	r3, [r7, #32]
 800095a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800095c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800095e:	2b00      	cmp	r3, #0
 8000960:	d103      	bne.n	800096a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000962:	f001 f897 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 8000966:	6378      	str	r0, [r7, #52]	@ 0x34
 8000968:	e004      	b.n	8000974 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800096a:	f001 f893 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 800096e:	4603      	mov	r3, r0
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000976:	4a23      	ldr	r2, [pc, #140]	@ (8000a04 <HAL_InitTick+0xe8>)
 8000978:	fba2 2303 	umull	r2, r3, r2, r3
 800097c:	0c9b      	lsrs	r3, r3, #18
 800097e:	3b01      	subs	r3, #1
 8000980:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000982:	4b21      	ldr	r3, [pc, #132]	@ (8000a08 <HAL_InitTick+0xec>)
 8000984:	4a21      	ldr	r2, [pc, #132]	@ (8000a0c <HAL_InitTick+0xf0>)
 8000986:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000988:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <HAL_InitTick+0xec>)
 800098a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800098e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000990:	4a1d      	ldr	r2, [pc, #116]	@ (8000a08 <HAL_InitTick+0xec>)
 8000992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000994:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000996:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <HAL_InitTick+0xec>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <HAL_InitTick+0xec>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a2:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <HAL_InitTick+0xec>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009a8:	4817      	ldr	r0, [pc, #92]	@ (8000a08 <HAL_InitTick+0xec>)
 80009aa:	f001 f8cd 	bl	8001b48 <HAL_TIM_Base_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d11b      	bne.n	80009f4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009bc:	4812      	ldr	r0, [pc, #72]	@ (8000a08 <HAL_InitTick+0xec>)
 80009be:	f001 f91d 	bl	8001bfc <HAL_TIM_Base_Start_IT>
 80009c2:	4603      	mov	r3, r0
 80009c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d111      	bne.n	80009f4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009d0:	2036      	movs	r0, #54	@ 0x36
 80009d2:	f000 f9a7 	bl	8000d24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d808      	bhi.n	80009ee <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	2036      	movs	r0, #54	@ 0x36
 80009e2:	f000 f983 	bl	8000cec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <HAL_InitTick+0xf4>)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	e002      	b.n	80009f4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3738      	adds	r7, #56	@ 0x38
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800
 8000a04:	431bde83 	.word	0x431bde83
 8000a08:	20000370 	.word	0x20000370
 8000a0c:	40001000 	.word	0x40001000
 8000a10:	20000004 	.word	0x20000004

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <NMI_Handler+0x4>

08000a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f000 fbd8 	bl	8001204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a5c:	4802      	ldr	r0, [pc, #8]	@ (8000a68 <USART2_IRQHandler+0x10>)
 8000a5e:	f001 fb65 	bl	800212c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000031c 	.word	0x2000031c

08000a6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a70:	4802      	ldr	r0, [pc, #8]	@ (8000a7c <TIM6_DAC_IRQHandler+0x10>)
 8000a72:	f001 f933 	bl	8001cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000370 	.word	0x20000370

08000a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000adc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000aa8:	f7ff ffea 	bl	8000a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aac:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aae:	490d      	ldr	r1, [pc, #52]	@ (8000ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8000af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f004 fd17 	bl	8005504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad6:	f7ff fd0d 	bl	80004f4 <main>
  bx  lr    
 8000ada:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000adc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ae8:	08005694 	.word	0x08005694
  ldr r2, =_sbss
 8000aec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000af0:	20004250 	.word	0x20004250

08000af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000afc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0d      	ldr	r2, [pc, #52]	@ (8000b38 <HAL_Init+0x40>)
 8000b02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b08:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <HAL_Init+0x40>)
 8000b0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <HAL_Init+0x40>)
 8000b1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 f8d8 	bl	8000cd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b26:	200f      	movs	r0, #15
 8000b28:	f7ff fef8 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2c:	f7ff fe7a 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023c00 	.word	0x40023c00

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_IncTick+0x20>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_IncTick+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	@ (8000b60 <HAL_IncTick+0x24>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	200003b8 	.word	0x200003b8

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	@ (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	200003b8 	.word	0x200003b8

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db0b      	blt.n	8000c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 021f 	and.w	r2, r3, #31
 8000bf8:	4907      	ldr	r1, [pc, #28]	@ (8000c18 <__NVIC_EnableIRQ+0x38>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	2001      	movs	r0, #1
 8000c02:	fa00 f202 	lsl.w	r2, r0, r2
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	@ (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	@ (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	@ 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	@ 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ff4c 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfe:	f7ff ff61 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	68b9      	ldr	r1, [r7, #8]
 8000d08:	6978      	ldr	r0, [r7, #20]
 8000d0a:	f7ff ffb1 	bl	8000c70 <NVIC_EncodePriority>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff80 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d1c:	bf00      	nop
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff54 	bl	8000be0 <__NVIC_EnableIRQ>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d4e:	f7ff ff09 	bl	8000b64 <HAL_GetTick>
 8000d52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d008      	beq.n	8000d72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2280      	movs	r2, #128	@ 0x80
 8000d64:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e052      	b.n	8000e18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f022 0216 	bic.w	r2, r2, #22
 8000d80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	695a      	ldr	r2, [r3, #20]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d103      	bne.n	8000da2 <HAL_DMA_Abort+0x62>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d007      	beq.n	8000db2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f022 0208 	bic.w	r2, r2, #8
 8000db0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f022 0201 	bic.w	r2, r2, #1
 8000dc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dc2:	e013      	b.n	8000dec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dc4:	f7ff fece 	bl	8000b64 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b05      	cmp	r3, #5
 8000dd0:	d90c      	bls.n	8000dec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2203      	movs	r2, #3
 8000ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e015      	b.n	8000e18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1e4      	bne.n	8000dc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dfe:	223f      	movs	r2, #63	@ 0x3f
 8000e00:	409a      	lsls	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d004      	beq.n	8000e3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2280      	movs	r2, #128	@ 0x80
 8000e38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00c      	b.n	8000e58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2205      	movs	r2, #5
 8000e42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 0201 	bic.w	r2, r2, #1
 8000e54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	e16b      	b.n	8001158 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	f040 815a 	bne.w	8001152 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d005      	beq.n	8000eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d130      	bne.n	8000f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eec:	2201      	movs	r2, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	091b      	lsrs	r3, r3, #4
 8000f02:	f003 0201 	and.w	r2, r3, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d017      	beq.n	8000f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d123      	bne.n	8000fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	69b9      	ldr	r1, [r7, #24]
 8000fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0203 	and.w	r2, r3, #3
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80b4 	beq.w	8001152 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b60      	ldr	r3, [pc, #384]	@ (8001170 <HAL_GPIO_Init+0x30c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	4a5f      	ldr	r2, [pc, #380]	@ (8001170 <HAL_GPIO_Init+0x30c>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffa:	4b5d      	ldr	r3, [pc, #372]	@ (8001170 <HAL_GPIO_Init+0x30c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001006:	4a5b      	ldr	r2, [pc, #364]	@ (8001174 <HAL_GPIO_Init+0x310>)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a52      	ldr	r2, [pc, #328]	@ (8001178 <HAL_GPIO_Init+0x314>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d02b      	beq.n	800108a <HAL_GPIO_Init+0x226>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a51      	ldr	r2, [pc, #324]	@ (800117c <HAL_GPIO_Init+0x318>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d025      	beq.n	8001086 <HAL_GPIO_Init+0x222>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a50      	ldr	r2, [pc, #320]	@ (8001180 <HAL_GPIO_Init+0x31c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d01f      	beq.n	8001082 <HAL_GPIO_Init+0x21e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4f      	ldr	r2, [pc, #316]	@ (8001184 <HAL_GPIO_Init+0x320>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d019      	beq.n	800107e <HAL_GPIO_Init+0x21a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4e      	ldr	r2, [pc, #312]	@ (8001188 <HAL_GPIO_Init+0x324>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x216>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4d      	ldr	r2, [pc, #308]	@ (800118c <HAL_GPIO_Init+0x328>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x212>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4c      	ldr	r2, [pc, #304]	@ (8001190 <HAL_GPIO_Init+0x32c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x20e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4b      	ldr	r2, [pc, #300]	@ (8001194 <HAL_GPIO_Init+0x330>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x20a>
 800106a:	2307      	movs	r3, #7
 800106c:	e00e      	b.n	800108c <HAL_GPIO_Init+0x228>
 800106e:	2308      	movs	r3, #8
 8001070:	e00c      	b.n	800108c <HAL_GPIO_Init+0x228>
 8001072:	2306      	movs	r3, #6
 8001074:	e00a      	b.n	800108c <HAL_GPIO_Init+0x228>
 8001076:	2305      	movs	r3, #5
 8001078:	e008      	b.n	800108c <HAL_GPIO_Init+0x228>
 800107a:	2304      	movs	r3, #4
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x228>
 800107e:	2303      	movs	r3, #3
 8001080:	e004      	b.n	800108c <HAL_GPIO_Init+0x228>
 8001082:	2302      	movs	r3, #2
 8001084:	e002      	b.n	800108c <HAL_GPIO_Init+0x228>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_GPIO_Init+0x228>
 800108a:	2300      	movs	r3, #0
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	f002 0203 	and.w	r2, r2, #3
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	4093      	lsls	r3, r2
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800109c:	4935      	ldr	r1, [pc, #212]	@ (8001174 <HAL_GPIO_Init+0x310>)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <HAL_GPIO_Init+0x334>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ce:	4a32      	ldr	r2, [pc, #200]	@ (8001198 <HAL_GPIO_Init+0x334>)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d4:	4b30      	ldr	r3, [pc, #192]	@ (8001198 <HAL_GPIO_Init+0x334>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010f8:	4a27      	ldr	r2, [pc, #156]	@ (8001198 <HAL_GPIO_Init+0x334>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010fe:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <HAL_GPIO_Init+0x334>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001122:	4a1d      	ldr	r2, [pc, #116]	@ (8001198 <HAL_GPIO_Init+0x334>)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001128:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <HAL_GPIO_Init+0x334>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800114c:	4a12      	ldr	r2, [pc, #72]	@ (8001198 <HAL_GPIO_Init+0x334>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3301      	adds	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	2b0f      	cmp	r3, #15
 800115c:	f67f ae90 	bls.w	8000e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3724      	adds	r7, #36	@ 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40013800 	.word	0x40013800
 8001178:	40020000 	.word	0x40020000
 800117c:	40020400 	.word	0x40020400
 8001180:	40020800 	.word	0x40020800
 8001184:	40020c00 	.word	0x40020c00
 8001188:	40021000 	.word	0x40021000
 800118c:	40021400 	.word	0x40021400
 8001190:	40021800 	.word	0x40021800
 8001194:	40021c00 	.word	0x40021c00
 8001198:	40013c00 	.word	0x40013c00

0800119c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
 80011a8:	4613      	mov	r3, r2
 80011aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ac:	787b      	ldrb	r3, [r7, #1]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b8:	e003      	b.n	80011c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b085      	sub	sp, #20
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	460b      	mov	r3, r1
 80011d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e0:	887a      	ldrh	r2, [r7, #2]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4013      	ands	r3, r2
 80011e6:	041a      	lsls	r2, r3, #16
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	887b      	ldrh	r3, [r7, #2]
 80011ee:	400b      	ands	r3, r1
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	4013      	ands	r3, r2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d006      	beq.n	8001228 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800121a:	4a05      	ldr	r2, [pc, #20]	@ (8001230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fa9e 	bl	8000764 <HAL_GPIO_EXTI_Callback>
  }
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40013c00 	.word	0x40013c00

08001234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e267      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d075      	beq.n	800133e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001252:	4b88      	ldr	r3, [pc, #544]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b04      	cmp	r3, #4
 800125c:	d00c      	beq.n	8001278 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125e:	4b85      	ldr	r3, [pc, #532]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001266:	2b08      	cmp	r3, #8
 8001268:	d112      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126a:	4b82      	ldr	r3, [pc, #520]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001272:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001276:	d10b      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	4b7e      	ldr	r3, [pc, #504]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d05b      	beq.n	800133c <HAL_RCC_OscConfig+0x108>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d157      	bne.n	800133c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e242      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001298:	d106      	bne.n	80012a8 <HAL_RCC_OscConfig+0x74>
 800129a:	4b76      	ldr	r3, [pc, #472]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a75      	ldr	r2, [pc, #468]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e01d      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x98>
 80012b2:	4b70      	ldr	r3, [pc, #448]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a6f      	ldr	r2, [pc, #444]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b6d      	ldr	r3, [pc, #436]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6c      	ldr	r2, [pc, #432]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e00b      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012cc:	4b69      	ldr	r3, [pc, #420]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a68      	ldr	r2, [pc, #416]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b66      	ldr	r3, [pc, #408]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a65      	ldr	r2, [pc, #404]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d013      	beq.n	8001314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fc3a 	bl	8000b64 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fc36 	bl	8000b64 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	@ 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e207      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	4b5b      	ldr	r3, [pc, #364]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0xc0>
 8001312:	e014      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fc26 	bl	8000b64 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fc22 	bl	8000b64 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	@ 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e1f3      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	4b51      	ldr	r3, [pc, #324]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0xe8>
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d063      	beq.n	8001412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800134a:	4b4a      	ldr	r3, [pc, #296]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00b      	beq.n	800136e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001356:	4b47      	ldr	r3, [pc, #284]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800135e:	2b08      	cmp	r3, #8
 8001360:	d11c      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001362:	4b44      	ldr	r3, [pc, #272]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d116      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	4b41      	ldr	r3, [pc, #260]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d001      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e1c7      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b3b      	ldr	r3, [pc, #236]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4937      	ldr	r1, [pc, #220]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	e03a      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d020      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a4:	4b34      	ldr	r3, [pc, #208]	@ (8001478 <HAL_RCC_OscConfig+0x244>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff fbdb 	bl	8000b64 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b2:	f7ff fbd7 	bl	8000b64 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e1a8      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d0:	4b28      	ldr	r3, [pc, #160]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4925      	ldr	r1, [pc, #148]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e6:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <HAL_RCC_OscConfig+0x244>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fbba 	bl	8000b64 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f4:	f7ff fbb6 	bl	8000b64 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e187      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d036      	beq.n	800148c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d016      	beq.n	8001454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <HAL_RCC_OscConfig+0x248>)
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fb9a 	bl	8000b64 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fb96 	bl	8000b64 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e167      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <HAL_RCC_OscConfig+0x240>)
 8001448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x200>
 8001452:	e01b      	b.n	800148c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <HAL_RCC_OscConfig+0x248>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7ff fb83 	bl	8000b64 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	e00e      	b.n	8001480 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001462:	f7ff fb7f 	bl	8000b64 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d907      	bls.n	8001480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e150      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
 8001474:	40023800 	.word	0x40023800
 8001478:	42470000 	.word	0x42470000
 800147c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	4b88      	ldr	r3, [pc, #544]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1ea      	bne.n	8001462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 8097 	beq.w	80015c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b81      	ldr	r3, [pc, #516]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10f      	bne.n	80014ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b7d      	ldr	r3, [pc, #500]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	4a7c      	ldr	r2, [pc, #496]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ba:	4b7a      	ldr	r3, [pc, #488]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c6:	2301      	movs	r3, #1
 80014c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	4b77      	ldr	r3, [pc, #476]	@ (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d118      	bne.n	8001508 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d6:	4b74      	ldr	r3, [pc, #464]	@ (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a73      	ldr	r2, [pc, #460]	@ (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fb3f 	bl	8000b64 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ea:	f7ff fb3b 	bl	8000b64 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e10c      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fc:	4b6a      	ldr	r3, [pc, #424]	@ (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x2ea>
 8001510:	4b64      	ldr	r3, [pc, #400]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001514:	4a63      	ldr	r2, [pc, #396]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6713      	str	r3, [r2, #112]	@ 0x70
 800151c:	e01c      	b.n	8001558 <HAL_RCC_OscConfig+0x324>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b05      	cmp	r3, #5
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x30c>
 8001526:	4b5f      	ldr	r3, [pc, #380]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800152a:	4a5e      	ldr	r2, [pc, #376]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6713      	str	r3, [r2, #112]	@ 0x70
 8001532:	4b5c      	ldr	r3, [pc, #368]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001536:	4a5b      	ldr	r2, [pc, #364]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6713      	str	r3, [r2, #112]	@ 0x70
 800153e:	e00b      	b.n	8001558 <HAL_RCC_OscConfig+0x324>
 8001540:	4b58      	ldr	r3, [pc, #352]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001544:	4a57      	ldr	r2, [pc, #348]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	6713      	str	r3, [r2, #112]	@ 0x70
 800154c:	4b55      	ldr	r3, [pc, #340]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001550:	4a54      	ldr	r2, [pc, #336]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001552:	f023 0304 	bic.w	r3, r3, #4
 8001556:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d015      	beq.n	800158c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fb00 	bl	8000b64 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff fafc 	bl	8000b64 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0cb      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	4b49      	ldr	r3, [pc, #292]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0ee      	beq.n	8001568 <HAL_RCC_OscConfig+0x334>
 800158a:	e014      	b.n	80015b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff faea 	bl	8000b64 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001592:	e00a      	b.n	80015aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001594:	f7ff fae6 	bl	8000b64 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e0b5      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015aa:	4b3e      	ldr	r3, [pc, #248]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1ee      	bne.n	8001594 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015bc:	4b39      	ldr	r3, [pc, #228]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	4a38      	ldr	r2, [pc, #224]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80a1 	beq.w	8001714 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d2:	4b34      	ldr	r3, [pc, #208]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d05c      	beq.n	8001698 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d141      	bne.n	800166a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b31      	ldr	r3, [pc, #196]	@ (80016ac <HAL_RCC_OscConfig+0x478>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff faba 	bl	8000b64 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fab6 	bl	8000b64 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e087      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001606:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69da      	ldr	r2, [r3, #28]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001620:	019b      	lsls	r3, r3, #6
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	3b01      	subs	r3, #1
 800162c:	041b      	lsls	r3, r3, #16
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001634:	061b      	lsls	r3, r3, #24
 8001636:	491b      	ldr	r1, [pc, #108]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800163c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <HAL_RCC_OscConfig+0x478>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fa8f 	bl	8000b64 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff fa8b 	bl	8000b64 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e05c      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x416>
 8001668:	e054      	b.n	8001714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <HAL_RCC_OscConfig+0x478>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fa78 	bl	8000b64 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff fa74 	bl	8000b64 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e045      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_RCC_OscConfig+0x470>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x444>
 8001696:	e03d      	b.n	8001714 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e038      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40007000 	.word	0x40007000
 80016ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <HAL_RCC_OscConfig+0x4ec>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d028      	beq.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d121      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d11a      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016e0:	4013      	ands	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d111      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d107      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0cc      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001738:	4b68      	ldr	r3, [pc, #416]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d90c      	bls.n	8001760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b65      	ldr	r3, [pc, #404]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b63      	ldr	r3, [pc, #396]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0b8      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001778:	4b59      	ldr	r3, [pc, #356]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a58      	ldr	r2, [pc, #352]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001782:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001790:	4b53      	ldr	r3, [pc, #332]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a52      	ldr	r2, [pc, #328]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800179a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	4b50      	ldr	r3, [pc, #320]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	494d      	ldr	r1, [pc, #308]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d044      	beq.n	8001844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b47      	ldr	r3, [pc, #284]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d119      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e07f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e2:	4b3f      	ldr	r3, [pc, #252]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d109      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e06f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f2:	4b3b      	ldr	r3, [pc, #236]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e067      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001802:	4b37      	ldr	r3, [pc, #220]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f023 0203 	bic.w	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4934      	ldr	r1, [pc, #208]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	4313      	orrs	r3, r2
 8001812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001814:	f7ff f9a6 	bl	8000b64 <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	e00a      	b.n	8001832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181c:	f7ff f9a2 	bl	8000b64 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e04f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	4b2b      	ldr	r3, [pc, #172]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 020c 	and.w	r2, r3, #12
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	429a      	cmp	r2, r3
 8001842:	d1eb      	bne.n	800181c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001844:	4b25      	ldr	r3, [pc, #148]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d20c      	bcs.n	800186c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b22      	ldr	r3, [pc, #136]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e032      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001878:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4916      	ldr	r1, [pc, #88]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001896:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	490e      	ldr	r1, [pc, #56]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018aa:	f000 f821 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	490a      	ldr	r1, [pc, #40]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	5ccb      	ldrb	r3, [r1, r3]
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	4a09      	ldr	r2, [pc, #36]	@ (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f826 	bl	800091c <HAL_InitTick>

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00
 80018e0:	40023800 	.word	0x40023800
 80018e4:	0800566c 	.word	0x0800566c
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f4:	b090      	sub	sp, #64	@ 0x40
 80018f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001908:	4b59      	ldr	r3, [pc, #356]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d00d      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x40>
 8001914:	2b08      	cmp	r3, #8
 8001916:	f200 80a1 	bhi.w	8001a5c <HAL_RCC_GetSysClockFreq+0x16c>
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x34>
 800191e:	2b04      	cmp	r3, #4
 8001920:	d003      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x3a>
 8001922:	e09b      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001924:	4b53      	ldr	r3, [pc, #332]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001926:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001928:	e09b      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192a:	4b53      	ldr	r3, [pc, #332]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800192c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800192e:	e098      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001930:	4b4f      	ldr	r3, [pc, #316]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001938:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d028      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001946:	4b4a      	ldr	r3, [pc, #296]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	099b      	lsrs	r3, r3, #6
 800194c:	2200      	movs	r2, #0
 800194e:	623b      	str	r3, [r7, #32]
 8001950:	627a      	str	r2, [r7, #36]	@ 0x24
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001958:	2100      	movs	r1, #0
 800195a:	4b47      	ldr	r3, [pc, #284]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800195c:	fb03 f201 	mul.w	r2, r3, r1
 8001960:	2300      	movs	r3, #0
 8001962:	fb00 f303 	mul.w	r3, r0, r3
 8001966:	4413      	add	r3, r2
 8001968:	4a43      	ldr	r2, [pc, #268]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800196a:	fba0 1202 	umull	r1, r2, r0, r2
 800196e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001970:	460a      	mov	r2, r1
 8001972:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001974:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001976:	4413      	add	r3, r2
 8001978:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800197a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800197c:	2200      	movs	r2, #0
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	61fa      	str	r2, [r7, #28]
 8001982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001986:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800198a:	f7fe fc21 	bl	80001d0 <__aeabi_uldivmod>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4613      	mov	r3, r2
 8001994:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001996:	e053      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001998:	4b35      	ldr	r3, [pc, #212]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	099b      	lsrs	r3, r3, #6
 800199e:	2200      	movs	r2, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	617a      	str	r2, [r7, #20]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019aa:	f04f 0b00 	mov.w	fp, #0
 80019ae:	4652      	mov	r2, sl
 80019b0:	465b      	mov	r3, fp
 80019b2:	f04f 0000 	mov.w	r0, #0
 80019b6:	f04f 0100 	mov.w	r1, #0
 80019ba:	0159      	lsls	r1, r3, #5
 80019bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c0:	0150      	lsls	r0, r2, #5
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ebb2 080a 	subs.w	r8, r2, sl
 80019ca:	eb63 090b 	sbc.w	r9, r3, fp
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019e2:	ebb2 0408 	subs.w	r4, r2, r8
 80019e6:	eb63 0509 	sbc.w	r5, r3, r9
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	00eb      	lsls	r3, r5, #3
 80019f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019f8:	00e2      	lsls	r2, r4, #3
 80019fa:	4614      	mov	r4, r2
 80019fc:	461d      	mov	r5, r3
 80019fe:	eb14 030a 	adds.w	r3, r4, sl
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	eb45 030b 	adc.w	r3, r5, fp
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a16:	4629      	mov	r1, r5
 8001a18:	028b      	lsls	r3, r1, #10
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a20:	4621      	mov	r1, r4
 8001a22:	028a      	lsls	r2, r1, #10
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	60fa      	str	r2, [r7, #12]
 8001a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a34:	f7fe fbcc 	bl	80001d0 <__aeabi_uldivmod>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001a50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a5a:	e002      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3740      	adds	r7, #64	@ 0x40
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	00f42400 	.word	0x00f42400
 8001a78:	017d7840 	.word	0x017d7840

08001a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a80:	4b03      	ldr	r3, [pc, #12]	@ (8001a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000000 	.word	0x20000000

08001a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a98:	f7ff fff0 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	0a9b      	lsrs	r3, r3, #10
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4903      	ldr	r1, [pc, #12]	@ (8001ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	0800567c 	.word	0x0800567c

08001abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ac0:	f7ff ffdc 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	0b5b      	lsrs	r3, r3, #13
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	4903      	ldr	r1, [pc, #12]	@ (8001ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ad2:	5ccb      	ldrb	r3, [r1, r3]
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	0800567c 	.word	0x0800567c

08001ae4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	220f      	movs	r2, #15
 8001af2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001af4:	4b12      	ldr	r3, [pc, #72]	@ (8001b40 <HAL_RCC_GetClockConfig+0x5c>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0203 	and.w	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b00:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <HAL_RCC_GetClockConfig+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <HAL_RCC_GetClockConfig+0x5c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b18:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <HAL_RCC_GetClockConfig+0x5c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	08db      	lsrs	r3, r3, #3
 8001b1e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b26:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <HAL_RCC_GetClockConfig+0x60>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0207 	and.w	r2, r3, #7
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	601a      	str	r2, [r3, #0]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40023c00 	.word	0x40023c00

08001b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e041      	b.n	8001bde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f839 	bl	8001be6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3304      	adds	r3, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	4610      	mov	r0, r2
 8001b88:	f000 f9c0 	bl	8001f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d001      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e04e      	b.n	8001cb2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a23      	ldr	r2, [pc, #140]	@ (8001cc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d022      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x80>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c3e:	d01d      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x80>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d018      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x80>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d013      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x80>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1c      	ldr	r2, [pc, #112]	@ (8001ccc <HAL_TIM_Base_Start_IT+0xd0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00e      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x80>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d009      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x80>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a19      	ldr	r2, [pc, #100]	@ (8001cd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d004      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x80>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a18      	ldr	r2, [pc, #96]	@ (8001cd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d111      	bne.n	8001ca0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d010      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9e:	e007      	b.n	8001cb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	40000400 	.word	0x40000400
 8001cc8:	40000800 	.word	0x40000800
 8001ccc:	40000c00 	.word	0x40000c00
 8001cd0:	40010400 	.word	0x40010400
 8001cd4:	40014000 	.word	0x40014000
 8001cd8:	40001800 	.word	0x40001800

08001cdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d020      	beq.n	8001d40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01b      	beq.n	8001d40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 0202 	mvn.w	r2, #2
 8001d10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8d2 	bl	8001ed0 <HAL_TIM_IC_CaptureCallback>
 8001d2c:	e005      	b.n	8001d3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8c4 	bl	8001ebc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f8d5 	bl	8001ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d020      	beq.n	8001d8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01b      	beq.n	8001d8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0204 	mvn.w	r2, #4
 8001d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2202      	movs	r2, #2
 8001d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f8ac 	bl	8001ed0 <HAL_TIM_IC_CaptureCallback>
 8001d78:	e005      	b.n	8001d86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f89e 	bl	8001ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f8af 	bl	8001ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d020      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d01b      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0208 	mvn.w	r2, #8
 8001da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2204      	movs	r2, #4
 8001dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f886 	bl	8001ed0 <HAL_TIM_IC_CaptureCallback>
 8001dc4:	e005      	b.n	8001dd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f878 	bl	8001ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f889 	bl	8001ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d020      	beq.n	8001e24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d01b      	beq.n	8001e24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0210 	mvn.w	r2, #16
 8001df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2208      	movs	r2, #8
 8001dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f860 	bl	8001ed0 <HAL_TIM_IC_CaptureCallback>
 8001e10:	e005      	b.n	8001e1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f852 	bl	8001ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f863 	bl	8001ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00c      	beq.n	8001e48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d007      	beq.n	8001e48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0201 	mvn.w	r2, #1
 8001e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe fcd6 	bl	80007f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00c      	beq.n	8001e6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f906 	bl	8002078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00c      	beq.n	8001e90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d007      	beq.n	8001e90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f834 	bl	8001ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00c      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0220 	mvn.w	r2, #32
 8001eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f8d8 	bl	8002064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a46      	ldr	r2, [pc, #280]	@ (8002038 <TIM_Base_SetConfig+0x12c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d013      	beq.n	8001f4c <TIM_Base_SetConfig+0x40>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f2a:	d00f      	beq.n	8001f4c <TIM_Base_SetConfig+0x40>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a43      	ldr	r2, [pc, #268]	@ (800203c <TIM_Base_SetConfig+0x130>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00b      	beq.n	8001f4c <TIM_Base_SetConfig+0x40>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a42      	ldr	r2, [pc, #264]	@ (8002040 <TIM_Base_SetConfig+0x134>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d007      	beq.n	8001f4c <TIM_Base_SetConfig+0x40>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a41      	ldr	r2, [pc, #260]	@ (8002044 <TIM_Base_SetConfig+0x138>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d003      	beq.n	8001f4c <TIM_Base_SetConfig+0x40>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a40      	ldr	r2, [pc, #256]	@ (8002048 <TIM_Base_SetConfig+0x13c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d108      	bne.n	8001f5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a35      	ldr	r2, [pc, #212]	@ (8002038 <TIM_Base_SetConfig+0x12c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d02b      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f6c:	d027      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a32      	ldr	r2, [pc, #200]	@ (800203c <TIM_Base_SetConfig+0x130>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d023      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a31      	ldr	r2, [pc, #196]	@ (8002040 <TIM_Base_SetConfig+0x134>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d01f      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a30      	ldr	r2, [pc, #192]	@ (8002044 <TIM_Base_SetConfig+0x138>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01b      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a2f      	ldr	r2, [pc, #188]	@ (8002048 <TIM_Base_SetConfig+0x13c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d017      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a2e      	ldr	r2, [pc, #184]	@ (800204c <TIM_Base_SetConfig+0x140>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a2d      	ldr	r2, [pc, #180]	@ (8002050 <TIM_Base_SetConfig+0x144>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00f      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a2c      	ldr	r2, [pc, #176]	@ (8002054 <TIM_Base_SetConfig+0x148>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00b      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8002058 <TIM_Base_SetConfig+0x14c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d007      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800205c <TIM_Base_SetConfig+0x150>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d003      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a29      	ldr	r2, [pc, #164]	@ (8002060 <TIM_Base_SetConfig+0x154>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d108      	bne.n	8001fd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a10      	ldr	r2, [pc, #64]	@ (8002038 <TIM_Base_SetConfig+0x12c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d003      	beq.n	8002004 <TIM_Base_SetConfig+0xf8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a12      	ldr	r2, [pc, #72]	@ (8002048 <TIM_Base_SetConfig+0x13c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d103      	bne.n	800200c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b01      	cmp	r3, #1
 800201c:	d105      	bne.n	800202a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f023 0201 	bic.w	r2, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	611a      	str	r2, [r3, #16]
  }
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40010000 	.word	0x40010000
 800203c:	40000400 	.word	0x40000400
 8002040:	40000800 	.word	0x40000800
 8002044:	40000c00 	.word	0x40000c00
 8002048:	40010400 	.word	0x40010400
 800204c:	40014000 	.word	0x40014000
 8002050:	40014400 	.word	0x40014400
 8002054:	40014800 	.word	0x40014800
 8002058:	40001800 	.word	0x40001800
 800205c:	40001c00 	.word	0x40001c00
 8002060:	40002000 	.word	0x40002000

08002064 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e042      	b.n	8002124 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe fbe2 	bl	800087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2224      	movs	r2, #36	@ 0x24
 80020bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 fc7b 	bl	80029cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b0ba      	sub	sp, #232	@ 0xe8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800215e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800216a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10f      	bne.n	8002192 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_UART_IRQHandler+0x66>
 800217e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fb5f 	bl	800284e <UART_Receive_IT>
      return;
 8002190:	e25b      	b.n	800264a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80de 	beq.w	8002358 <HAL_UART_IRQHandler+0x22c>
 800219c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d106      	bne.n	80021b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80d1 	beq.w	8002358 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <HAL_UART_IRQHandler+0xae>
 80021c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	f043 0201 	orr.w	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_UART_IRQHandler+0xd2>
 80021e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f6:	f043 0202 	orr.w	r2, r3, #2
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_UART_IRQHandler+0xf6>
 800220a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	f043 0204 	orr.w	r2, r3, #4
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d011      	beq.n	8002252 <HAL_UART_IRQHandler+0x126>
 800222e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b00      	cmp	r3, #0
 8002238:	d105      	bne.n	8002246 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800223a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	f043 0208 	orr.w	r2, r3, #8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 81f2 	beq.w	8002640 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800225c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_UART_IRQHandler+0x14e>
 8002268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 faea 	bl	800284e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002284:	2b40      	cmp	r3, #64	@ 0x40
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d103      	bne.n	80022a6 <HAL_UART_IRQHandler+0x17a>
 800229e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d04f      	beq.n	8002346 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f9f2 	bl	8002690 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b6:	2b40      	cmp	r3, #64	@ 0x40
 80022b8:	d141      	bne.n	800233e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3314      	adds	r3, #20
 80022c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022c8:	e853 3f00 	ldrex	r3, [r3]
 80022cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80022d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	3314      	adds	r3, #20
 80022e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80022e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80022ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80022f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80022f6:	e841 2300 	strex	r3, r2, [r1]
 80022fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80022fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1d9      	bne.n	80022ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800230a:	2b00      	cmp	r3, #0
 800230c:	d013      	beq.n	8002336 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002312:	4a7e      	ldr	r2, [pc, #504]	@ (800250c <HAL_UART_IRQHandler+0x3e0>)
 8002314:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fd80 	bl	8000e20 <HAL_DMA_Abort_IT>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d016      	beq.n	8002354 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002330:	4610      	mov	r0, r2
 8002332:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002334:	e00e      	b.n	8002354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f994 	bl	8002664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800233c:	e00a      	b.n	8002354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f990 	bl	8002664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002344:	e006      	b.n	8002354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f98c 	bl	8002664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002352:	e175      	b.n	8002640 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002354:	bf00      	nop
    return;
 8002356:	e173      	b.n	8002640 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235c:	2b01      	cmp	r3, #1
 800235e:	f040 814f 	bne.w	8002600 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 8148 	beq.w	8002600 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 8141 	beq.w	8002600 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239e:	2b40      	cmp	r3, #64	@ 0x40
 80023a0:	f040 80b6 	bne.w	8002510 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80023b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 8145 	beq.w	8002644 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80023be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80023c2:	429a      	cmp	r2, r3
 80023c4:	f080 813e 	bcs.w	8002644 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80023ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023da:	f000 8088 	beq.w	80024ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	330c      	adds	r3, #12
 80023e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023ec:	e853 3f00 	ldrex	r3, [r3]
 80023f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80023f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	330c      	adds	r3, #12
 8002406:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800240a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800240e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002412:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002416:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800241a:	e841 2300 	strex	r3, r2, [r1]
 800241e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1d9      	bne.n	80023de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3314      	adds	r3, #20
 8002430:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002432:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002434:	e853 3f00 	ldrex	r3, [r3]
 8002438:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800243a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	3314      	adds	r3, #20
 800244a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800244e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002452:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002454:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002456:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800245a:	e841 2300 	strex	r3, r2, [r1]
 800245e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1e1      	bne.n	800242a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3314      	adds	r3, #20
 800246c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002470:	e853 3f00 	ldrex	r3, [r3]
 8002474:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800247c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3314      	adds	r3, #20
 8002486:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800248a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800248c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002490:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002492:	e841 2300 	strex	r3, r2, [r1]
 8002496:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1e3      	bne.n	8002466 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	330c      	adds	r3, #12
 80024b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024b6:	e853 3f00 	ldrex	r3, [r3]
 80024ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80024bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024be:	f023 0310 	bic.w	r3, r3, #16
 80024c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	330c      	adds	r3, #12
 80024cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80024d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024d8:	e841 2300 	strex	r3, r2, [r1]
 80024dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80024de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1e3      	bne.n	80024ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe fc29 	bl	8000d40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2202      	movs	r2, #2
 80024f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	b29b      	uxth	r3, r3
 8002502:	4619      	mov	r1, r3
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f8b7 	bl	8002678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800250a:	e09b      	b.n	8002644 <HAL_UART_IRQHandler+0x518>
 800250c:	08002757 	.word	0x08002757
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002518:	b29b      	uxth	r3, r3
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 808e 	beq.w	8002648 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800252c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 8089 	beq.w	8002648 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	330c      	adds	r3, #12
 800253c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002540:	e853 3f00 	ldrex	r3, [r3]
 8002544:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800254c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	330c      	adds	r3, #12
 8002556:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800255a:	647a      	str	r2, [r7, #68]	@ 0x44
 800255c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800255e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002560:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002562:	e841 2300 	strex	r3, r2, [r1]
 8002566:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1e3      	bne.n	8002536 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3314      	adds	r3, #20
 8002574:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	e853 3f00 	ldrex	r3, [r3]
 800257c:	623b      	str	r3, [r7, #32]
   return(result);
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	f023 0301 	bic.w	r3, r3, #1
 8002584:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	3314      	adds	r3, #20
 800258e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002592:	633a      	str	r2, [r7, #48]	@ 0x30
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002596:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800259a:	e841 2300 	strex	r3, r2, [r1]
 800259e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80025a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1e3      	bne.n	800256e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	330c      	adds	r3, #12
 80025ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	e853 3f00 	ldrex	r3, [r3]
 80025c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f023 0310 	bic.w	r3, r3, #16
 80025ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	330c      	adds	r3, #12
 80025d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80025d8:	61fa      	str	r2, [r7, #28]
 80025da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025dc:	69b9      	ldr	r1, [r7, #24]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	e841 2300 	strex	r3, r2, [r1]
 80025e4:	617b      	str	r3, [r7, #20]
   return(result);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1e3      	bne.n	80025b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80025f6:	4619      	mov	r1, r3
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f83d 	bl	8002678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025fe:	e023      	b.n	8002648 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002608:	2b00      	cmp	r3, #0
 800260a:	d009      	beq.n	8002620 <HAL_UART_IRQHandler+0x4f4>
 800260c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f8b0 	bl	800277e <UART_Transmit_IT>
    return;
 800261e:	e014      	b.n	800264a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00e      	beq.n	800264a <HAL_UART_IRQHandler+0x51e>
 800262c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f8f0 	bl	800281e <UART_EndTransmit_IT>
    return;
 800263e:	e004      	b.n	800264a <HAL_UART_IRQHandler+0x51e>
    return;
 8002640:	bf00      	nop
 8002642:	e002      	b.n	800264a <HAL_UART_IRQHandler+0x51e>
      return;
 8002644:	bf00      	nop
 8002646:	e000      	b.n	800264a <HAL_UART_IRQHandler+0x51e>
      return;
 8002648:	bf00      	nop
  }
}
 800264a:	37e8      	adds	r7, #232	@ 0xe8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002690:	b480      	push	{r7}
 8002692:	b095      	sub	sp, #84	@ 0x54
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	330c      	adds	r3, #12
 800269e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a2:	e853 3f00 	ldrex	r3, [r3]
 80026a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80026a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	330c      	adds	r3, #12
 80026b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80026ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80026be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80026c0:	e841 2300 	strex	r3, r2, [r1]
 80026c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80026c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1e5      	bne.n	8002698 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3314      	adds	r3, #20
 80026d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	e853 3f00 	ldrex	r3, [r3]
 80026da:	61fb      	str	r3, [r7, #28]
   return(result);
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	3314      	adds	r3, #20
 80026ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026f4:	e841 2300 	strex	r3, r2, [r1]
 80026f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1e5      	bne.n	80026cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	2b01      	cmp	r3, #1
 8002706:	d119      	bne.n	800273c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	330c      	adds	r3, #12
 800270e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	e853 3f00 	ldrex	r3, [r3]
 8002716:	60bb      	str	r3, [r7, #8]
   return(result);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f023 0310 	bic.w	r3, r3, #16
 800271e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	330c      	adds	r3, #12
 8002726:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002728:	61ba      	str	r2, [r7, #24]
 800272a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272c:	6979      	ldr	r1, [r7, #20]
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	e841 2300 	strex	r3, r2, [r1]
 8002734:	613b      	str	r3, [r7, #16]
   return(result);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1e5      	bne.n	8002708 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800274a:	bf00      	nop
 800274c:	3754      	adds	r7, #84	@ 0x54
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002762:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7ff ff77 	bl	8002664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b21      	cmp	r3, #33	@ 0x21
 8002790:	d13e      	bne.n	8002810 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800279a:	d114      	bne.n	80027c6 <UART_Transmit_IT+0x48>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d110      	bne.n	80027c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	1c9a      	adds	r2, r3, #2
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	621a      	str	r2, [r3, #32]
 80027c4:	e008      	b.n	80027d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	1c59      	adds	r1, r3, #1
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6211      	str	r1, [r2, #32]
 80027d0:	781a      	ldrb	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	4619      	mov	r1, r3
 80027e6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10f      	bne.n	800280c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800280a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	e000      	b.n	8002812 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002810:	2302      	movs	r3, #2
  }
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002834:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff ff06 	bl	8002650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b08c      	sub	sp, #48	@ 0x30
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b22      	cmp	r3, #34	@ 0x22
 8002860:	f040 80ae 	bne.w	80029c0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800286c:	d117      	bne.n	800289e <UART_Receive_IT+0x50>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d113      	bne.n	800289e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002876:	2300      	movs	r3, #0
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	b29b      	uxth	r3, r3
 8002888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800288c:	b29a      	uxth	r2, r3
 800288e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002890:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	1c9a      	adds	r2, r3, #2
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	629a      	str	r2, [r3, #40]	@ 0x28
 800289c:	e026      	b.n	80028ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028b0:	d007      	beq.n	80028c2 <UART_Receive_IT+0x74>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10a      	bne.n	80028d0 <UART_Receive_IT+0x82>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	e008      	b.n	80028e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	4619      	mov	r1, r3
 80028fa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d15d      	bne.n	80029bc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0220 	bic.w	r2, r2, #32
 800290e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800291e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	2b01      	cmp	r3, #1
 8002944:	d135      	bne.n	80029b2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	330c      	adds	r3, #12
 8002952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	e853 3f00 	ldrex	r3, [r3]
 800295a:	613b      	str	r3, [r7, #16]
   return(result);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f023 0310 	bic.w	r3, r3, #16
 8002962:	627b      	str	r3, [r7, #36]	@ 0x24
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	330c      	adds	r3, #12
 800296a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800296c:	623a      	str	r2, [r7, #32]
 800296e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002970:	69f9      	ldr	r1, [r7, #28]
 8002972:	6a3a      	ldr	r2, [r7, #32]
 8002974:	e841 2300 	strex	r3, r2, [r1]
 8002978:	61bb      	str	r3, [r7, #24]
   return(result);
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1e5      	bne.n	800294c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b10      	cmp	r3, #16
 800298c:	d10a      	bne.n	80029a4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80029a8:	4619      	mov	r1, r3
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fe64 	bl	8002678 <HAL_UARTEx_RxEventCallback>
 80029b0:	e002      	b.n	80029b8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fd fef8 	bl	80007a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	e002      	b.n	80029c2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	e000      	b.n	80029c2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80029c0:	2302      	movs	r3, #2
  }
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3730      	adds	r7, #48	@ 0x30
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d0:	b0c0      	sub	sp, #256	@ 0x100
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e8:	68d9      	ldr	r1, [r3, #12]
 80029ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	ea40 0301 	orr.w	r3, r0, r1
 80029f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a24:	f021 010c 	bic.w	r1, r1, #12
 8002a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a32:	430b      	orrs	r3, r1
 8002a34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a46:	6999      	ldr	r1, [r3, #24]
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	ea40 0301 	orr.w	r3, r0, r1
 8002a52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4b8f      	ldr	r3, [pc, #572]	@ (8002c98 <UART_SetConfig+0x2cc>)
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d005      	beq.n	8002a6c <UART_SetConfig+0xa0>
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4b8d      	ldr	r3, [pc, #564]	@ (8002c9c <UART_SetConfig+0x2d0>)
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d104      	bne.n	8002a76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a6c:	f7ff f826 	bl	8001abc <HAL_RCC_GetPCLK2Freq>
 8002a70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a74:	e003      	b.n	8002a7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a76:	f7ff f80d 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 8002a7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a88:	f040 810c 	bne.w	8002ca4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a90:	2200      	movs	r2, #0
 8002a92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a9e:	4622      	mov	r2, r4
 8002aa0:	462b      	mov	r3, r5
 8002aa2:	1891      	adds	r1, r2, r2
 8002aa4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002aa6:	415b      	adcs	r3, r3
 8002aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002aaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002aae:	4621      	mov	r1, r4
 8002ab0:	eb12 0801 	adds.w	r8, r2, r1
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	eb43 0901 	adc.w	r9, r3, r1
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ace:	4690      	mov	r8, r2
 8002ad0:	4699      	mov	r9, r3
 8002ad2:	4623      	mov	r3, r4
 8002ad4:	eb18 0303 	adds.w	r3, r8, r3
 8002ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002adc:	462b      	mov	r3, r5
 8002ade:	eb49 0303 	adc.w	r3, r9, r3
 8002ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002af2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002af6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002afa:	460b      	mov	r3, r1
 8002afc:	18db      	adds	r3, r3, r3
 8002afe:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b00:	4613      	mov	r3, r2
 8002b02:	eb42 0303 	adc.w	r3, r2, r3
 8002b06:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b10:	f7fd fb5e 	bl	80001d0 <__aeabi_uldivmod>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4b61      	ldr	r3, [pc, #388]	@ (8002ca0 <UART_SetConfig+0x2d4>)
 8002b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	011c      	lsls	r4, r3, #4
 8002b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b26:	2200      	movs	r2, #0
 8002b28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b34:	4642      	mov	r2, r8
 8002b36:	464b      	mov	r3, r9
 8002b38:	1891      	adds	r1, r2, r2
 8002b3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b3c:	415b      	adcs	r3, r3
 8002b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b44:	4641      	mov	r1, r8
 8002b46:	eb12 0a01 	adds.w	sl, r2, r1
 8002b4a:	4649      	mov	r1, r9
 8002b4c:	eb43 0b01 	adc.w	fp, r3, r1
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b64:	4692      	mov	sl, r2
 8002b66:	469b      	mov	fp, r3
 8002b68:	4643      	mov	r3, r8
 8002b6a:	eb1a 0303 	adds.w	r3, sl, r3
 8002b6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b72:	464b      	mov	r3, r9
 8002b74:	eb4b 0303 	adc.w	r3, fp, r3
 8002b78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b90:	460b      	mov	r3, r1
 8002b92:	18db      	adds	r3, r3, r3
 8002b94:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b96:	4613      	mov	r3, r2
 8002b98:	eb42 0303 	adc.w	r3, r2, r3
 8002b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ba2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002ba6:	f7fd fb13 	bl	80001d0 <__aeabi_uldivmod>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca0 <UART_SetConfig+0x2d4>)
 8002bb2:	fba3 2301 	umull	r2, r3, r3, r1
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	2264      	movs	r2, #100	@ 0x64
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	1acb      	subs	r3, r1, r3
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002bc6:	4b36      	ldr	r3, [pc, #216]	@ (8002ca0 <UART_SetConfig+0x2d4>)
 8002bc8:	fba3 2302 	umull	r2, r3, r3, r2
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002bd4:	441c      	add	r4, r3
 8002bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002be0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002be4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002be8:	4642      	mov	r2, r8
 8002bea:	464b      	mov	r3, r9
 8002bec:	1891      	adds	r1, r2, r2
 8002bee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002bf0:	415b      	adcs	r3, r3
 8002bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	1851      	adds	r1, r2, r1
 8002bfc:	6339      	str	r1, [r7, #48]	@ 0x30
 8002bfe:	4649      	mov	r1, r9
 8002c00:	414b      	adcs	r3, r1
 8002c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c10:	4659      	mov	r1, fp
 8002c12:	00cb      	lsls	r3, r1, #3
 8002c14:	4651      	mov	r1, sl
 8002c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c1a:	4651      	mov	r1, sl
 8002c1c:	00ca      	lsls	r2, r1, #3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	4603      	mov	r3, r0
 8002c24:	4642      	mov	r2, r8
 8002c26:	189b      	adds	r3, r3, r2
 8002c28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c2c:	464b      	mov	r3, r9
 8002c2e:	460a      	mov	r2, r1
 8002c30:	eb42 0303 	adc.w	r3, r2, r3
 8002c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	18db      	adds	r3, r3, r3
 8002c50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c52:	4613      	mov	r3, r2
 8002c54:	eb42 0303 	adc.w	r3, r2, r3
 8002c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c62:	f7fd fab5 	bl	80001d0 <__aeabi_uldivmod>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca0 <UART_SetConfig+0x2d4>)
 8002c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c70:	095b      	lsrs	r3, r3, #5
 8002c72:	2164      	movs	r1, #100	@ 0x64
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	3332      	adds	r3, #50	@ 0x32
 8002c7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ca0 <UART_SetConfig+0x2d4>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	f003 0207 	and.w	r2, r3, #7
 8002c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4422      	add	r2, r4
 8002c92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c94:	e106      	b.n	8002ea4 <UART_SetConfig+0x4d8>
 8002c96:	bf00      	nop
 8002c98:	40011000 	.word	0x40011000
 8002c9c:	40011400 	.word	0x40011400
 8002ca0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002cae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002cb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002cb6:	4642      	mov	r2, r8
 8002cb8:	464b      	mov	r3, r9
 8002cba:	1891      	adds	r1, r2, r2
 8002cbc:	6239      	str	r1, [r7, #32]
 8002cbe:	415b      	adcs	r3, r3
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cc6:	4641      	mov	r1, r8
 8002cc8:	1854      	adds	r4, r2, r1
 8002cca:	4649      	mov	r1, r9
 8002ccc:	eb43 0501 	adc.w	r5, r3, r1
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	00eb      	lsls	r3, r5, #3
 8002cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cde:	00e2      	lsls	r2, r4, #3
 8002ce0:	4614      	mov	r4, r2
 8002ce2:	461d      	mov	r5, r3
 8002ce4:	4643      	mov	r3, r8
 8002ce6:	18e3      	adds	r3, r4, r3
 8002ce8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002cec:	464b      	mov	r3, r9
 8002cee:	eb45 0303 	adc.w	r3, r5, r3
 8002cf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d12:	4629      	mov	r1, r5
 8002d14:	008b      	lsls	r3, r1, #2
 8002d16:	4621      	mov	r1, r4
 8002d18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	008a      	lsls	r2, r1, #2
 8002d20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d24:	f7fd fa54 	bl	80001d0 <__aeabi_uldivmod>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4b60      	ldr	r3, [pc, #384]	@ (8002eb0 <UART_SetConfig+0x4e4>)
 8002d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	011c      	lsls	r4, r3, #4
 8002d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d48:	4642      	mov	r2, r8
 8002d4a:	464b      	mov	r3, r9
 8002d4c:	1891      	adds	r1, r2, r2
 8002d4e:	61b9      	str	r1, [r7, #24]
 8002d50:	415b      	adcs	r3, r3
 8002d52:	61fb      	str	r3, [r7, #28]
 8002d54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d58:	4641      	mov	r1, r8
 8002d5a:	1851      	adds	r1, r2, r1
 8002d5c:	6139      	str	r1, [r7, #16]
 8002d5e:	4649      	mov	r1, r9
 8002d60:	414b      	adcs	r3, r1
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d70:	4659      	mov	r1, fp
 8002d72:	00cb      	lsls	r3, r1, #3
 8002d74:	4651      	mov	r1, sl
 8002d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d7a:	4651      	mov	r1, sl
 8002d7c:	00ca      	lsls	r2, r1, #3
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	4642      	mov	r2, r8
 8002d86:	189b      	adds	r3, r3, r2
 8002d88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d8c:	464b      	mov	r3, r9
 8002d8e:	460a      	mov	r2, r1
 8002d90:	eb42 0303 	adc.w	r3, r2, r3
 8002d94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002da2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002db0:	4649      	mov	r1, r9
 8002db2:	008b      	lsls	r3, r1, #2
 8002db4:	4641      	mov	r1, r8
 8002db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dba:	4641      	mov	r1, r8
 8002dbc:	008a      	lsls	r2, r1, #2
 8002dbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002dc2:	f7fd fa05 	bl	80001d0 <__aeabi_uldivmod>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4b38      	ldr	r3, [pc, #224]	@ (8002eb0 <UART_SetConfig+0x4e4>)
 8002dce:	fba3 2301 	umull	r2, r3, r3, r1
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	2264      	movs	r2, #100	@ 0x64
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	1acb      	subs	r3, r1, r3
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	3332      	adds	r3, #50	@ 0x32
 8002de0:	4a33      	ldr	r2, [pc, #204]	@ (8002eb0 <UART_SetConfig+0x4e4>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dec:	441c      	add	r4, r3
 8002dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002df2:	2200      	movs	r2, #0
 8002df4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002df6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002df8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002dfc:	4642      	mov	r2, r8
 8002dfe:	464b      	mov	r3, r9
 8002e00:	1891      	adds	r1, r2, r2
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	415b      	adcs	r3, r3
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e0c:	4641      	mov	r1, r8
 8002e0e:	1851      	adds	r1, r2, r1
 8002e10:	6039      	str	r1, [r7, #0]
 8002e12:	4649      	mov	r1, r9
 8002e14:	414b      	adcs	r3, r1
 8002e16:	607b      	str	r3, [r7, #4]
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e24:	4659      	mov	r1, fp
 8002e26:	00cb      	lsls	r3, r1, #3
 8002e28:	4651      	mov	r1, sl
 8002e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e2e:	4651      	mov	r1, sl
 8002e30:	00ca      	lsls	r2, r1, #3
 8002e32:	4610      	mov	r0, r2
 8002e34:	4619      	mov	r1, r3
 8002e36:	4603      	mov	r3, r0
 8002e38:	4642      	mov	r2, r8
 8002e3a:	189b      	adds	r3, r3, r2
 8002e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e3e:	464b      	mov	r3, r9
 8002e40:	460a      	mov	r2, r1
 8002e42:	eb42 0303 	adc.w	r3, r2, r3
 8002e46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e52:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e60:	4649      	mov	r1, r9
 8002e62:	008b      	lsls	r3, r1, #2
 8002e64:	4641      	mov	r1, r8
 8002e66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e6a:	4641      	mov	r1, r8
 8002e6c:	008a      	lsls	r2, r1, #2
 8002e6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e72:	f7fd f9ad 	bl	80001d0 <__aeabi_uldivmod>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb0 <UART_SetConfig+0x4e4>)
 8002e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	2164      	movs	r1, #100	@ 0x64
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	3332      	adds	r3, #50	@ 0x32
 8002e8e:	4a08      	ldr	r2, [pc, #32]	@ (8002eb0 <UART_SetConfig+0x4e4>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	f003 020f 	and.w	r2, r3, #15
 8002e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4422      	add	r2, r4
 8002ea2:	609a      	str	r2, [r3, #8]
}
 8002ea4:	bf00      	nop
 8002ea6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb0:	51eb851f 	.word	0x51eb851f

08002eb4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ec6:	2b84      	cmp	r3, #132	@ 0x84
 8002ec8:	d005      	beq.n	8002ed6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002eca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3303      	adds	r3, #3
 8002ed4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002ee8:	f001 f82a 	bl	8003f40 <vTaskStartScheduler>
  
  return osOK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef4:	b089      	sub	sp, #36	@ 0x24
 8002ef6:	af04      	add	r7, sp, #16
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d020      	beq.n	8002f46 <osThreadCreate+0x54>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01c      	beq.n	8002f46 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685c      	ldr	r4, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691e      	ldr	r6, [r3, #16]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ffc8 	bl	8002eb4 <makeFreeRtosPriority>
 8002f24:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f2e:	9202      	str	r2, [sp, #8]
 8002f30:	9301      	str	r3, [sp, #4]
 8002f32:	9100      	str	r1, [sp, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	4632      	mov	r2, r6
 8002f38:	4629      	mov	r1, r5
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f000 fe1a 	bl	8003b74 <xTaskCreateStatic>
 8002f40:	4603      	mov	r3, r0
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	e01c      	b.n	8002f80 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685c      	ldr	r4, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f52:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ffaa 	bl	8002eb4 <makeFreeRtosPriority>
 8002f60:	4602      	mov	r2, r0
 8002f62:	f107 030c 	add.w	r3, r7, #12
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	9200      	str	r2, [sp, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	4632      	mov	r2, r6
 8002f6e:	4629      	mov	r1, r5
 8002f70:	4620      	mov	r0, r4
 8002f72:	f000 fe5f 	bl	8003c34 <xTaskCreate>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d001      	beq.n	8002f80 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e000      	b.n	8002f82 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002f80:	68fb      	ldr	r3, [r7, #12]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f8a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af02      	add	r7, sp, #8
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00f      	beq.n	8002fbc <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d10a      	bne.n	8002fb8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	9200      	str	r2, [sp, #0]
 8002faa:	2200      	movs	r2, #0
 8002fac:	2100      	movs	r1, #0
 8002fae:	2001      	movs	r0, #1
 8002fb0:	f000 f964 	bl	800327c <xQueueGenericCreateStatic>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	e016      	b.n	8002fe6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e014      	b.n	8002fe6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d110      	bne.n	8002fe4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	f000 f9d5 	bl	8003376 <xQueueGenericCreate>
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <osSemaphoreCreate+0x56>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2100      	movs	r1, #0
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fa26 	bl	800342c <xQueueGenericSend>
      return sema;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	e000      	b.n	8002fe6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002fe4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002fee:	b590      	push	{r4, r7, lr}
 8002ff0:	b085      	sub	sp, #20
 8002ff2:	af02      	add	r7, sp, #8
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d011      	beq.n	8003024 <osMessageCreate+0x36>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00d      	beq.n	8003024 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2400      	movs	r4, #0
 800301a:	9400      	str	r4, [sp, #0]
 800301c:	f000 f92e 	bl	800327c <xQueueGenericCreateStatic>
 8003020:	4603      	mov	r3, r0
 8003022:	e008      	b.n	8003036 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	4619      	mov	r1, r3
 8003030:	f000 f9a1 	bl	8003376 <xQueueGenericCreate>
 8003034:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bd90      	pop	{r4, r7, pc}

0800303e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f103 0208 	add.w	r2, r3, #8
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f04f 32ff 	mov.w	r2, #4294967295
 8003056:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f103 0208 	add.w	r2, r3, #8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f103 0208 	add.w	r2, r3, #8
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	601a      	str	r2, [r3, #0]
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f6:	d103      	bne.n	8003100 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	e00c      	b.n	800311a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3308      	adds	r3, #8
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	e002      	b.n	800310e <vListInsert+0x2e>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	d2f6      	bcs.n	8003108 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	601a      	str	r2, [r3, #0]
}
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003152:	b480      	push	{r7}
 8003154:	b085      	sub	sp, #20
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6892      	ldr	r2, [r2, #8]
 8003168:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6852      	ldr	r2, [r2, #4]
 8003172:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	429a      	cmp	r2, r3
 800317c:	d103      	bne.n	8003186 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	1e5a      	subs	r2, r3, #1
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10b      	bne.n	80031d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80031ce:	bf00      	nop
 80031d0:	bf00      	nop
 80031d2:	e7fd      	b.n	80031d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80031d4:	f001 fe28 	bl	8004e28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e0:	68f9      	ldr	r1, [r7, #12]
 80031e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	441a      	add	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003204:	3b01      	subs	r3, #1
 8003206:	68f9      	ldr	r1, [r7, #12]
 8003208:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	441a      	add	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	22ff      	movs	r2, #255	@ 0xff
 8003218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	22ff      	movs	r2, #255	@ 0xff
 8003220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d114      	bne.n	8003254 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01a      	beq.n	8003268 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3310      	adds	r3, #16
 8003236:	4618      	mov	r0, r3
 8003238:	f001 f8dc 	bl	80043f4 <xTaskRemoveFromEventList>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d012      	beq.n	8003268 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003242:	4b0d      	ldr	r3, [pc, #52]	@ (8003278 <xQueueGenericReset+0xd0>)
 8003244:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	e009      	b.n	8003268 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3310      	adds	r3, #16
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fef0 	bl	800303e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3324      	adds	r3, #36	@ 0x24
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff feeb 	bl	800303e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003268:	f001 fe10 	bl	8004e8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800326c:	2301      	movs	r3, #1
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	e000ed04 	.word	0xe000ed04

0800327c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08e      	sub	sp, #56	@ 0x38
 8003280:	af02      	add	r7, sp, #8
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10b      	bne.n	80032a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80032a2:	bf00      	nop
 80032a4:	bf00      	nop
 80032a6:	e7fd      	b.n	80032a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10b      	bne.n	80032c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	e7fd      	b.n	80032c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <xQueueGenericCreateStatic+0x56>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <xQueueGenericCreateStatic+0x5a>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <xQueueGenericCreateStatic+0x5c>
 80032d6:	2300      	movs	r3, #0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10b      	bne.n	80032f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80032dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e0:	f383 8811 	msr	BASEPRI, r3
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	623b      	str	r3, [r7, #32]
}
 80032ee:	bf00      	nop
 80032f0:	bf00      	nop
 80032f2:	e7fd      	b.n	80032f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <xQueueGenericCreateStatic+0x84>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <xQueueGenericCreateStatic+0x88>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <xQueueGenericCreateStatic+0x8a>
 8003304:	2300      	movs	r3, #0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10b      	bne.n	8003322 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800330a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800330e:	f383 8811 	msr	BASEPRI, r3
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	61fb      	str	r3, [r7, #28]
}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	e7fd      	b.n	800331e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003322:	2348      	movs	r3, #72	@ 0x48
 8003324:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b48      	cmp	r3, #72	@ 0x48
 800332a:	d00b      	beq.n	8003344 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800332c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	61bb      	str	r3, [r7, #24]
}
 800333e:	bf00      	nop
 8003340:	bf00      	nop
 8003342:	e7fd      	b.n	8003340 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003344:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800334a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00d      	beq.n	800336c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003358:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800335c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f840 	bl	80033ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800336c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800336e:	4618      	mov	r0, r3
 8003370:	3730      	adds	r7, #48	@ 0x30
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003376:	b580      	push	{r7, lr}
 8003378:	b08a      	sub	sp, #40	@ 0x28
 800337a:	af02      	add	r7, sp, #8
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	4613      	mov	r3, r2
 8003382:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800338a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	613b      	str	r3, [r7, #16]
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	e7fd      	b.n	800339e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	3348      	adds	r3, #72	@ 0x48
 80033b0:	4618      	mov	r0, r3
 80033b2:	f001 fe5b 	bl	800506c <pvPortMalloc>
 80033b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d011      	beq.n	80033e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	3348      	adds	r3, #72	@ 0x48
 80033c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033d0:	79fa      	ldrb	r2, [r7, #7]
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	4613      	mov	r3, r2
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f805 	bl	80033ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033e2:	69bb      	ldr	r3, [r7, #24]
	}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3720      	adds	r7, #32
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d103      	bne.n	8003408 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	e002      	b.n	800340e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800341a:	2101      	movs	r1, #1
 800341c:	69b8      	ldr	r0, [r7, #24]
 800341e:	f7ff fec3 	bl	80031a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08e      	sub	sp, #56	@ 0x38
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800343a:	2300      	movs	r3, #0
 800343c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10b      	bne.n	8003460 <xQueueGenericSend+0x34>
	__asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800345a:	bf00      	nop
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d103      	bne.n	800346e <xQueueGenericSend+0x42>
 8003466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <xQueueGenericSend+0x46>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <xQueueGenericSend+0x48>
 8003472:	2300      	movs	r3, #0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <xQueueGenericSend+0x64>
	__asm volatile
 8003478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800348a:	bf00      	nop
 800348c:	bf00      	nop
 800348e:	e7fd      	b.n	800348c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d103      	bne.n	800349e <xQueueGenericSend+0x72>
 8003496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <xQueueGenericSend+0x76>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <xQueueGenericSend+0x78>
 80034a2:	2300      	movs	r3, #0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10b      	bne.n	80034c0 <xQueueGenericSend+0x94>
	__asm volatile
 80034a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	623b      	str	r3, [r7, #32]
}
 80034ba:	bf00      	nop
 80034bc:	bf00      	nop
 80034be:	e7fd      	b.n	80034bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034c0:	f001 f95e 	bl	8004780 <xTaskGetSchedulerState>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d102      	bne.n	80034d0 <xQueueGenericSend+0xa4>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <xQueueGenericSend+0xa8>
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <xQueueGenericSend+0xaa>
 80034d4:	2300      	movs	r3, #0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10b      	bne.n	80034f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	61fb      	str	r3, [r7, #28]
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	e7fd      	b.n	80034ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034f2:	f001 fc99 	bl	8004e28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fe:	429a      	cmp	r2, r3
 8003500:	d302      	bcc.n	8003508 <xQueueGenericSend+0xdc>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d129      	bne.n	800355c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	68b9      	ldr	r1, [r7, #8]
 800350c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800350e:	f000 fa47 	bl	80039a0 <prvCopyDataToQueue>
 8003512:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	2b00      	cmp	r3, #0
 800351a:	d010      	beq.n	800353e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800351c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351e:	3324      	adds	r3, #36	@ 0x24
 8003520:	4618      	mov	r0, r3
 8003522:	f000 ff67 	bl	80043f4 <xTaskRemoveFromEventList>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d013      	beq.n	8003554 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800352c:	4b3f      	ldr	r3, [pc, #252]	@ (800362c <xQueueGenericSend+0x200>)
 800352e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	e00a      	b.n	8003554 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800353e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003544:	4b39      	ldr	r3, [pc, #228]	@ (800362c <xQueueGenericSend+0x200>)
 8003546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003554:	f001 fc9a 	bl	8004e8c <vPortExitCritical>
				return pdPASS;
 8003558:	2301      	movs	r3, #1
 800355a:	e063      	b.n	8003624 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d103      	bne.n	800356a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003562:	f001 fc93 	bl	8004e8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003566:	2300      	movs	r3, #0
 8003568:	e05c      	b.n	8003624 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800356a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356c:	2b00      	cmp	r3, #0
 800356e:	d106      	bne.n	800357e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	4618      	mov	r0, r3
 8003576:	f000 ffa1 	bl	80044bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800357a:	2301      	movs	r3, #1
 800357c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800357e:	f001 fc85 	bl	8004e8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003582:	f000 fd47 	bl	8004014 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003586:	f001 fc4f 	bl	8004e28 <vPortEnterCritical>
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003590:	b25b      	sxtb	r3, r3
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003596:	d103      	bne.n	80035a0 <xQueueGenericSend+0x174>
 8003598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035a6:	b25b      	sxtb	r3, r3
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d103      	bne.n	80035b6 <xQueueGenericSend+0x18a>
 80035ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035b6:	f001 fc69 	bl	8004e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035ba:	1d3a      	adds	r2, r7, #4
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 ff90 	bl	80044e8 <xTaskCheckForTimeOut>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d124      	bne.n	8003618 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035d0:	f000 fab8 	bl	8003b44 <prvIsQueueFull>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d018      	beq.n	800360c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035dc:	3310      	adds	r3, #16
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4611      	mov	r1, r2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fee0 	bl	80043a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035ea:	f000 fa43 	bl	8003a74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035ee:	f000 fd1f 	bl	8004030 <xTaskResumeAll>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f47f af7c 	bne.w	80034f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80035fa:	4b0c      	ldr	r3, [pc, #48]	@ (800362c <xQueueGenericSend+0x200>)
 80035fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	f3bf 8f6f 	isb	sy
 800360a:	e772      	b.n	80034f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800360c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800360e:	f000 fa31 	bl	8003a74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003612:	f000 fd0d 	bl	8004030 <xTaskResumeAll>
 8003616:	e76c      	b.n	80034f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003618:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800361a:	f000 fa2b 	bl	8003a74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800361e:	f000 fd07 	bl	8004030 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003622:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003624:	4618      	mov	r0, r3
 8003626:	3738      	adds	r7, #56	@ 0x38
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	e000ed04 	.word	0xe000ed04

08003630 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08e      	sub	sp, #56	@ 0x38
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10b      	bne.n	800365c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	623b      	str	r3, [r7, #32]
}
 8003656:	bf00      	nop
 8003658:	bf00      	nop
 800365a:	e7fd      	b.n	8003658 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800365c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00b      	beq.n	800367c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	61fb      	str	r3, [r7, #28]
}
 8003676:	bf00      	nop
 8003678:	bf00      	nop
 800367a:	e7fd      	b.n	8003678 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800367c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d103      	bne.n	800368c <xQueueGiveFromISR+0x5c>
 8003684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <xQueueGiveFromISR+0x60>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <xQueueGiveFromISR+0x62>
 8003690:	2300      	movs	r3, #0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10b      	bne.n	80036ae <xQueueGiveFromISR+0x7e>
	__asm volatile
 8003696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	61bb      	str	r3, [r7, #24]
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	e7fd      	b.n	80036aa <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036ae:	f001 fc9b 	bl	8004fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036b2:	f3ef 8211 	mrs	r2, BASEPRI
 80036b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	617a      	str	r2, [r7, #20]
 80036c8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036ca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80036d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036da:	429a      	cmp	r2, r3
 80036dc:	d22b      	bcs.n	8003736 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d112      	bne.n	8003720 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003704:	3324      	adds	r3, #36	@ 0x24
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fe74 	bl	80043f4 <xTaskRemoveFromEventList>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00e      	beq.n	8003730 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00b      	beq.n	8003730 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	e007      	b.n	8003730 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003720:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003724:	3301      	adds	r3, #1
 8003726:	b2db      	uxtb	r3, r3
 8003728:	b25a      	sxtb	r2, r3
 800372a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003730:	2301      	movs	r3, #1
 8003732:	637b      	str	r3, [r7, #52]	@ 0x34
 8003734:	e001      	b.n	800373a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003736:	2300      	movs	r3, #0
 8003738:	637b      	str	r3, [r7, #52]	@ 0x34
 800373a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800373c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003744:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003748:	4618      	mov	r0, r3
 800374a:	3738      	adds	r7, #56	@ 0x38
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08e      	sub	sp, #56	@ 0x38
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800375a:	2300      	movs	r3, #0
 800375c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003762:	2300      	movs	r3, #0
 8003764:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10b      	bne.n	8003784 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	623b      	str	r3, [r7, #32]
}
 800377e:	bf00      	nop
 8003780:	bf00      	nop
 8003782:	e7fd      	b.n	8003780 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00b      	beq.n	80037a4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	61fb      	str	r3, [r7, #28]
}
 800379e:	bf00      	nop
 80037a0:	bf00      	nop
 80037a2:	e7fd      	b.n	80037a0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037a4:	f000 ffec 	bl	8004780 <xTaskGetSchedulerState>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <xQueueSemaphoreTake+0x64>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <xQueueSemaphoreTake+0x68>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <xQueueSemaphoreTake+0x6a>
 80037b8:	2300      	movs	r3, #0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10b      	bne.n	80037d6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	61bb      	str	r3, [r7, #24]
}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	e7fd      	b.n	80037d2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037d6:	f001 fb27 	bl	8004e28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80037da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037de:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80037e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d024      	beq.n	8003830 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80037e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e8:	1e5a      	subs	r2, r3, #1
 80037ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ec:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d104      	bne.n	8003800 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80037f6:	f001 f96f 	bl	8004ad8 <pvTaskIncrementMutexHeldCount>
 80037fa:	4602      	mov	r2, r0
 80037fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00f      	beq.n	8003828 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380a:	3310      	adds	r3, #16
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fdf1 	bl	80043f4 <xTaskRemoveFromEventList>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d007      	beq.n	8003828 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003818:	4b54      	ldr	r3, [pc, #336]	@ (800396c <xQueueSemaphoreTake+0x21c>)
 800381a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003828:	f001 fb30 	bl	8004e8c <vPortExitCritical>
				return pdPASS;
 800382c:	2301      	movs	r3, #1
 800382e:	e098      	b.n	8003962 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d112      	bne.n	800385c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00b      	beq.n	8003854 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	617b      	str	r3, [r7, #20]
}
 800384e:	bf00      	nop
 8003850:	bf00      	nop
 8003852:	e7fd      	b.n	8003850 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003854:	f001 fb1a 	bl	8004e8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003858:	2300      	movs	r3, #0
 800385a:	e082      	b.n	8003962 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800385c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003862:	f107 030c 	add.w	r3, r7, #12
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fe28 	bl	80044bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800386c:	2301      	movs	r3, #1
 800386e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003870:	f001 fb0c 	bl	8004e8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003874:	f000 fbce 	bl	8004014 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003878:	f001 fad6 	bl	8004e28 <vPortEnterCritical>
 800387c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003882:	b25b      	sxtb	r3, r3
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d103      	bne.n	8003892 <xQueueSemaphoreTake+0x142>
 800388a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003894:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003898:	b25b      	sxtb	r3, r3
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d103      	bne.n	80038a8 <xQueueSemaphoreTake+0x158>
 80038a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038a8:	f001 faf0 	bl	8004e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038ac:	463a      	mov	r2, r7
 80038ae:	f107 030c 	add.w	r3, r7, #12
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fe17 	bl	80044e8 <xTaskCheckForTimeOut>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d132      	bne.n	8003926 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038c2:	f000 f929 	bl	8003b18 <prvIsQueueEmpty>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d026      	beq.n	800391a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d109      	bne.n	80038e8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80038d4:	f001 faa8 	bl	8004e28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 ff6d 	bl	80047bc <xTaskPriorityInherit>
 80038e2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80038e4:	f001 fad2 	bl	8004e8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ea:	3324      	adds	r3, #36	@ 0x24
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	4611      	mov	r1, r2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fd59 	bl	80043a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038f8:	f000 f8bc 	bl	8003a74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038fc:	f000 fb98 	bl	8004030 <xTaskResumeAll>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	f47f af67 	bne.w	80037d6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003908:	4b18      	ldr	r3, [pc, #96]	@ (800396c <xQueueSemaphoreTake+0x21c>)
 800390a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	e75d      	b.n	80037d6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800391a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800391c:	f000 f8aa 	bl	8003a74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003920:	f000 fb86 	bl	8004030 <xTaskResumeAll>
 8003924:	e757      	b.n	80037d6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003926:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003928:	f000 f8a4 	bl	8003a74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800392c:	f000 fb80 	bl	8004030 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003930:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003932:	f000 f8f1 	bl	8003b18 <prvIsQueueEmpty>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	f43f af4c 	beq.w	80037d6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800393e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00d      	beq.n	8003960 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003944:	f001 fa70 	bl	8004e28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003948:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800394a:	f000 f811 	bl	8003970 <prvGetDisinheritPriorityAfterTimeout>
 800394e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003956:	4618      	mov	r0, r3
 8003958:	f001 f82e 	bl	80049b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800395c:	f001 fa96 	bl	8004e8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003960:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003962:	4618      	mov	r0, r3
 8003964:	3738      	adds	r7, #56	@ 0x38
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	e000ed04 	.word	0xe000ed04

08003970 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	2b00      	cmp	r3, #0
 800397e:	d006      	beq.n	800398e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f1c3 0307 	rsb	r3, r3, #7
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	e001      	b.n	8003992 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003992:	68fb      	ldr	r3, [r7, #12]
	}
 8003994:	4618      	mov	r0, r3
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10d      	bne.n	80039da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d14d      	bne.n	8003a62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 ff6c 	bl	80048a8 <xTaskPriorityDisinherit>
 80039d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
 80039d8:	e043      	b.n	8003a62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d119      	bne.n	8003a14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6858      	ldr	r0, [r3, #4]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	461a      	mov	r2, r3
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	f001 fdb0 	bl	8005550 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	441a      	add	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d32b      	bcc.n	8003a62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	e026      	b.n	8003a62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	68d8      	ldr	r0, [r3, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	f001 fd96 	bl	8005550 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	425b      	negs	r3, r3
 8003a2e:	441a      	add	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d207      	bcs.n	8003a50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a48:	425b      	negs	r3, r3
 8003a4a:	441a      	add	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d105      	bne.n	8003a62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003a6a:	697b      	ldr	r3, [r7, #20]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a7c:	f001 f9d4 	bl	8004e28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a88:	e011      	b.n	8003aae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d012      	beq.n	8003ab8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3324      	adds	r3, #36	@ 0x24
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fcac 	bl	80043f4 <xTaskRemoveFromEventList>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003aa2:	f000 fd85 	bl	80045b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	dce9      	bgt.n	8003a8a <prvUnlockQueue+0x16>
 8003ab6:	e000      	b.n	8003aba <prvUnlockQueue+0x46>
					break;
 8003ab8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	22ff      	movs	r2, #255	@ 0xff
 8003abe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003ac2:	f001 f9e3 	bl	8004e8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ac6:	f001 f9af 	bl	8004e28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ad0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ad2:	e011      	b.n	8003af8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d012      	beq.n	8003b02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3310      	adds	r3, #16
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fc87 	bl	80043f4 <xTaskRemoveFromEventList>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003aec:	f000 fd60 	bl	80045b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003af0:	7bbb      	ldrb	r3, [r7, #14]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	dce9      	bgt.n	8003ad4 <prvUnlockQueue+0x60>
 8003b00:	e000      	b.n	8003b04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	22ff      	movs	r2, #255	@ 0xff
 8003b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003b0c:	f001 f9be 	bl	8004e8c <vPortExitCritical>
}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b20:	f001 f982 	bl	8004e28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d102      	bne.n	8003b32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e001      	b.n	8003b36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b36:	f001 f9a9 	bl	8004e8c <vPortExitCritical>

	return xReturn;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b4c:	f001 f96c 	bl	8004e28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d102      	bne.n	8003b62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	e001      	b.n	8003b66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b66:	f001 f991 	bl	8004e8c <vPortExitCritical>

	return xReturn;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08e      	sub	sp, #56	@ 0x38
 8003b78:	af04      	add	r7, sp, #16
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10b      	bne.n	8003ba0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	623b      	str	r3, [r7, #32]
}
 8003b9a:	bf00      	nop
 8003b9c:	bf00      	nop
 8003b9e:	e7fd      	b.n	8003b9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10b      	bne.n	8003bbe <xTaskCreateStatic+0x4a>
	__asm volatile
 8003ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003baa:	f383 8811 	msr	BASEPRI, r3
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	61fb      	str	r3, [r7, #28]
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	e7fd      	b.n	8003bba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003bbe:	23a0      	movs	r3, #160	@ 0xa0
 8003bc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	2ba0      	cmp	r3, #160	@ 0xa0
 8003bc6:	d00b      	beq.n	8003be0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	61bb      	str	r3, [r7, #24]
}
 8003bda:	bf00      	nop
 8003bdc:	bf00      	nop
 8003bde:	e7fd      	b.n	8003bdc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003be0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01e      	beq.n	8003c26 <xTaskCreateStatic+0xb2>
 8003be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d01b      	beq.n	8003c26 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bf6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c00:	2300      	movs	r3, #0
 8003c02:	9303      	str	r3, [sp, #12]
 8003c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c06:	9302      	str	r3, [sp, #8]
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	9301      	str	r3, [sp, #4]
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f851 	bl	8003cc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c20:	f000 f8ee 	bl	8003e00 <prvAddNewTaskToReadyList>
 8003c24:	e001      	b.n	8003c2a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c2a:	697b      	ldr	r3, [r7, #20]
	}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3728      	adds	r7, #40	@ 0x28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08c      	sub	sp, #48	@ 0x30
 8003c38:	af04      	add	r7, sp, #16
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	4613      	mov	r3, r2
 8003c42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c44:	88fb      	ldrh	r3, [r7, #6]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f001 fa0f 	bl	800506c <pvPortMalloc>
 8003c4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00e      	beq.n	8003c74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c56:	20a0      	movs	r0, #160	@ 0xa0
 8003c58:	f001 fa08 	bl	800506c <pvPortMalloc>
 8003c5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c6a:	e005      	b.n	8003c78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c6c:	6978      	ldr	r0, [r7, #20]
 8003c6e:	f001 facb 	bl	8005208 <vPortFree>
 8003c72:	e001      	b.n	8003c78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d017      	beq.n	8003cae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c86:	88fa      	ldrh	r2, [r7, #6]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	9303      	str	r3, [sp, #12]
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	9302      	str	r3, [sp, #8]
 8003c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	68b9      	ldr	r1, [r7, #8]
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f80f 	bl	8003cc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ca2:	69f8      	ldr	r0, [r7, #28]
 8003ca4:	f000 f8ac 	bl	8003e00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	e002      	b.n	8003cb4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003cb4:	69bb      	ldr	r3, [r7, #24]
	}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3720      	adds	r7, #32
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	f023 0307 	bic.w	r3, r3, #7
 8003ce6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00b      	beq.n	8003d0a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	617b      	str	r3, [r7, #20]
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
 8003d08:	e7fd      	b.n	8003d06 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01f      	beq.n	8003d50 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d10:	2300      	movs	r3, #0
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	e012      	b.n	8003d3c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	7819      	ldrb	r1, [r3, #0]
 8003d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4413      	add	r3, r2
 8003d24:	3334      	adds	r3, #52	@ 0x34
 8003d26:	460a      	mov	r2, r1
 8003d28:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	4413      	add	r3, r2
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d006      	beq.n	8003d44 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	2b0f      	cmp	r3, #15
 8003d40:	d9e9      	bls.n	8003d16 <prvInitialiseNewTask+0x56>
 8003d42:	e000      	b.n	8003d46 <prvInitialiseNewTask+0x86>
			{
				break;
 8003d44:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d4e:	e003      	b.n	8003d58 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5a:	2b06      	cmp	r3, #6
 8003d5c:	d901      	bls.n	8003d62 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d5e:	2306      	movs	r3, #6
 8003d60:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d66:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d6c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d70:	2200      	movs	r2, #0
 8003d72:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d76:	3304      	adds	r3, #4
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff f980 	bl	800307e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d80:	3318      	adds	r3, #24
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff f97b 	bl	800307e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d90:	f1c3 0207 	rsb	r2, r3, #7
 8003d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d9c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da0:	2200      	movs	r2, #0
 8003da2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db0:	334c      	adds	r3, #76	@ 0x4c
 8003db2:	224c      	movs	r2, #76	@ 0x4c
 8003db4:	2100      	movs	r1, #0
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 fb46 	bl	8005448 <memset>
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8003df4 <prvInitialiseNewTask+0x134>)
 8003dc0:	651a      	str	r2, [r3, #80]	@ 0x50
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8003df8 <prvInitialiseNewTask+0x138>)
 8003dc6:	655a      	str	r2, [r3, #84]	@ 0x54
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dca:	4a0c      	ldr	r2, [pc, #48]	@ (8003dfc <prvInitialiseNewTask+0x13c>)
 8003dcc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	68f9      	ldr	r1, [r7, #12]
 8003dd2:	69b8      	ldr	r0, [r7, #24]
 8003dd4:	f000 fefa 	bl	8004bcc <pxPortInitialiseStack>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ddc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003de8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dea:	bf00      	nop
 8003dec:	3720      	adds	r7, #32
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20004110 	.word	0x20004110
 8003df8:	20004178 	.word	0x20004178
 8003dfc:	200041e0 	.word	0x200041e0

08003e00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e08:	f001 f80e 	bl	8004e28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb8 <prvAddNewTaskToReadyList+0xb8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3301      	adds	r3, #1
 8003e12:	4a29      	ldr	r2, [pc, #164]	@ (8003eb8 <prvAddNewTaskToReadyList+0xb8>)
 8003e14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e16:	4b29      	ldr	r3, [pc, #164]	@ (8003ebc <prvAddNewTaskToReadyList+0xbc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e1e:	4a27      	ldr	r2, [pc, #156]	@ (8003ebc <prvAddNewTaskToReadyList+0xbc>)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e24:	4b24      	ldr	r3, [pc, #144]	@ (8003eb8 <prvAddNewTaskToReadyList+0xb8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d110      	bne.n	8003e4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e2c:	f000 fbe4 	bl	80045f8 <prvInitialiseTaskLists>
 8003e30:	e00d      	b.n	8003e4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e32:	4b23      	ldr	r3, [pc, #140]	@ (8003ec0 <prvAddNewTaskToReadyList+0xc0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d109      	bne.n	8003e4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e3a:	4b20      	ldr	r3, [pc, #128]	@ (8003ebc <prvAddNewTaskToReadyList+0xbc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d802      	bhi.n	8003e4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e48:	4a1c      	ldr	r2, [pc, #112]	@ (8003ebc <prvAddNewTaskToReadyList+0xbc>)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec4 <prvAddNewTaskToReadyList+0xc4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3301      	adds	r3, #1
 8003e54:	4a1b      	ldr	r2, [pc, #108]	@ (8003ec4 <prvAddNewTaskToReadyList+0xc4>)
 8003e56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	4b19      	ldr	r3, [pc, #100]	@ (8003ec8 <prvAddNewTaskToReadyList+0xc8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	4a18      	ldr	r2, [pc, #96]	@ (8003ec8 <prvAddNewTaskToReadyList+0xc8>)
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4a15      	ldr	r2, [pc, #84]	@ (8003ecc <prvAddNewTaskToReadyList+0xcc>)
 8003e78:	441a      	add	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4610      	mov	r0, r2
 8003e82:	f7ff f909 	bl	8003098 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e86:	f001 f801 	bl	8004e8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec0 <prvAddNewTaskToReadyList+0xc0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00e      	beq.n	8003eb0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e92:	4b0a      	ldr	r3, [pc, #40]	@ (8003ebc <prvAddNewTaskToReadyList+0xbc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d207      	bcs.n	8003eb0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed0 <prvAddNewTaskToReadyList+0xd0>)
 8003ea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	200004bc 	.word	0x200004bc
 8003ebc:	200003bc 	.word	0x200003bc
 8003ec0:	200004c8 	.word	0x200004c8
 8003ec4:	200004d8 	.word	0x200004d8
 8003ec8:	200004c4 	.word	0x200004c4
 8003ecc:	200003c0 	.word	0x200003c0
 8003ed0:	e000ed04 	.word	0xe000ed04

08003ed4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d018      	beq.n	8003f18 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ee6:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <vTaskDelay+0x64>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00b      	beq.n	8003f06 <vTaskDelay+0x32>
	__asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	60bb      	str	r3, [r7, #8]
}
 8003f00:	bf00      	nop
 8003f02:	bf00      	nop
 8003f04:	e7fd      	b.n	8003f02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f06:	f000 f885 	bl	8004014 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 fdf7 	bl	8004b00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f12:	f000 f88d 	bl	8004030 <xTaskResumeAll>
 8003f16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d107      	bne.n	8003f2e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003f1e:	4b07      	ldr	r3, [pc, #28]	@ (8003f3c <vTaskDelay+0x68>)
 8003f20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f2e:	bf00      	nop
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	200004e4 	.word	0x200004e4
 8003f3c:	e000ed04 	.word	0xe000ed04

08003f40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	@ 0x28
 8003f44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f4e:	463a      	mov	r2, r7
 8003f50:	1d39      	adds	r1, r7, #4
 8003f52:	f107 0308 	add.w	r3, r7, #8
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fc fab2 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f5c:	6839      	ldr	r1, [r7, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	9202      	str	r2, [sp, #8]
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	2300      	movs	r3, #0
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	460a      	mov	r2, r1
 8003f6e:	4921      	ldr	r1, [pc, #132]	@ (8003ff4 <vTaskStartScheduler+0xb4>)
 8003f70:	4821      	ldr	r0, [pc, #132]	@ (8003ff8 <vTaskStartScheduler+0xb8>)
 8003f72:	f7ff fdff 	bl	8003b74 <xTaskCreateStatic>
 8003f76:	4603      	mov	r3, r0
 8003f78:	4a20      	ldr	r2, [pc, #128]	@ (8003ffc <vTaskStartScheduler+0xbc>)
 8003f7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003ffc <vTaskStartScheduler+0xbc>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f84:	2301      	movs	r3, #1
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	e001      	b.n	8003f8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d11b      	bne.n	8003fcc <vTaskStartScheduler+0x8c>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	613b      	str	r3, [r7, #16]
}
 8003fa6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fa8:	4b15      	ldr	r3, [pc, #84]	@ (8004000 <vTaskStartScheduler+0xc0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	334c      	adds	r3, #76	@ 0x4c
 8003fae:	4a15      	ldr	r2, [pc, #84]	@ (8004004 <vTaskStartScheduler+0xc4>)
 8003fb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fb2:	4b15      	ldr	r3, [pc, #84]	@ (8004008 <vTaskStartScheduler+0xc8>)
 8003fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fba:	4b14      	ldr	r3, [pc, #80]	@ (800400c <vTaskStartScheduler+0xcc>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fc0:	4b13      	ldr	r3, [pc, #76]	@ (8004010 <vTaskStartScheduler+0xd0>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003fc6:	f000 fe8b 	bl	8004ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003fca:	e00f      	b.n	8003fec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d10b      	bne.n	8003fec <vTaskStartScheduler+0xac>
	__asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	60fb      	str	r3, [r7, #12]
}
 8003fe6:	bf00      	nop
 8003fe8:	bf00      	nop
 8003fea:	e7fd      	b.n	8003fe8 <vTaskStartScheduler+0xa8>
}
 8003fec:	bf00      	nop
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	08005664 	.word	0x08005664
 8003ff8:	080045c9 	.word	0x080045c9
 8003ffc:	200004e0 	.word	0x200004e0
 8004000:	200003bc 	.word	0x200003bc
 8004004:	20000010 	.word	0x20000010
 8004008:	200004dc 	.word	0x200004dc
 800400c:	200004c8 	.word	0x200004c8
 8004010:	200004c0 	.word	0x200004c0

08004014 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004018:	4b04      	ldr	r3, [pc, #16]	@ (800402c <vTaskSuspendAll+0x18>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3301      	adds	r3, #1
 800401e:	4a03      	ldr	r2, [pc, #12]	@ (800402c <vTaskSuspendAll+0x18>)
 8004020:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004022:	bf00      	nop
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	200004e4 	.word	0x200004e4

08004030 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800403e:	4b42      	ldr	r3, [pc, #264]	@ (8004148 <xTaskResumeAll+0x118>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10b      	bne.n	800405e <xTaskResumeAll+0x2e>
	__asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	603b      	str	r3, [r7, #0]
}
 8004058:	bf00      	nop
 800405a:	bf00      	nop
 800405c:	e7fd      	b.n	800405a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800405e:	f000 fee3 	bl	8004e28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004062:	4b39      	ldr	r3, [pc, #228]	@ (8004148 <xTaskResumeAll+0x118>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3b01      	subs	r3, #1
 8004068:	4a37      	ldr	r2, [pc, #220]	@ (8004148 <xTaskResumeAll+0x118>)
 800406a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800406c:	4b36      	ldr	r3, [pc, #216]	@ (8004148 <xTaskResumeAll+0x118>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d161      	bne.n	8004138 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004074:	4b35      	ldr	r3, [pc, #212]	@ (800414c <xTaskResumeAll+0x11c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d05d      	beq.n	8004138 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800407c:	e02e      	b.n	80040dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800407e:	4b34      	ldr	r3, [pc, #208]	@ (8004150 <xTaskResumeAll+0x120>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3318      	adds	r3, #24
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff f861 	bl	8003152 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3304      	adds	r3, #4
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff f85c 	bl	8003152 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409e:	2201      	movs	r2, #1
 80040a0:	409a      	lsls	r2, r3
 80040a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004154 <xTaskResumeAll+0x124>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004154 <xTaskResumeAll+0x124>)
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4a27      	ldr	r2, [pc, #156]	@ (8004158 <xTaskResumeAll+0x128>)
 80040ba:	441a      	add	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3304      	adds	r3, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4610      	mov	r0, r2
 80040c4:	f7fe ffe8 	bl	8003098 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040cc:	4b23      	ldr	r3, [pc, #140]	@ (800415c <xTaskResumeAll+0x12c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d302      	bcc.n	80040dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80040d6:	4b22      	ldr	r3, [pc, #136]	@ (8004160 <xTaskResumeAll+0x130>)
 80040d8:	2201      	movs	r2, #1
 80040da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040dc:	4b1c      	ldr	r3, [pc, #112]	@ (8004150 <xTaskResumeAll+0x120>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1cc      	bne.n	800407e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040ea:	f000 fb29 	bl	8004740 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004164 <xTaskResumeAll+0x134>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d010      	beq.n	800411c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040fa:	f000 f837 	bl	800416c <xTaskIncrementTick>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004104:	4b16      	ldr	r3, [pc, #88]	@ (8004160 <xTaskResumeAll+0x130>)
 8004106:	2201      	movs	r2, #1
 8004108:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3b01      	subs	r3, #1
 800410e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f1      	bne.n	80040fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004116:	4b13      	ldr	r3, [pc, #76]	@ (8004164 <xTaskResumeAll+0x134>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800411c:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <xTaskResumeAll+0x130>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d009      	beq.n	8004138 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004124:	2301      	movs	r3, #1
 8004126:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004128:	4b0f      	ldr	r3, [pc, #60]	@ (8004168 <xTaskResumeAll+0x138>)
 800412a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004138:	f000 fea8 	bl	8004e8c <vPortExitCritical>

	return xAlreadyYielded;
 800413c:	68bb      	ldr	r3, [r7, #8]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	200004e4 	.word	0x200004e4
 800414c:	200004bc 	.word	0x200004bc
 8004150:	2000047c 	.word	0x2000047c
 8004154:	200004c4 	.word	0x200004c4
 8004158:	200003c0 	.word	0x200003c0
 800415c:	200003bc 	.word	0x200003bc
 8004160:	200004d0 	.word	0x200004d0
 8004164:	200004cc 	.word	0x200004cc
 8004168:	e000ed04 	.word	0xe000ed04

0800416c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004176:	4b4f      	ldr	r3, [pc, #316]	@ (80042b4 <xTaskIncrementTick+0x148>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	f040 808f 	bne.w	800429e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004180:	4b4d      	ldr	r3, [pc, #308]	@ (80042b8 <xTaskIncrementTick+0x14c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3301      	adds	r3, #1
 8004186:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004188:	4a4b      	ldr	r2, [pc, #300]	@ (80042b8 <xTaskIncrementTick+0x14c>)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d121      	bne.n	80041d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004194:	4b49      	ldr	r3, [pc, #292]	@ (80042bc <xTaskIncrementTick+0x150>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	603b      	str	r3, [r7, #0]
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	e7fd      	b.n	80041b2 <xTaskIncrementTick+0x46>
 80041b6:	4b41      	ldr	r3, [pc, #260]	@ (80042bc <xTaskIncrementTick+0x150>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	4b40      	ldr	r3, [pc, #256]	@ (80042c0 <xTaskIncrementTick+0x154>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a3e      	ldr	r2, [pc, #248]	@ (80042bc <xTaskIncrementTick+0x150>)
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	4a3e      	ldr	r2, [pc, #248]	@ (80042c0 <xTaskIncrementTick+0x154>)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b3e      	ldr	r3, [pc, #248]	@ (80042c4 <xTaskIncrementTick+0x158>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3301      	adds	r3, #1
 80041d0:	4a3c      	ldr	r2, [pc, #240]	@ (80042c4 <xTaskIncrementTick+0x158>)
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	f000 fab4 	bl	8004740 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041d8:	4b3b      	ldr	r3, [pc, #236]	@ (80042c8 <xTaskIncrementTick+0x15c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d348      	bcc.n	8004274 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041e2:	4b36      	ldr	r3, [pc, #216]	@ (80042bc <xTaskIncrementTick+0x150>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d104      	bne.n	80041f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ec:	4b36      	ldr	r3, [pc, #216]	@ (80042c8 <xTaskIncrementTick+0x15c>)
 80041ee:	f04f 32ff 	mov.w	r2, #4294967295
 80041f2:	601a      	str	r2, [r3, #0]
					break;
 80041f4:	e03e      	b.n	8004274 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041f6:	4b31      	ldr	r3, [pc, #196]	@ (80042bc <xTaskIncrementTick+0x150>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d203      	bcs.n	8004216 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800420e:	4a2e      	ldr	r2, [pc, #184]	@ (80042c8 <xTaskIncrementTick+0x15c>)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004214:	e02e      	b.n	8004274 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	3304      	adds	r3, #4
 800421a:	4618      	mov	r0, r3
 800421c:	f7fe ff99 	bl	8003152 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004224:	2b00      	cmp	r3, #0
 8004226:	d004      	beq.n	8004232 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	3318      	adds	r3, #24
 800422c:	4618      	mov	r0, r3
 800422e:	f7fe ff90 	bl	8003152 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004236:	2201      	movs	r2, #1
 8004238:	409a      	lsls	r2, r3
 800423a:	4b24      	ldr	r3, [pc, #144]	@ (80042cc <xTaskIncrementTick+0x160>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	4a22      	ldr	r2, [pc, #136]	@ (80042cc <xTaskIncrementTick+0x160>)
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4a1f      	ldr	r2, [pc, #124]	@ (80042d0 <xTaskIncrementTick+0x164>)
 8004252:	441a      	add	r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	3304      	adds	r3, #4
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f7fe ff1c 	bl	8003098 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004264:	4b1b      	ldr	r3, [pc, #108]	@ (80042d4 <xTaskIncrementTick+0x168>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426a:	429a      	cmp	r2, r3
 800426c:	d3b9      	bcc.n	80041e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800426e:	2301      	movs	r3, #1
 8004270:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004272:	e7b6      	b.n	80041e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004274:	4b17      	ldr	r3, [pc, #92]	@ (80042d4 <xTaskIncrementTick+0x168>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800427a:	4915      	ldr	r1, [pc, #84]	@ (80042d0 <xTaskIncrementTick+0x164>)
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d901      	bls.n	8004290 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800428c:	2301      	movs	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004290:	4b11      	ldr	r3, [pc, #68]	@ (80042d8 <xTaskIncrementTick+0x16c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004298:	2301      	movs	r3, #1
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	e004      	b.n	80042a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800429e:	4b0f      	ldr	r3, [pc, #60]	@ (80042dc <xTaskIncrementTick+0x170>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3301      	adds	r3, #1
 80042a4:	4a0d      	ldr	r2, [pc, #52]	@ (80042dc <xTaskIncrementTick+0x170>)
 80042a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80042a8:	697b      	ldr	r3, [r7, #20]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	200004e4 	.word	0x200004e4
 80042b8:	200004c0 	.word	0x200004c0
 80042bc:	20000474 	.word	0x20000474
 80042c0:	20000478 	.word	0x20000478
 80042c4:	200004d4 	.word	0x200004d4
 80042c8:	200004dc 	.word	0x200004dc
 80042cc:	200004c4 	.word	0x200004c4
 80042d0:	200003c0 	.word	0x200003c0
 80042d4:	200003bc 	.word	0x200003bc
 80042d8:	200004d0 	.word	0x200004d0
 80042dc:	200004cc 	.word	0x200004cc

080042e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004390 <vTaskSwitchContext+0xb0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042ee:	4b29      	ldr	r3, [pc, #164]	@ (8004394 <vTaskSwitchContext+0xb4>)
 80042f0:	2201      	movs	r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042f4:	e045      	b.n	8004382 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80042f6:	4b27      	ldr	r3, [pc, #156]	@ (8004394 <vTaskSwitchContext+0xb4>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042fc:	4b26      	ldr	r3, [pc, #152]	@ (8004398 <vTaskSwitchContext+0xb8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	fab3 f383 	clz	r3, r3
 8004308:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800430a:	7afb      	ldrb	r3, [r7, #11]
 800430c:	f1c3 031f 	rsb	r3, r3, #31
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	4922      	ldr	r1, [pc, #136]	@ (800439c <vTaskSwitchContext+0xbc>)
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	607b      	str	r3, [r7, #4]
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	e7fd      	b.n	800433a <vTaskSwitchContext+0x5a>
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4a14      	ldr	r2, [pc, #80]	@ (800439c <vTaskSwitchContext+0xbc>)
 800434a:	4413      	add	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	605a      	str	r2, [r3, #4]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	3308      	adds	r3, #8
 8004360:	429a      	cmp	r2, r3
 8004362:	d104      	bne.n	800436e <vTaskSwitchContext+0x8e>
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4a0a      	ldr	r2, [pc, #40]	@ (80043a0 <vTaskSwitchContext+0xc0>)
 8004376:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004378:	4b09      	ldr	r3, [pc, #36]	@ (80043a0 <vTaskSwitchContext+0xc0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	334c      	adds	r3, #76	@ 0x4c
 800437e:	4a09      	ldr	r2, [pc, #36]	@ (80043a4 <vTaskSwitchContext+0xc4>)
 8004380:	6013      	str	r3, [r2, #0]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	200004e4 	.word	0x200004e4
 8004394:	200004d0 	.word	0x200004d0
 8004398:	200004c4 	.word	0x200004c4
 800439c:	200003c0 	.word	0x200003c0
 80043a0:	200003bc 	.word	0x200003bc
 80043a4:	20000010 	.word	0x20000010

080043a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80043b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	60fb      	str	r3, [r7, #12]
}
 80043ca:	bf00      	nop
 80043cc:	bf00      	nop
 80043ce:	e7fd      	b.n	80043cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043d0:	4b07      	ldr	r3, [pc, #28]	@ (80043f0 <vTaskPlaceOnEventList+0x48>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3318      	adds	r3, #24
 80043d6:	4619      	mov	r1, r3
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7fe fe81 	bl	80030e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043de:	2101      	movs	r1, #1
 80043e0:	6838      	ldr	r0, [r7, #0]
 80043e2:	f000 fb8d 	bl	8004b00 <prvAddCurrentTaskToDelayedList>
}
 80043e6:	bf00      	nop
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	200003bc 	.word	0x200003bc

080043f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10b      	bne.n	8004422 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	60fb      	str	r3, [r7, #12]
}
 800441c:	bf00      	nop
 800441e:	bf00      	nop
 8004420:	e7fd      	b.n	800441e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	3318      	adds	r3, #24
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe fe93 	bl	8003152 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800442c:	4b1d      	ldr	r3, [pc, #116]	@ (80044a4 <xTaskRemoveFromEventList+0xb0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d11c      	bne.n	800446e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	3304      	adds	r3, #4
 8004438:	4618      	mov	r0, r3
 800443a:	f7fe fe8a 	bl	8003152 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004442:	2201      	movs	r2, #1
 8004444:	409a      	lsls	r2, r3
 8004446:	4b18      	ldr	r3, [pc, #96]	@ (80044a8 <xTaskRemoveFromEventList+0xb4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4313      	orrs	r3, r2
 800444c:	4a16      	ldr	r2, [pc, #88]	@ (80044a8 <xTaskRemoveFromEventList+0xb4>)
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4a13      	ldr	r2, [pc, #76]	@ (80044ac <xTaskRemoveFromEventList+0xb8>)
 800445e:	441a      	add	r2, r3
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	3304      	adds	r3, #4
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f7fe fe16 	bl	8003098 <vListInsertEnd>
 800446c:	e005      	b.n	800447a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	3318      	adds	r3, #24
 8004472:	4619      	mov	r1, r3
 8004474:	480e      	ldr	r0, [pc, #56]	@ (80044b0 <xTaskRemoveFromEventList+0xbc>)
 8004476:	f7fe fe0f 	bl	8003098 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800447e:	4b0d      	ldr	r3, [pc, #52]	@ (80044b4 <xTaskRemoveFromEventList+0xc0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004484:	429a      	cmp	r2, r3
 8004486:	d905      	bls.n	8004494 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004488:	2301      	movs	r3, #1
 800448a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800448c:	4b0a      	ldr	r3, [pc, #40]	@ (80044b8 <xTaskRemoveFromEventList+0xc4>)
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e001      	b.n	8004498 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004498:	697b      	ldr	r3, [r7, #20]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	200004e4 	.word	0x200004e4
 80044a8:	200004c4 	.word	0x200004c4
 80044ac:	200003c0 	.word	0x200003c0
 80044b0:	2000047c 	.word	0x2000047c
 80044b4:	200003bc 	.word	0x200003bc
 80044b8:	200004d0 	.word	0x200004d0

080044bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044c4:	4b06      	ldr	r3, [pc, #24]	@ (80044e0 <vTaskInternalSetTimeOutState+0x24>)
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80044cc:	4b05      	ldr	r3, [pc, #20]	@ (80044e4 <vTaskInternalSetTimeOutState+0x28>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	605a      	str	r2, [r3, #4]
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	200004d4 	.word	0x200004d4
 80044e4:	200004c0 	.word	0x200004c0

080044e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10b      	bne.n	8004510 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	613b      	str	r3, [r7, #16]
}
 800450a:	bf00      	nop
 800450c:	bf00      	nop
 800450e:	e7fd      	b.n	800450c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10b      	bne.n	800452e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	60fb      	str	r3, [r7, #12]
}
 8004528:	bf00      	nop
 800452a:	bf00      	nop
 800452c:	e7fd      	b.n	800452a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800452e:	f000 fc7b 	bl	8004e28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004532:	4b1d      	ldr	r3, [pc, #116]	@ (80045a8 <xTaskCheckForTimeOut+0xc0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	d102      	bne.n	8004552 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800454c:	2300      	movs	r3, #0
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	e023      	b.n	800459a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	4b15      	ldr	r3, [pc, #84]	@ (80045ac <xTaskCheckForTimeOut+0xc4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d007      	beq.n	800456e <xTaskCheckForTimeOut+0x86>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	429a      	cmp	r2, r3
 8004566:	d302      	bcc.n	800456e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004568:	2301      	movs	r3, #1
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	e015      	b.n	800459a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	429a      	cmp	r2, r3
 8004576:	d20b      	bcs.n	8004590 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	1ad2      	subs	r2, r2, r3
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ff99 	bl	80044bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
 800458e:	e004      	b.n	800459a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004596:	2301      	movs	r3, #1
 8004598:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800459a:	f000 fc77 	bl	8004e8c <vPortExitCritical>

	return xReturn;
 800459e:	69fb      	ldr	r3, [r7, #28]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	200004c0 	.word	0x200004c0
 80045ac:	200004d4 	.word	0x200004d4

080045b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045b4:	4b03      	ldr	r3, [pc, #12]	@ (80045c4 <vTaskMissedYield+0x14>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
}
 80045ba:	bf00      	nop
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	200004d0 	.word	0x200004d0

080045c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045d0:	f000 f852 	bl	8004678 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045d4:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <prvIdleTask+0x28>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d9f9      	bls.n	80045d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80045dc:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <prvIdleTask+0x2c>)
 80045de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045ec:	e7f0      	b.n	80045d0 <prvIdleTask+0x8>
 80045ee:	bf00      	nop
 80045f0:	200003c0 	.word	0x200003c0
 80045f4:	e000ed04 	.word	0xe000ed04

080045f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045fe:	2300      	movs	r3, #0
 8004600:	607b      	str	r3, [r7, #4]
 8004602:	e00c      	b.n	800461e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4a12      	ldr	r2, [pc, #72]	@ (8004658 <prvInitialiseTaskLists+0x60>)
 8004610:	4413      	add	r3, r2
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe fd13 	bl	800303e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3301      	adds	r3, #1
 800461c:	607b      	str	r3, [r7, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b06      	cmp	r3, #6
 8004622:	d9ef      	bls.n	8004604 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004624:	480d      	ldr	r0, [pc, #52]	@ (800465c <prvInitialiseTaskLists+0x64>)
 8004626:	f7fe fd0a 	bl	800303e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800462a:	480d      	ldr	r0, [pc, #52]	@ (8004660 <prvInitialiseTaskLists+0x68>)
 800462c:	f7fe fd07 	bl	800303e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004630:	480c      	ldr	r0, [pc, #48]	@ (8004664 <prvInitialiseTaskLists+0x6c>)
 8004632:	f7fe fd04 	bl	800303e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004636:	480c      	ldr	r0, [pc, #48]	@ (8004668 <prvInitialiseTaskLists+0x70>)
 8004638:	f7fe fd01 	bl	800303e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800463c:	480b      	ldr	r0, [pc, #44]	@ (800466c <prvInitialiseTaskLists+0x74>)
 800463e:	f7fe fcfe 	bl	800303e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004642:	4b0b      	ldr	r3, [pc, #44]	@ (8004670 <prvInitialiseTaskLists+0x78>)
 8004644:	4a05      	ldr	r2, [pc, #20]	@ (800465c <prvInitialiseTaskLists+0x64>)
 8004646:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004648:	4b0a      	ldr	r3, [pc, #40]	@ (8004674 <prvInitialiseTaskLists+0x7c>)
 800464a:	4a05      	ldr	r2, [pc, #20]	@ (8004660 <prvInitialiseTaskLists+0x68>)
 800464c:	601a      	str	r2, [r3, #0]
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	200003c0 	.word	0x200003c0
 800465c:	2000044c 	.word	0x2000044c
 8004660:	20000460 	.word	0x20000460
 8004664:	2000047c 	.word	0x2000047c
 8004668:	20000490 	.word	0x20000490
 800466c:	200004a8 	.word	0x200004a8
 8004670:	20000474 	.word	0x20000474
 8004674:	20000478 	.word	0x20000478

08004678 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800467e:	e019      	b.n	80046b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004680:	f000 fbd2 	bl	8004e28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004684:	4b10      	ldr	r3, [pc, #64]	@ (80046c8 <prvCheckTasksWaitingTermination+0x50>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3304      	adds	r3, #4
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe fd5e 	bl	8003152 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004696:	4b0d      	ldr	r3, [pc, #52]	@ (80046cc <prvCheckTasksWaitingTermination+0x54>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3b01      	subs	r3, #1
 800469c:	4a0b      	ldr	r2, [pc, #44]	@ (80046cc <prvCheckTasksWaitingTermination+0x54>)
 800469e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046a0:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <prvCheckTasksWaitingTermination+0x58>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	4a0a      	ldr	r2, [pc, #40]	@ (80046d0 <prvCheckTasksWaitingTermination+0x58>)
 80046a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046aa:	f000 fbef 	bl	8004e8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f810 	bl	80046d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046b4:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <prvCheckTasksWaitingTermination+0x58>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e1      	bne.n	8004680 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046bc:	bf00      	nop
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000490 	.word	0x20000490
 80046cc:	200004bc 	.word	0x200004bc
 80046d0:	200004a4 	.word	0x200004a4

080046d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	334c      	adds	r3, #76	@ 0x4c
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 feb9 	bl	8005458 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d108      	bne.n	8004702 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fd87 	bl	8005208 <vPortFree>
				vPortFree( pxTCB );
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fd84 	bl	8005208 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004700:	e019      	b.n	8004736 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004708:	2b01      	cmp	r3, #1
 800470a:	d103      	bne.n	8004714 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fd7b 	bl	8005208 <vPortFree>
	}
 8004712:	e010      	b.n	8004736 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800471a:	2b02      	cmp	r3, #2
 800471c:	d00b      	beq.n	8004736 <prvDeleteTCB+0x62>
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	60fb      	str	r3, [r7, #12]
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	e7fd      	b.n	8004732 <prvDeleteTCB+0x5e>
	}
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004746:	4b0c      	ldr	r3, [pc, #48]	@ (8004778 <prvResetNextTaskUnblockTime+0x38>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d104      	bne.n	800475a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004750:	4b0a      	ldr	r3, [pc, #40]	@ (800477c <prvResetNextTaskUnblockTime+0x3c>)
 8004752:	f04f 32ff 	mov.w	r2, #4294967295
 8004756:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004758:	e008      	b.n	800476c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800475a:	4b07      	ldr	r3, [pc, #28]	@ (8004778 <prvResetNextTaskUnblockTime+0x38>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	4a04      	ldr	r2, [pc, #16]	@ (800477c <prvResetNextTaskUnblockTime+0x3c>)
 800476a:	6013      	str	r3, [r2, #0]
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	20000474 	.word	0x20000474
 800477c:	200004dc 	.word	0x200004dc

08004780 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004786:	4b0b      	ldr	r3, [pc, #44]	@ (80047b4 <xTaskGetSchedulerState+0x34>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800478e:	2301      	movs	r3, #1
 8004790:	607b      	str	r3, [r7, #4]
 8004792:	e008      	b.n	80047a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004794:	4b08      	ldr	r3, [pc, #32]	@ (80047b8 <xTaskGetSchedulerState+0x38>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d102      	bne.n	80047a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800479c:	2302      	movs	r3, #2
 800479e:	607b      	str	r3, [r7, #4]
 80047a0:	e001      	b.n	80047a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047a2:	2300      	movs	r3, #0
 80047a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80047a6:	687b      	ldr	r3, [r7, #4]
	}
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	200004c8 	.word	0x200004c8
 80047b8:	200004e4 	.word	0x200004e4

080047bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d05e      	beq.n	8004890 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d6:	4b31      	ldr	r3, [pc, #196]	@ (800489c <xTaskPriorityInherit+0xe0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047dc:	429a      	cmp	r2, r3
 80047de:	d24e      	bcs.n	800487e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	db06      	blt.n	80047f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047e8:	4b2c      	ldr	r3, [pc, #176]	@ (800489c <xTaskPriorityInherit+0xe0>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ee:	f1c3 0207 	rsb	r2, r3, #7
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	6959      	ldr	r1, [r3, #20]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4a26      	ldr	r2, [pc, #152]	@ (80048a0 <xTaskPriorityInherit+0xe4>)
 8004808:	4413      	add	r3, r2
 800480a:	4299      	cmp	r1, r3
 800480c:	d12f      	bne.n	800486e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	3304      	adds	r3, #4
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe fc9d 	bl	8003152 <uxListRemove>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10a      	bne.n	8004834 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004822:	2201      	movs	r2, #1
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	43da      	mvns	r2, r3
 800482a:	4b1e      	ldr	r3, [pc, #120]	@ (80048a4 <xTaskPriorityInherit+0xe8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4013      	ands	r3, r2
 8004830:	4a1c      	ldr	r2, [pc, #112]	@ (80048a4 <xTaskPriorityInherit+0xe8>)
 8004832:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004834:	4b19      	ldr	r3, [pc, #100]	@ (800489c <xTaskPriorityInherit+0xe0>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004842:	2201      	movs	r2, #1
 8004844:	409a      	lsls	r2, r3
 8004846:	4b17      	ldr	r3, [pc, #92]	@ (80048a4 <xTaskPriorityInherit+0xe8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4313      	orrs	r3, r2
 800484c:	4a15      	ldr	r2, [pc, #84]	@ (80048a4 <xTaskPriorityInherit+0xe8>)
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004854:	4613      	mov	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4a10      	ldr	r2, [pc, #64]	@ (80048a0 <xTaskPriorityInherit+0xe4>)
 800485e:	441a      	add	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	3304      	adds	r3, #4
 8004864:	4619      	mov	r1, r3
 8004866:	4610      	mov	r0, r2
 8004868:	f7fe fc16 	bl	8003098 <vListInsertEnd>
 800486c:	e004      	b.n	8004878 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800486e:	4b0b      	ldr	r3, [pc, #44]	@ (800489c <xTaskPriorityInherit+0xe0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004878:	2301      	movs	r3, #1
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	e008      	b.n	8004890 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004882:	4b06      	ldr	r3, [pc, #24]	@ (800489c <xTaskPriorityInherit+0xe0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004888:	429a      	cmp	r2, r3
 800488a:	d201      	bcs.n	8004890 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800488c:	2301      	movs	r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004890:	68fb      	ldr	r3, [r7, #12]
	}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	200003bc 	.word	0x200003bc
 80048a0:	200003c0 	.word	0x200003c0
 80048a4:	200004c4 	.word	0x200004c4

080048a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80048b4:	2300      	movs	r3, #0
 80048b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d070      	beq.n	80049a0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80048be:	4b3b      	ldr	r3, [pc, #236]	@ (80049ac <xTaskPriorityDisinherit+0x104>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d00b      	beq.n	80048e0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	60fb      	str	r3, [r7, #12]
}
 80048da:	bf00      	nop
 80048dc:	bf00      	nop
 80048de:	e7fd      	b.n	80048dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10b      	bne.n	8004900 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	60bb      	str	r3, [r7, #8]
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	e7fd      	b.n	80048fc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004904:	1e5a      	subs	r2, r3, #1
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004912:	429a      	cmp	r2, r3
 8004914:	d044      	beq.n	80049a0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800491a:	2b00      	cmp	r3, #0
 800491c:	d140      	bne.n	80049a0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	3304      	adds	r3, #4
 8004922:	4618      	mov	r0, r3
 8004924:	f7fe fc15 	bl	8003152 <uxListRemove>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d115      	bne.n	800495a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004932:	491f      	ldr	r1, [pc, #124]	@ (80049b0 <xTaskPriorityDisinherit+0x108>)
 8004934:	4613      	mov	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10a      	bne.n	800495a <xTaskPriorityDisinherit+0xb2>
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004948:	2201      	movs	r2, #1
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	43da      	mvns	r2, r3
 8004950:	4b18      	ldr	r3, [pc, #96]	@ (80049b4 <xTaskPriorityDisinherit+0x10c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4013      	ands	r3, r2
 8004956:	4a17      	ldr	r2, [pc, #92]	@ (80049b4 <xTaskPriorityDisinherit+0x10c>)
 8004958:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004966:	f1c3 0207 	rsb	r2, r3, #7
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004972:	2201      	movs	r2, #1
 8004974:	409a      	lsls	r2, r3
 8004976:	4b0f      	ldr	r3, [pc, #60]	@ (80049b4 <xTaskPriorityDisinherit+0x10c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4313      	orrs	r3, r2
 800497c:	4a0d      	ldr	r2, [pc, #52]	@ (80049b4 <xTaskPriorityDisinherit+0x10c>)
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004984:	4613      	mov	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4a08      	ldr	r2, [pc, #32]	@ (80049b0 <xTaskPriorityDisinherit+0x108>)
 800498e:	441a      	add	r2, r3
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	3304      	adds	r3, #4
 8004994:	4619      	mov	r1, r3
 8004996:	4610      	mov	r0, r2
 8004998:	f7fe fb7e 	bl	8003098 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800499c:	2301      	movs	r3, #1
 800499e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049a0:	697b      	ldr	r3, [r7, #20]
	}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	200003bc 	.word	0x200003bc
 80049b0:	200003c0 	.word	0x200003c0
 80049b4:	200004c4 	.word	0x200004c4

080049b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80049c6:	2301      	movs	r3, #1
 80049c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d079      	beq.n	8004ac4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10b      	bne.n	80049f0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	60fb      	str	r3, [r7, #12]
}
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
 80049ee:	e7fd      	b.n	80049ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d902      	bls.n	8004a00 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	61fb      	str	r3, [r7, #28]
 80049fe:	e002      	b.n	8004a06 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a04:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d059      	beq.n	8004ac4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d154      	bne.n	8004ac4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004a1a:	4b2c      	ldr	r3, [pc, #176]	@ (8004acc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d10b      	bne.n	8004a3c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	60bb      	str	r3, [r7, #8]
}
 8004a36:	bf00      	nop
 8004a38:	bf00      	nop
 8004a3a:	e7fd      	b.n	8004a38 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a40:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	db04      	blt.n	8004a5a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f1c3 0207 	rsb	r2, r3, #7
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	6959      	ldr	r1, [r3, #20]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4a19      	ldr	r2, [pc, #100]	@ (8004ad0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004a6a:	4413      	add	r3, r2
 8004a6c:	4299      	cmp	r1, r3
 8004a6e:	d129      	bne.n	8004ac4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	3304      	adds	r3, #4
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fe fb6c 	bl	8003152 <uxListRemove>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a84:	2201      	movs	r2, #1
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	4b11      	ldr	r3, [pc, #68]	@ (8004ad4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4013      	ands	r3, r2
 8004a92:	4a10      	ldr	r2, [pc, #64]	@ (8004ad4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004a94:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	409a      	lsls	r2, r3
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8004ad4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4a06      	ldr	r2, [pc, #24]	@ (8004ad0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004ab6:	441a      	add	r2, r3
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f7fe faea 	bl	8003098 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ac4:	bf00      	nop
 8004ac6:	3720      	adds	r7, #32
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	200003bc 	.word	0x200003bc
 8004ad0:	200003c0 	.word	0x200003c0
 8004ad4:	200004c4 	.word	0x200004c4

08004ad8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004adc:	4b07      	ldr	r3, [pc, #28]	@ (8004afc <pvTaskIncrementMutexHeldCount+0x24>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d004      	beq.n	8004aee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004ae4:	4b05      	ldr	r3, [pc, #20]	@ (8004afc <pvTaskIncrementMutexHeldCount+0x24>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004aea:	3201      	adds	r2, #1
 8004aec:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004aee:	4b03      	ldr	r3, [pc, #12]	@ (8004afc <pvTaskIncrementMutexHeldCount+0x24>)
 8004af0:	681b      	ldr	r3, [r3, #0]
	}
 8004af2:	4618      	mov	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	200003bc 	.word	0x200003bc

08004b00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b0a:	4b29      	ldr	r3, [pc, #164]	@ (8004bb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b10:	4b28      	ldr	r3, [pc, #160]	@ (8004bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3304      	adds	r3, #4
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fe fb1b 	bl	8003152 <uxListRemove>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10b      	bne.n	8004b3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004b22:	4b24      	ldr	r3, [pc, #144]	@ (8004bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b28:	2201      	movs	r2, #1
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43da      	mvns	r2, r3
 8004b30:	4b21      	ldr	r3, [pc, #132]	@ (8004bb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4013      	ands	r3, r2
 8004b36:	4a20      	ldr	r2, [pc, #128]	@ (8004bb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b40:	d10a      	bne.n	8004b58 <prvAddCurrentTaskToDelayedList+0x58>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d007      	beq.n	8004b58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b48:	4b1a      	ldr	r3, [pc, #104]	@ (8004bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	4619      	mov	r1, r3
 8004b50:	481a      	ldr	r0, [pc, #104]	@ (8004bbc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004b52:	f7fe faa1 	bl	8003098 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b56:	e026      	b.n	8004ba6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b60:	4b14      	ldr	r3, [pc, #80]	@ (8004bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d209      	bcs.n	8004b84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b70:	4b13      	ldr	r3, [pc, #76]	@ (8004bc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	4b0f      	ldr	r3, [pc, #60]	@ (8004bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	f7fe faaf 	bl	80030e0 <vListInsert>
}
 8004b82:	e010      	b.n	8004ba6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b84:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4610      	mov	r0, r2
 8004b92:	f7fe faa5 	bl	80030e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b96:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d202      	bcs.n	8004ba6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ba0:	4a09      	ldr	r2, [pc, #36]	@ (8004bc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	6013      	str	r3, [r2, #0]
}
 8004ba6:	bf00      	nop
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	200004c0 	.word	0x200004c0
 8004bb4:	200003bc 	.word	0x200003bc
 8004bb8:	200004c4 	.word	0x200004c4
 8004bbc:	200004a8 	.word	0x200004a8
 8004bc0:	20000478 	.word	0x20000478
 8004bc4:	20000474 	.word	0x20000474
 8004bc8:	200004dc 	.word	0x200004dc

08004bcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3b04      	subs	r3, #4
 8004bdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	3b04      	subs	r3, #4
 8004bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f023 0201 	bic.w	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3b04      	subs	r3, #4
 8004bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8004c30 <pxPortInitialiseStack+0x64>)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3b14      	subs	r3, #20
 8004c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3b04      	subs	r3, #4
 8004c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f06f 0202 	mvn.w	r2, #2
 8004c1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3b20      	subs	r3, #32
 8004c20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c22:	68fb      	ldr	r3, [r7, #12]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	08004c35 	.word	0x08004c35

08004c34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c3e:	4b13      	ldr	r3, [pc, #76]	@ (8004c8c <prvTaskExitError+0x58>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c46:	d00b      	beq.n	8004c60 <prvTaskExitError+0x2c>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	60fb      	str	r3, [r7, #12]
}
 8004c5a:	bf00      	nop
 8004c5c:	bf00      	nop
 8004c5e:	e7fd      	b.n	8004c5c <prvTaskExitError+0x28>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	60bb      	str	r3, [r7, #8]
}
 8004c72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c74:	bf00      	nop
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0fc      	beq.n	8004c76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	2000000c 	.word	0x2000000c

08004c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c90:	4b07      	ldr	r3, [pc, #28]	@ (8004cb0 <pxCurrentTCBConst2>)
 8004c92:	6819      	ldr	r1, [r3, #0]
 8004c94:	6808      	ldr	r0, [r1, #0]
 8004c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9a:	f380 8809 	msr	PSP, r0
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f380 8811 	msr	BASEPRI, r0
 8004caa:	4770      	bx	lr
 8004cac:	f3af 8000 	nop.w

08004cb0 <pxCurrentTCBConst2>:
 8004cb0:	200003bc 	.word	0x200003bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop

08004cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004cb8:	4808      	ldr	r0, [pc, #32]	@ (8004cdc <prvPortStartFirstTask+0x24>)
 8004cba:	6800      	ldr	r0, [r0, #0]
 8004cbc:	6800      	ldr	r0, [r0, #0]
 8004cbe:	f380 8808 	msr	MSP, r0
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f380 8814 	msr	CONTROL, r0
 8004cca:	b662      	cpsie	i
 8004ccc:	b661      	cpsie	f
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	df00      	svc	0
 8004cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004cda:	bf00      	nop
 8004cdc:	e000ed08 	.word	0xe000ed08

08004ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ce6:	4b47      	ldr	r3, [pc, #284]	@ (8004e04 <xPortStartScheduler+0x124>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a47      	ldr	r2, [pc, #284]	@ (8004e08 <xPortStartScheduler+0x128>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d10b      	bne.n	8004d08 <xPortStartScheduler+0x28>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	613b      	str	r3, [r7, #16]
}
 8004d02:	bf00      	nop
 8004d04:	bf00      	nop
 8004d06:	e7fd      	b.n	8004d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d08:	4b3e      	ldr	r3, [pc, #248]	@ (8004e04 <xPortStartScheduler+0x124>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a3f      	ldr	r2, [pc, #252]	@ (8004e0c <xPortStartScheduler+0x12c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d10b      	bne.n	8004d2a <xPortStartScheduler+0x4a>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	60fb      	str	r3, [r7, #12]
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	e7fd      	b.n	8004d26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d2a:	4b39      	ldr	r3, [pc, #228]	@ (8004e10 <xPortStartScheduler+0x130>)
 8004d2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	22ff      	movs	r2, #255	@ 0xff
 8004d3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	4b31      	ldr	r3, [pc, #196]	@ (8004e14 <xPortStartScheduler+0x134>)
 8004d50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d52:	4b31      	ldr	r3, [pc, #196]	@ (8004e18 <xPortStartScheduler+0x138>)
 8004d54:	2207      	movs	r2, #7
 8004d56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d58:	e009      	b.n	8004d6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8004e18 <xPortStartScheduler+0x138>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	4a2d      	ldr	r2, [pc, #180]	@ (8004e18 <xPortStartScheduler+0x138>)
 8004d62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d6e:	78fb      	ldrb	r3, [r7, #3]
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d76:	2b80      	cmp	r3, #128	@ 0x80
 8004d78:	d0ef      	beq.n	8004d5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d7a:	4b27      	ldr	r3, [pc, #156]	@ (8004e18 <xPortStartScheduler+0x138>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f1c3 0307 	rsb	r3, r3, #7
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d00b      	beq.n	8004d9e <xPortStartScheduler+0xbe>
	__asm volatile
 8004d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	60bb      	str	r3, [r7, #8]
}
 8004d98:	bf00      	nop
 8004d9a:	bf00      	nop
 8004d9c:	e7fd      	b.n	8004d9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004e18 <xPortStartScheduler+0x138>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e18 <xPortStartScheduler+0x138>)
 8004da6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004da8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e18 <xPortStartScheduler+0x138>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004db0:	4a19      	ldr	r2, [pc, #100]	@ (8004e18 <xPortStartScheduler+0x138>)
 8004db2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004dbc:	4b17      	ldr	r3, [pc, #92]	@ (8004e1c <xPortStartScheduler+0x13c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a16      	ldr	r2, [pc, #88]	@ (8004e1c <xPortStartScheduler+0x13c>)
 8004dc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004dc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004dc8:	4b14      	ldr	r3, [pc, #80]	@ (8004e1c <xPortStartScheduler+0x13c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a13      	ldr	r2, [pc, #76]	@ (8004e1c <xPortStartScheduler+0x13c>)
 8004dce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004dd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004dd4:	f000 f8da 	bl	8004f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004dd8:	4b11      	ldr	r3, [pc, #68]	@ (8004e20 <xPortStartScheduler+0x140>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004dde:	f000 f8f9 	bl	8004fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004de2:	4b10      	ldr	r3, [pc, #64]	@ (8004e24 <xPortStartScheduler+0x144>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a0f      	ldr	r2, [pc, #60]	@ (8004e24 <xPortStartScheduler+0x144>)
 8004de8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004dec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004dee:	f7ff ff63 	bl	8004cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004df2:	f7ff fa75 	bl	80042e0 <vTaskSwitchContext>
	prvTaskExitError();
 8004df6:	f7ff ff1d 	bl	8004c34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	e000ed00 	.word	0xe000ed00
 8004e08:	410fc271 	.word	0x410fc271
 8004e0c:	410fc270 	.word	0x410fc270
 8004e10:	e000e400 	.word	0xe000e400
 8004e14:	200004e8 	.word	0x200004e8
 8004e18:	200004ec 	.word	0x200004ec
 8004e1c:	e000ed20 	.word	0xe000ed20
 8004e20:	2000000c 	.word	0x2000000c
 8004e24:	e000ef34 	.word	0xe000ef34

08004e28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	607b      	str	r3, [r7, #4]
}
 8004e40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e42:	4b10      	ldr	r3, [pc, #64]	@ (8004e84 <vPortEnterCritical+0x5c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3301      	adds	r3, #1
 8004e48:	4a0e      	ldr	r2, [pc, #56]	@ (8004e84 <vPortEnterCritical+0x5c>)
 8004e4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e84 <vPortEnterCritical+0x5c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d110      	bne.n	8004e76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e54:	4b0c      	ldr	r3, [pc, #48]	@ (8004e88 <vPortEnterCritical+0x60>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00b      	beq.n	8004e76 <vPortEnterCritical+0x4e>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	603b      	str	r3, [r7, #0]
}
 8004e70:	bf00      	nop
 8004e72:	bf00      	nop
 8004e74:	e7fd      	b.n	8004e72 <vPortEnterCritical+0x4a>
	}
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	2000000c 	.word	0x2000000c
 8004e88:	e000ed04 	.word	0xe000ed04

08004e8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e92:	4b12      	ldr	r3, [pc, #72]	@ (8004edc <vPortExitCritical+0x50>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10b      	bne.n	8004eb2 <vPortExitCritical+0x26>
	__asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	607b      	str	r3, [r7, #4]
}
 8004eac:	bf00      	nop
 8004eae:	bf00      	nop
 8004eb0:	e7fd      	b.n	8004eae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004edc <vPortExitCritical+0x50>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	4a08      	ldr	r2, [pc, #32]	@ (8004edc <vPortExitCritical+0x50>)
 8004eba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ebc:	4b07      	ldr	r3, [pc, #28]	@ (8004edc <vPortExitCritical+0x50>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d105      	bne.n	8004ed0 <vPortExitCritical+0x44>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f383 8811 	msr	BASEPRI, r3
}
 8004ece:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	2000000c 	.word	0x2000000c

08004ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ee0:	f3ef 8009 	mrs	r0, PSP
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	4b15      	ldr	r3, [pc, #84]	@ (8004f40 <pxCurrentTCBConst>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	f01e 0f10 	tst.w	lr, #16
 8004ef0:	bf08      	it	eq
 8004ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efa:	6010      	str	r0, [r2, #0]
 8004efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004f04:	f380 8811 	msr	BASEPRI, r0
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f7ff f9e6 	bl	80042e0 <vTaskSwitchContext>
 8004f14:	f04f 0000 	mov.w	r0, #0
 8004f18:	f380 8811 	msr	BASEPRI, r0
 8004f1c:	bc09      	pop	{r0, r3}
 8004f1e:	6819      	ldr	r1, [r3, #0]
 8004f20:	6808      	ldr	r0, [r1, #0]
 8004f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f26:	f01e 0f10 	tst.w	lr, #16
 8004f2a:	bf08      	it	eq
 8004f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f30:	f380 8809 	msr	PSP, r0
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	f3af 8000 	nop.w

08004f40 <pxCurrentTCBConst>:
 8004f40:	200003bc 	.word	0x200003bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop

08004f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	607b      	str	r3, [r7, #4]
}
 8004f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f62:	f7ff f903 	bl	800416c <xTaskIncrementTick>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f6c:	4b06      	ldr	r3, [pc, #24]	@ (8004f88 <SysTick_Handler+0x40>)
 8004f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	2300      	movs	r3, #0
 8004f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f383 8811 	msr	BASEPRI, r3
}
 8004f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f80:	bf00      	nop
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	e000ed04 	.word	0xe000ed04

08004f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f90:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc0 <vPortSetupTimerInterrupt+0x34>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f96:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc4 <vPortSetupTimerInterrupt+0x38>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc8 <vPortSetupTimerInterrupt+0x3c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8004fcc <vPortSetupTimerInterrupt+0x40>)
 8004fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa6:	099b      	lsrs	r3, r3, #6
 8004fa8:	4a09      	ldr	r2, [pc, #36]	@ (8004fd0 <vPortSetupTimerInterrupt+0x44>)
 8004faa:	3b01      	subs	r3, #1
 8004fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fae:	4b04      	ldr	r3, [pc, #16]	@ (8004fc0 <vPortSetupTimerInterrupt+0x34>)
 8004fb0:	2207      	movs	r2, #7
 8004fb2:	601a      	str	r2, [r3, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	e000e010 	.word	0xe000e010
 8004fc4:	e000e018 	.word	0xe000e018
 8004fc8:	20000000 	.word	0x20000000
 8004fcc:	10624dd3 	.word	0x10624dd3
 8004fd0:	e000e014 	.word	0xe000e014

08004fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004fe4 <vPortEnableVFP+0x10>
 8004fd8:	6801      	ldr	r1, [r0, #0]
 8004fda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004fde:	6001      	str	r1, [r0, #0]
 8004fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fe2:	bf00      	nop
 8004fe4:	e000ed88 	.word	0xe000ed88

08004fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fee:	f3ef 8305 	mrs	r3, IPSR
 8004ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b0f      	cmp	r3, #15
 8004ff8:	d915      	bls.n	8005026 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ffa:	4a18      	ldr	r2, [pc, #96]	@ (800505c <vPortValidateInterruptPriority+0x74>)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005004:	4b16      	ldr	r3, [pc, #88]	@ (8005060 <vPortValidateInterruptPriority+0x78>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	7afa      	ldrb	r2, [r7, #11]
 800500a:	429a      	cmp	r2, r3
 800500c:	d20b      	bcs.n	8005026 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	607b      	str	r3, [r7, #4]
}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	e7fd      	b.n	8005022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005026:	4b0f      	ldr	r3, [pc, #60]	@ (8005064 <vPortValidateInterruptPriority+0x7c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800502e:	4b0e      	ldr	r3, [pc, #56]	@ (8005068 <vPortValidateInterruptPriority+0x80>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d90b      	bls.n	800504e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	603b      	str	r3, [r7, #0]
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	e7fd      	b.n	800504a <vPortValidateInterruptPriority+0x62>
	}
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	e000e3f0 	.word	0xe000e3f0
 8005060:	200004e8 	.word	0x200004e8
 8005064:	e000ed0c 	.word	0xe000ed0c
 8005068:	200004ec 	.word	0x200004ec

0800506c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08a      	sub	sp, #40	@ 0x28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005074:	2300      	movs	r3, #0
 8005076:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005078:	f7fe ffcc 	bl	8004014 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800507c:	4b5c      	ldr	r3, [pc, #368]	@ (80051f0 <pvPortMalloc+0x184>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005084:	f000 f924 	bl	80052d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005088:	4b5a      	ldr	r3, [pc, #360]	@ (80051f4 <pvPortMalloc+0x188>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4013      	ands	r3, r2
 8005090:	2b00      	cmp	r3, #0
 8005092:	f040 8095 	bne.w	80051c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01e      	beq.n	80050da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800509c:	2208      	movs	r2, #8
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4413      	add	r3, r2
 80050a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d015      	beq.n	80050da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f023 0307 	bic.w	r3, r3, #7
 80050b4:	3308      	adds	r3, #8
 80050b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00b      	beq.n	80050da <pvPortMalloc+0x6e>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	617b      	str	r3, [r7, #20]
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	e7fd      	b.n	80050d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d06f      	beq.n	80051c0 <pvPortMalloc+0x154>
 80050e0:	4b45      	ldr	r3, [pc, #276]	@ (80051f8 <pvPortMalloc+0x18c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d86a      	bhi.n	80051c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050ea:	4b44      	ldr	r3, [pc, #272]	@ (80051fc <pvPortMalloc+0x190>)
 80050ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050ee:	4b43      	ldr	r3, [pc, #268]	@ (80051fc <pvPortMalloc+0x190>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050f4:	e004      	b.n	8005100 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	429a      	cmp	r2, r3
 8005108:	d903      	bls.n	8005112 <pvPortMalloc+0xa6>
 800510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f1      	bne.n	80050f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005112:	4b37      	ldr	r3, [pc, #220]	@ (80051f0 <pvPortMalloc+0x184>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005118:	429a      	cmp	r2, r3
 800511a:	d051      	beq.n	80051c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2208      	movs	r2, #8
 8005122:	4413      	add	r3, r2
 8005124:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	1ad2      	subs	r2, r2, r3
 8005136:	2308      	movs	r3, #8
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	429a      	cmp	r2, r3
 800513c:	d920      	bls.n	8005180 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800513e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4413      	add	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00b      	beq.n	8005168 <pvPortMalloc+0xfc>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	613b      	str	r3, [r7, #16]
}
 8005162:	bf00      	nop
 8005164:	bf00      	nop
 8005166:	e7fd      	b.n	8005164 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800517a:	69b8      	ldr	r0, [r7, #24]
 800517c:	f000 f90a 	bl	8005394 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005180:	4b1d      	ldr	r3, [pc, #116]	@ (80051f8 <pvPortMalloc+0x18c>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	4a1b      	ldr	r2, [pc, #108]	@ (80051f8 <pvPortMalloc+0x18c>)
 800518c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800518e:	4b1a      	ldr	r3, [pc, #104]	@ (80051f8 <pvPortMalloc+0x18c>)
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	4b1b      	ldr	r3, [pc, #108]	@ (8005200 <pvPortMalloc+0x194>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d203      	bcs.n	80051a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800519a:	4b17      	ldr	r3, [pc, #92]	@ (80051f8 <pvPortMalloc+0x18c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a18      	ldr	r2, [pc, #96]	@ (8005200 <pvPortMalloc+0x194>)
 80051a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	4b13      	ldr	r3, [pc, #76]	@ (80051f4 <pvPortMalloc+0x188>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80051b6:	4b13      	ldr	r3, [pc, #76]	@ (8005204 <pvPortMalloc+0x198>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3301      	adds	r3, #1
 80051bc:	4a11      	ldr	r2, [pc, #68]	@ (8005204 <pvPortMalloc+0x198>)
 80051be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051c0:	f7fe ff36 	bl	8004030 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00b      	beq.n	80051e6 <pvPortMalloc+0x17a>
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	60fb      	str	r3, [r7, #12]
}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
 80051e4:	e7fd      	b.n	80051e2 <pvPortMalloc+0x176>
	return pvReturn;
 80051e6:	69fb      	ldr	r3, [r7, #28]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3728      	adds	r7, #40	@ 0x28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	200040f8 	.word	0x200040f8
 80051f4:	2000410c 	.word	0x2000410c
 80051f8:	200040fc 	.word	0x200040fc
 80051fc:	200040f0 	.word	0x200040f0
 8005200:	20004100 	.word	0x20004100
 8005204:	20004104 	.word	0x20004104

08005208 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d04f      	beq.n	80052ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800521a:	2308      	movs	r3, #8
 800521c:	425b      	negs	r3, r3
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4413      	add	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	4b25      	ldr	r3, [pc, #148]	@ (80052c4 <vPortFree+0xbc>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4013      	ands	r3, r2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10b      	bne.n	800524e <vPortFree+0x46>
	__asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	60fb      	str	r3, [r7, #12]
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	e7fd      	b.n	800524a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00b      	beq.n	800526e <vPortFree+0x66>
	__asm volatile
 8005256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	60bb      	str	r3, [r7, #8]
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	e7fd      	b.n	800526a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	4b14      	ldr	r3, [pc, #80]	@ (80052c4 <vPortFree+0xbc>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4013      	ands	r3, r2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01e      	beq.n	80052ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d11a      	bne.n	80052ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	4b0e      	ldr	r3, [pc, #56]	@ (80052c4 <vPortFree+0xbc>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	43db      	mvns	r3, r3
 800528e:	401a      	ands	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005294:	f7fe febe 	bl	8004014 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	4b0a      	ldr	r3, [pc, #40]	@ (80052c8 <vPortFree+0xc0>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4413      	add	r3, r2
 80052a2:	4a09      	ldr	r2, [pc, #36]	@ (80052c8 <vPortFree+0xc0>)
 80052a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052a6:	6938      	ldr	r0, [r7, #16]
 80052a8:	f000 f874 	bl	8005394 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80052ac:	4b07      	ldr	r3, [pc, #28]	@ (80052cc <vPortFree+0xc4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3301      	adds	r3, #1
 80052b2:	4a06      	ldr	r2, [pc, #24]	@ (80052cc <vPortFree+0xc4>)
 80052b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80052b6:	f7fe febb 	bl	8004030 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052ba:	bf00      	nop
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	2000410c 	.word	0x2000410c
 80052c8:	200040fc 	.word	0x200040fc
 80052cc:	20004108 	.word	0x20004108

080052d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80052da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052dc:	4b27      	ldr	r3, [pc, #156]	@ (800537c <prvHeapInit+0xac>)
 80052de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00c      	beq.n	8005304 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3307      	adds	r3, #7
 80052ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0307 	bic.w	r3, r3, #7
 80052f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	4a1f      	ldr	r2, [pc, #124]	@ (800537c <prvHeapInit+0xac>)
 8005300:	4413      	add	r3, r2
 8005302:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005308:	4a1d      	ldr	r2, [pc, #116]	@ (8005380 <prvHeapInit+0xb0>)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800530e:	4b1c      	ldr	r3, [pc, #112]	@ (8005380 <prvHeapInit+0xb0>)
 8005310:	2200      	movs	r2, #0
 8005312:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	4413      	add	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800531c:	2208      	movs	r2, #8
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1a9b      	subs	r3, r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0307 	bic.w	r3, r3, #7
 800532a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4a15      	ldr	r2, [pc, #84]	@ (8005384 <prvHeapInit+0xb4>)
 8005330:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005332:	4b14      	ldr	r3, [pc, #80]	@ (8005384 <prvHeapInit+0xb4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2200      	movs	r2, #0
 8005338:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800533a:	4b12      	ldr	r3, [pc, #72]	@ (8005384 <prvHeapInit+0xb4>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	1ad2      	subs	r2, r2, r3
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005350:	4b0c      	ldr	r3, [pc, #48]	@ (8005384 <prvHeapInit+0xb4>)
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	4a0a      	ldr	r2, [pc, #40]	@ (8005388 <prvHeapInit+0xb8>)
 800535e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4a09      	ldr	r2, [pc, #36]	@ (800538c <prvHeapInit+0xbc>)
 8005366:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005368:	4b09      	ldr	r3, [pc, #36]	@ (8005390 <prvHeapInit+0xc0>)
 800536a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800536e:	601a      	str	r2, [r3, #0]
}
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	200004f0 	.word	0x200004f0
 8005380:	200040f0 	.word	0x200040f0
 8005384:	200040f8 	.word	0x200040f8
 8005388:	20004100 	.word	0x20004100
 800538c:	200040fc 	.word	0x200040fc
 8005390:	2000410c 	.word	0x2000410c

08005394 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800539c:	4b28      	ldr	r3, [pc, #160]	@ (8005440 <prvInsertBlockIntoFreeList+0xac>)
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	e002      	b.n	80053a8 <prvInsertBlockIntoFreeList+0x14>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d8f7      	bhi.n	80053a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	4413      	add	r3, r2
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d108      	bne.n	80053d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	441a      	add	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	441a      	add	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d118      	bne.n	800541c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	4b15      	ldr	r3, [pc, #84]	@ (8005444 <prvInsertBlockIntoFreeList+0xb0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d00d      	beq.n	8005412 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	441a      	add	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	e008      	b.n	8005424 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005412:	4b0c      	ldr	r3, [pc, #48]	@ (8005444 <prvInsertBlockIntoFreeList+0xb0>)
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	e003      	b.n	8005424 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	429a      	cmp	r2, r3
 800542a:	d002      	beq.n	8005432 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005432:	bf00      	nop
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	200040f0 	.word	0x200040f0
 8005444:	200040f8 	.word	0x200040f8

08005448 <memset>:
 8005448:	4402      	add	r2, r0
 800544a:	4603      	mov	r3, r0
 800544c:	4293      	cmp	r3, r2
 800544e:	d100      	bne.n	8005452 <memset+0xa>
 8005450:	4770      	bx	lr
 8005452:	f803 1b01 	strb.w	r1, [r3], #1
 8005456:	e7f9      	b.n	800544c <memset+0x4>

08005458 <_reclaim_reent>:
 8005458:	4b29      	ldr	r3, [pc, #164]	@ (8005500 <_reclaim_reent+0xa8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4283      	cmp	r3, r0
 800545e:	b570      	push	{r4, r5, r6, lr}
 8005460:	4604      	mov	r4, r0
 8005462:	d04b      	beq.n	80054fc <_reclaim_reent+0xa4>
 8005464:	69c3      	ldr	r3, [r0, #28]
 8005466:	b1ab      	cbz	r3, 8005494 <_reclaim_reent+0x3c>
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	b16b      	cbz	r3, 8005488 <_reclaim_reent+0x30>
 800546c:	2500      	movs	r5, #0
 800546e:	69e3      	ldr	r3, [r4, #28]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	5959      	ldr	r1, [r3, r5]
 8005474:	2900      	cmp	r1, #0
 8005476:	d13b      	bne.n	80054f0 <_reclaim_reent+0x98>
 8005478:	3504      	adds	r5, #4
 800547a:	2d80      	cmp	r5, #128	@ 0x80
 800547c:	d1f7      	bne.n	800546e <_reclaim_reent+0x16>
 800547e:	69e3      	ldr	r3, [r4, #28]
 8005480:	4620      	mov	r0, r4
 8005482:	68d9      	ldr	r1, [r3, #12]
 8005484:	f000 f872 	bl	800556c <_free_r>
 8005488:	69e3      	ldr	r3, [r4, #28]
 800548a:	6819      	ldr	r1, [r3, #0]
 800548c:	b111      	cbz	r1, 8005494 <_reclaim_reent+0x3c>
 800548e:	4620      	mov	r0, r4
 8005490:	f000 f86c 	bl	800556c <_free_r>
 8005494:	6961      	ldr	r1, [r4, #20]
 8005496:	b111      	cbz	r1, 800549e <_reclaim_reent+0x46>
 8005498:	4620      	mov	r0, r4
 800549a:	f000 f867 	bl	800556c <_free_r>
 800549e:	69e1      	ldr	r1, [r4, #28]
 80054a0:	b111      	cbz	r1, 80054a8 <_reclaim_reent+0x50>
 80054a2:	4620      	mov	r0, r4
 80054a4:	f000 f862 	bl	800556c <_free_r>
 80054a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80054aa:	b111      	cbz	r1, 80054b2 <_reclaim_reent+0x5a>
 80054ac:	4620      	mov	r0, r4
 80054ae:	f000 f85d 	bl	800556c <_free_r>
 80054b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054b4:	b111      	cbz	r1, 80054bc <_reclaim_reent+0x64>
 80054b6:	4620      	mov	r0, r4
 80054b8:	f000 f858 	bl	800556c <_free_r>
 80054bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80054be:	b111      	cbz	r1, 80054c6 <_reclaim_reent+0x6e>
 80054c0:	4620      	mov	r0, r4
 80054c2:	f000 f853 	bl	800556c <_free_r>
 80054c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80054c8:	b111      	cbz	r1, 80054d0 <_reclaim_reent+0x78>
 80054ca:	4620      	mov	r0, r4
 80054cc:	f000 f84e 	bl	800556c <_free_r>
 80054d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80054d2:	b111      	cbz	r1, 80054da <_reclaim_reent+0x82>
 80054d4:	4620      	mov	r0, r4
 80054d6:	f000 f849 	bl	800556c <_free_r>
 80054da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80054dc:	b111      	cbz	r1, 80054e4 <_reclaim_reent+0x8c>
 80054de:	4620      	mov	r0, r4
 80054e0:	f000 f844 	bl	800556c <_free_r>
 80054e4:	6a23      	ldr	r3, [r4, #32]
 80054e6:	b14b      	cbz	r3, 80054fc <_reclaim_reent+0xa4>
 80054e8:	4620      	mov	r0, r4
 80054ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80054ee:	4718      	bx	r3
 80054f0:	680e      	ldr	r6, [r1, #0]
 80054f2:	4620      	mov	r0, r4
 80054f4:	f000 f83a 	bl	800556c <_free_r>
 80054f8:	4631      	mov	r1, r6
 80054fa:	e7bb      	b.n	8005474 <_reclaim_reent+0x1c>
 80054fc:	bd70      	pop	{r4, r5, r6, pc}
 80054fe:	bf00      	nop
 8005500:	20000010 	.word	0x20000010

08005504 <__libc_init_array>:
 8005504:	b570      	push	{r4, r5, r6, lr}
 8005506:	4d0d      	ldr	r5, [pc, #52]	@ (800553c <__libc_init_array+0x38>)
 8005508:	4c0d      	ldr	r4, [pc, #52]	@ (8005540 <__libc_init_array+0x3c>)
 800550a:	1b64      	subs	r4, r4, r5
 800550c:	10a4      	asrs	r4, r4, #2
 800550e:	2600      	movs	r6, #0
 8005510:	42a6      	cmp	r6, r4
 8005512:	d109      	bne.n	8005528 <__libc_init_array+0x24>
 8005514:	4d0b      	ldr	r5, [pc, #44]	@ (8005544 <__libc_init_array+0x40>)
 8005516:	4c0c      	ldr	r4, [pc, #48]	@ (8005548 <__libc_init_array+0x44>)
 8005518:	f000 f87e 	bl	8005618 <_init>
 800551c:	1b64      	subs	r4, r4, r5
 800551e:	10a4      	asrs	r4, r4, #2
 8005520:	2600      	movs	r6, #0
 8005522:	42a6      	cmp	r6, r4
 8005524:	d105      	bne.n	8005532 <__libc_init_array+0x2e>
 8005526:	bd70      	pop	{r4, r5, r6, pc}
 8005528:	f855 3b04 	ldr.w	r3, [r5], #4
 800552c:	4798      	blx	r3
 800552e:	3601      	adds	r6, #1
 8005530:	e7ee      	b.n	8005510 <__libc_init_array+0xc>
 8005532:	f855 3b04 	ldr.w	r3, [r5], #4
 8005536:	4798      	blx	r3
 8005538:	3601      	adds	r6, #1
 800553a:	e7f2      	b.n	8005522 <__libc_init_array+0x1e>
 800553c:	0800568c 	.word	0x0800568c
 8005540:	0800568c 	.word	0x0800568c
 8005544:	0800568c 	.word	0x0800568c
 8005548:	08005690 	.word	0x08005690

0800554c <__retarget_lock_acquire_recursive>:
 800554c:	4770      	bx	lr

0800554e <__retarget_lock_release_recursive>:
 800554e:	4770      	bx	lr

08005550 <memcpy>:
 8005550:	440a      	add	r2, r1
 8005552:	4291      	cmp	r1, r2
 8005554:	f100 33ff 	add.w	r3, r0, #4294967295
 8005558:	d100      	bne.n	800555c <memcpy+0xc>
 800555a:	4770      	bx	lr
 800555c:	b510      	push	{r4, lr}
 800555e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005562:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005566:	4291      	cmp	r1, r2
 8005568:	d1f9      	bne.n	800555e <memcpy+0xe>
 800556a:	bd10      	pop	{r4, pc}

0800556c <_free_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	4605      	mov	r5, r0
 8005570:	2900      	cmp	r1, #0
 8005572:	d041      	beq.n	80055f8 <_free_r+0x8c>
 8005574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005578:	1f0c      	subs	r4, r1, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	bfb8      	it	lt
 800557e:	18e4      	addlt	r4, r4, r3
 8005580:	f000 f83e 	bl	8005600 <__malloc_lock>
 8005584:	4a1d      	ldr	r2, [pc, #116]	@ (80055fc <_free_r+0x90>)
 8005586:	6813      	ldr	r3, [r2, #0]
 8005588:	b933      	cbnz	r3, 8005598 <_free_r+0x2c>
 800558a:	6063      	str	r3, [r4, #4]
 800558c:	6014      	str	r4, [r2, #0]
 800558e:	4628      	mov	r0, r5
 8005590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005594:	f000 b83a 	b.w	800560c <__malloc_unlock>
 8005598:	42a3      	cmp	r3, r4
 800559a:	d908      	bls.n	80055ae <_free_r+0x42>
 800559c:	6820      	ldr	r0, [r4, #0]
 800559e:	1821      	adds	r1, r4, r0
 80055a0:	428b      	cmp	r3, r1
 80055a2:	bf01      	itttt	eq
 80055a4:	6819      	ldreq	r1, [r3, #0]
 80055a6:	685b      	ldreq	r3, [r3, #4]
 80055a8:	1809      	addeq	r1, r1, r0
 80055aa:	6021      	streq	r1, [r4, #0]
 80055ac:	e7ed      	b.n	800558a <_free_r+0x1e>
 80055ae:	461a      	mov	r2, r3
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	b10b      	cbz	r3, 80055b8 <_free_r+0x4c>
 80055b4:	42a3      	cmp	r3, r4
 80055b6:	d9fa      	bls.n	80055ae <_free_r+0x42>
 80055b8:	6811      	ldr	r1, [r2, #0]
 80055ba:	1850      	adds	r0, r2, r1
 80055bc:	42a0      	cmp	r0, r4
 80055be:	d10b      	bne.n	80055d8 <_free_r+0x6c>
 80055c0:	6820      	ldr	r0, [r4, #0]
 80055c2:	4401      	add	r1, r0
 80055c4:	1850      	adds	r0, r2, r1
 80055c6:	4283      	cmp	r3, r0
 80055c8:	6011      	str	r1, [r2, #0]
 80055ca:	d1e0      	bne.n	800558e <_free_r+0x22>
 80055cc:	6818      	ldr	r0, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	6053      	str	r3, [r2, #4]
 80055d2:	4408      	add	r0, r1
 80055d4:	6010      	str	r0, [r2, #0]
 80055d6:	e7da      	b.n	800558e <_free_r+0x22>
 80055d8:	d902      	bls.n	80055e0 <_free_r+0x74>
 80055da:	230c      	movs	r3, #12
 80055dc:	602b      	str	r3, [r5, #0]
 80055de:	e7d6      	b.n	800558e <_free_r+0x22>
 80055e0:	6820      	ldr	r0, [r4, #0]
 80055e2:	1821      	adds	r1, r4, r0
 80055e4:	428b      	cmp	r3, r1
 80055e6:	bf04      	itt	eq
 80055e8:	6819      	ldreq	r1, [r3, #0]
 80055ea:	685b      	ldreq	r3, [r3, #4]
 80055ec:	6063      	str	r3, [r4, #4]
 80055ee:	bf04      	itt	eq
 80055f0:	1809      	addeq	r1, r1, r0
 80055f2:	6021      	streq	r1, [r4, #0]
 80055f4:	6054      	str	r4, [r2, #4]
 80055f6:	e7ca      	b.n	800558e <_free_r+0x22>
 80055f8:	bd38      	pop	{r3, r4, r5, pc}
 80055fa:	bf00      	nop
 80055fc:	2000424c 	.word	0x2000424c

08005600 <__malloc_lock>:
 8005600:	4801      	ldr	r0, [pc, #4]	@ (8005608 <__malloc_lock+0x8>)
 8005602:	f7ff bfa3 	b.w	800554c <__retarget_lock_acquire_recursive>
 8005606:	bf00      	nop
 8005608:	20004248 	.word	0x20004248

0800560c <__malloc_unlock>:
 800560c:	4801      	ldr	r0, [pc, #4]	@ (8005614 <__malloc_unlock+0x8>)
 800560e:	f7ff bf9e 	b.w	800554e <__retarget_lock_release_recursive>
 8005612:	bf00      	nop
 8005614:	20004248 	.word	0x20004248

08005618 <_init>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	bf00      	nop
 800561c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561e:	bc08      	pop	{r3}
 8005620:	469e      	mov	lr, r3
 8005622:	4770      	bx	lr

08005624 <_fini>:
 8005624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005626:	bf00      	nop
 8005628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562a:	bc08      	pop	{r3}
 800562c:	469e      	mov	lr, r3
 800562e:	4770      	bx	lr
