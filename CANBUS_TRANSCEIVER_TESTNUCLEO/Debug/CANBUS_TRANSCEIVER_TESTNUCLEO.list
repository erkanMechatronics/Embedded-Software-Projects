
CANBUS_TRANSCEIVER_TESTNUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002994  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002b28  08002b28  00003b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b58  08002b58  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b58  08002b58  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b58  08002b58  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b58  08002b58  00003b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b5c  08002b5c  00003b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002b60  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000070  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000007c  2000007c  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005d76  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001306  00000000  00000000  00009db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000550  00000000  00000000  0000b0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003df  00000000  00000000  0000b608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e8af  00000000  00000000  0000b9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006757  00000000  00000000  0002a296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9997  00000000  00000000  000309ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ea384  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001434  00000000  00000000  000ea3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  000eb7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002b10 	.word	0x08002b10

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002b10 	.word	0x08002b10

080001d4 <HAL_CAN_RxFifo1MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 80001dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000210 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 80001de:	4a0d      	ldr	r2, [pc, #52]	@ (8000214 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 80001e0:	2101      	movs	r1, #1
 80001e2:	6878      	ldr	r0, [r7, #4]
 80001e4:	f000 fc19 	bl	8000a1a <HAL_CAN_GetRxMessage>

	if(RxHeader.StdId == 0x446)
 80001e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000214 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f240 4246 	movw	r2, #1094	@ 0x446
 80001f0:	4293      	cmp	r3, r2
 80001f2:	d108      	bne.n	8000206 <HAL_CAN_RxFifo1MsgPendingCallback+0x32>
	{
		control = 1;
 80001f4:	4b08      	ldr	r3, [pc, #32]	@ (8000218 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, GPIO_PIN_SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	2120      	movs	r1, #32
 80001fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000202:	f001 fa1d 	bl	8001640 <HAL_GPIO_WritePin>
	}
}
 8000206:	bf00      	nop
 8000208:	3708      	adds	r7, #8
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	20000044 	.word	0x20000044
 8000214:	20000028 	.word	0x20000028
 8000218:	2000004c 	.word	0x2000004c

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 f9d0 	bl	80005c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f80c 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f8a2 	bl	8000370 <MX_GPIO_Init>
  MX_CAN_Init();
 800022c:	f000 f84e 	bl	80002cc <MX_CAN_Init>
  /* USER CODE BEGIN 2 */


  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000230:	2110      	movs	r1, #16
 8000232:	4802      	ldr	r0, [pc, #8]	@ (800023c <main+0x20>)
 8000234:	f000 fd13 	bl	8000c5e <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	bf00      	nop
 800023a:	e7fd      	b.n	8000238 <main+0x1c>
 800023c:	20000050 	.word	0x20000050

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b090      	sub	sp, #64	@ 0x40
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0318 	add.w	r3, r7, #24
 800024a:	2228      	movs	r2, #40	@ 0x28
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fc32 	bl	8002ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000262:	2301      	movs	r3, #1
 8000264:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000266:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800026a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	2301      	movs	r3, #1
 800026e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000270:	2302      	movs	r3, #2
 8000272:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000274:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000278:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800027e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0318 	add.w	r3, r7, #24
 8000288:	4618      	mov	r0, r3
 800028a:	f001 f9f1 	bl	8001670 <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000294:	f000 f8aa 	bl	80003ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029c:	2302      	movs	r3, #2
 800029e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 fa30 	bl	8002718 <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002be:	f000 f895 	bl	80003ec <Error_Handler>
  }
}
 80002c2:	bf00      	nop
 80002c4:	3740      	adds	r7, #64	@ 0x40
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b08a      	sub	sp, #40	@ 0x28
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80002d2:	4b25      	ldr	r3, [pc, #148]	@ (8000368 <MX_CAN_Init+0x9c>)
 80002d4:	4a25      	ldr	r2, [pc, #148]	@ (800036c <MX_CAN_Init+0xa0>)
 80002d6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80002d8:	4b23      	ldr	r3, [pc, #140]	@ (8000368 <MX_CAN_Init+0x9c>)
 80002da:	2212      	movs	r2, #18
 80002dc:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002de:	4b22      	ldr	r3, [pc, #136]	@ (8000368 <MX_CAN_Init+0x9c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002e4:	4b20      	ldr	r3, [pc, #128]	@ (8000368 <MX_CAN_Init+0x9c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80002ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000368 <MX_CAN_Init+0x9c>)
 80002ec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80002f0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80002f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000368 <MX_CAN_Init+0x9c>)
 80002f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80002f8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000368 <MX_CAN_Init+0x9c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000300:	4b19      	ldr	r3, [pc, #100]	@ (8000368 <MX_CAN_Init+0x9c>)
 8000302:	2200      	movs	r2, #0
 8000304:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000306:	4b18      	ldr	r3, [pc, #96]	@ (8000368 <MX_CAN_Init+0x9c>)
 8000308:	2200      	movs	r2, #0
 800030a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800030c:	4b16      	ldr	r3, [pc, #88]	@ (8000368 <MX_CAN_Init+0x9c>)
 800030e:	2200      	movs	r2, #0
 8000310:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000312:	4b15      	ldr	r3, [pc, #84]	@ (8000368 <MX_CAN_Init+0x9c>)
 8000314:	2200      	movs	r2, #0
 8000316:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000318:	4b13      	ldr	r3, [pc, #76]	@ (8000368 <MX_CAN_Init+0x9c>)
 800031a:	2200      	movs	r2, #0
 800031c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800031e:	4812      	ldr	r0, [pc, #72]	@ (8000368 <MX_CAN_Init+0x9c>)
 8000320:	f000 f9b6 	bl	8000690 <HAL_CAN_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800032a:	f000 f85f 	bl	80003ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef FilterHandler;

  FilterHandler.FilterActivation = CAN_FILTER_ENABLE;
 800032e:	2301      	movs	r3, #1
 8000330:	623b      	str	r3, [r7, #32]
  FilterHandler.FilterBank = 13;
 8000332:	230d      	movs	r3, #13
 8000334:	617b      	str	r3, [r7, #20]
  FilterHandler.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000336:	2301      	movs	r3, #1
 8000338:	613b      	str	r3, [r7, #16]
  FilterHandler.FilterIdHigh = 0x446 << 5;
 800033a:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 800033e:	603b      	str	r3, [r7, #0]
  FilterHandler.FilterIdLow = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	607b      	str	r3, [r7, #4]
  FilterHandler.FilterMaskIdHigh = 0x446 << 5;
 8000344:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 8000348:	60bb      	str	r3, [r7, #8]
  FilterHandler.FilterMaskIdLow = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
  FilterHandler.FilterMode = CAN_FILTERMODE_IDMASK;
 800034e:	2300      	movs	r3, #0
 8000350:	61bb      	str	r3, [r7, #24]
  FilterHandler.FilterScale = CAN_FILTERSCALE_32BIT;
 8000352:	2301      	movs	r3, #1
 8000354:	61fb      	str	r3, [r7, #28]

  HAL_CAN_ConfigFilter(&hcan, &FilterHandler);
 8000356:	463b      	mov	r3, r7
 8000358:	4619      	mov	r1, r3
 800035a:	4803      	ldr	r0, [pc, #12]	@ (8000368 <MX_CAN_Init+0x9c>)
 800035c:	f000 fa93 	bl	8000886 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000360:	bf00      	nop
 8000362:	3728      	adds	r7, #40	@ 0x28
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000050 	.word	0x20000050
 800036c:	40006400 	.word	0x40006400

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 030c 	add.w	r3, r7, #12
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000386:	4b18      	ldr	r3, [pc, #96]	@ (80003e8 <MX_GPIO_Init+0x78>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a17      	ldr	r2, [pc, #92]	@ (80003e8 <MX_GPIO_Init+0x78>)
 800038c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b15      	ldr	r3, [pc, #84]	@ (80003e8 <MX_GPIO_Init+0x78>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039e:	4b12      	ldr	r3, [pc, #72]	@ (80003e8 <MX_GPIO_Init+0x78>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a11      	ldr	r2, [pc, #68]	@ (80003e8 <MX_GPIO_Init+0x78>)
 80003a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003a8:	6153      	str	r3, [r2, #20]
 80003aa:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <MX_GPIO_Init+0x78>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2120      	movs	r1, #32
 80003ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003be:	f001 f93f 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003c2:	2320      	movs	r3, #32
 80003c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c6:	2301      	movs	r3, #1
 80003c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d2:	f107 030c 	add.w	r3, r7, #12
 80003d6:	4619      	mov	r1, r3
 80003d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003dc:	f000 ffa6 	bl	800132c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e0:	bf00      	nop
 80003e2:	3720      	adds	r7, #32
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40021000 	.word	0x40021000

080003ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f0:	b672      	cpsid	i
}
 80003f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f4:	bf00      	nop
 80003f6:	e7fd      	b.n	80003f4 <Error_Handler+0x8>

080003f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fe:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <HAL_MspInit+0x44>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a0e      	ldr	r2, [pc, #56]	@ (800043c <HAL_MspInit+0x44>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6193      	str	r3, [r2, #24]
 800040a:	4b0c      	ldr	r3, [pc, #48]	@ (800043c <HAL_MspInit+0x44>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000416:	4b09      	ldr	r3, [pc, #36]	@ (800043c <HAL_MspInit+0x44>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	4a08      	ldr	r2, [pc, #32]	@ (800043c <HAL_MspInit+0x44>)
 800041c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000420:	61d3      	str	r3, [r2, #28]
 8000422:	4b06      	ldr	r3, [pc, #24]	@ (800043c <HAL_MspInit+0x44>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800042a:	603b      	str	r3, [r7, #0]
 800042c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000

08000440 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08a      	sub	sp, #40	@ 0x28
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000448:	f107 0314 	add.w	r3, r7, #20
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
 8000456:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a1c      	ldr	r2, [pc, #112]	@ (80004d0 <HAL_CAN_MspInit+0x90>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d131      	bne.n	80004c6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000462:	4b1c      	ldr	r3, [pc, #112]	@ (80004d4 <HAL_CAN_MspInit+0x94>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	4a1b      	ldr	r2, [pc, #108]	@ (80004d4 <HAL_CAN_MspInit+0x94>)
 8000468:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800046c:	61d3      	str	r3, [r2, #28]
 800046e:	4b19      	ldr	r3, [pc, #100]	@ (80004d4 <HAL_CAN_MspInit+0x94>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000476:	613b      	str	r3, [r7, #16]
 8000478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800047a:	4b16      	ldr	r3, [pc, #88]	@ (80004d4 <HAL_CAN_MspInit+0x94>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a15      	ldr	r2, [pc, #84]	@ (80004d4 <HAL_CAN_MspInit+0x94>)
 8000480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <HAL_CAN_MspInit+0x94>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000492:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000498:	2302      	movs	r3, #2
 800049a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a0:	2303      	movs	r3, #3
 80004a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80004a4:	2309      	movs	r3, #9
 80004a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a8:	f107 0314 	add.w	r3, r7, #20
 80004ac:	4619      	mov	r1, r3
 80004ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004b2:	f000 ff3b 	bl	800132c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2100      	movs	r1, #0
 80004ba:	2015      	movs	r0, #21
 80004bc:	f000 feff 	bl	80012be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80004c0:	2015      	movs	r0, #21
 80004c2:	f000 ff18 	bl	80012f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80004c6:	bf00      	nop
 80004c8:	3728      	adds	r7, #40	@ 0x28
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40006400 	.word	0x40006400
 80004d4:	40021000 	.word	0x40021000

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <NMI_Handler+0x4>

080004e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <HardFault_Handler+0x4>

080004e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <MemManage_Handler+0x4>

080004f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <BusFault_Handler+0x4>

080004f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <UsageFault_Handler+0x4>

08000500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052e:	f000 f88f 	bl	8000650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN_RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800053c:	4802      	ldr	r0, [pc, #8]	@ (8000548 <CAN_RX1_IRQHandler+0x10>)
 800053e:	f000 fbb4 	bl	8000caa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000050 	.word	0x20000050

0800054c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <SystemInit+0x20>)
 8000552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000556:	4a05      	ldr	r2, [pc, #20]	@ (800056c <SystemInit+0x20>)
 8000558:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800055c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000570:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000574:	f7ff ffea 	bl	800054c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000578:	480c      	ldr	r0, [pc, #48]	@ (80005ac <LoopForever+0x6>)
  ldr r1, =_edata
 800057a:	490d      	ldr	r1, [pc, #52]	@ (80005b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800057c:	4a0d      	ldr	r2, [pc, #52]	@ (80005b4 <LoopForever+0xe>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000590:	4c0a      	ldr	r4, [pc, #40]	@ (80005bc <LoopForever+0x16>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059e:	f002 fa93 	bl	8002ac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005a2:	f7ff fe3b 	bl	800021c <main>

080005a6 <LoopForever>:

LoopForever:
    b LoopForever
 80005a6:	e7fe      	b.n	80005a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005b4:	08002b60 	.word	0x08002b60
  ldr r2, =_sbss
 80005b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005bc:	2000007c 	.word	0x2000007c

080005c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC1_2_IRQHandler>
	...

080005c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c8:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <HAL_Init+0x28>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a07      	ldr	r2, [pc, #28]	@ (80005ec <HAL_Init+0x28>)
 80005ce:	f043 0310 	orr.w	r3, r3, #16
 80005d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d4:	2003      	movs	r0, #3
 80005d6:	f000 fe67 	bl	80012a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005da:	200f      	movs	r0, #15
 80005dc:	f000 f808 	bl	80005f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e0:	f7ff ff0a 	bl	80003f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40022000 	.word	0x40022000

080005f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f8:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <HAL_InitTick+0x54>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <HAL_InitTick+0x58>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000606:	fbb3 f3f1 	udiv	r3, r3, r1
 800060a:	fbb2 f3f3 	udiv	r3, r2, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fe7f 	bl	8001312 <HAL_SYSTICK_Config>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	e00e      	b.n	800063c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b0f      	cmp	r3, #15
 8000622:	d80a      	bhi.n	800063a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	2200      	movs	r2, #0
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f000 fe47 	bl	80012be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4a06      	ldr	r2, [pc, #24]	@ (800064c <HAL_InitTick+0x5c>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000636:	2300      	movs	r3, #0
 8000638:	e000      	b.n	800063c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000000 	.word	0x20000000
 8000648:	20000008 	.word	0x20000008
 800064c:	20000004 	.word	0x20000004

08000650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <HAL_IncTick+0x20>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <HAL_IncTick+0x24>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4413      	add	r3, r2
 8000660:	4a04      	ldr	r2, [pc, #16]	@ (8000674 <HAL_IncTick+0x24>)
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000008 	.word	0x20000008
 8000674:	20000078 	.word	0x20000078

08000678 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;  
 800067c:	4b03      	ldr	r3, [pc, #12]	@ (800068c <HAL_GetTick+0x14>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000078 	.word	0x20000078

08000690 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	e0ed      	b.n	800087e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d102      	bne.n	80006b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff fec6 	bl	8000440 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f042 0201 	orr.w	r2, r2, #1
 80006c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006c4:	f7ff ffd8 	bl	8000678 <HAL_GetTick>
 80006c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006ca:	e012      	b.n	80006f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006cc:	f7ff ffd4 	bl	8000678 <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	2b0a      	cmp	r3, #10
 80006d8:	d90b      	bls.n	80006f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2205      	movs	r2, #5
 80006ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e0c5      	b.n	800087e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0e5      	beq.n	80006cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f022 0202 	bic.w	r2, r2, #2
 800070e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000710:	f7ff ffb2 	bl	8000678 <HAL_GetTick>
 8000714:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000716:	e012      	b.n	800073e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000718:	f7ff ffae 	bl	8000678 <HAL_GetTick>
 800071c:	4602      	mov	r2, r0
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	2b0a      	cmp	r3, #10
 8000724:	d90b      	bls.n	800073e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800072a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2205      	movs	r2, #5
 8000736:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e09f      	b.n	800087e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	f003 0302 	and.w	r3, r3, #2
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1e5      	bne.n	8000718 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7e1b      	ldrb	r3, [r3, #24]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d108      	bne.n	8000766 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	e007      	b.n	8000776 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000774:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7e5b      	ldrb	r3, [r3, #25]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d108      	bne.n	8000790 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	e007      	b.n	80007a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800079e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	7e9b      	ldrb	r3, [r3, #26]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d108      	bne.n	80007ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f042 0220 	orr.w	r2, r2, #32
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	e007      	b.n	80007ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f022 0220 	bic.w	r2, r2, #32
 80007c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7edb      	ldrb	r3, [r3, #27]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d108      	bne.n	80007e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f022 0210 	bic.w	r2, r2, #16
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	e007      	b.n	80007f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f042 0210 	orr.w	r2, r2, #16
 80007f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7f1b      	ldrb	r3, [r3, #28]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d108      	bne.n	800080e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f042 0208 	orr.w	r2, r2, #8
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	e007      	b.n	800081e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f022 0208 	bic.w	r2, r2, #8
 800081c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7f5b      	ldrb	r3, [r3, #29]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d108      	bne.n	8000838 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f042 0204 	orr.w	r2, r2, #4
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	e007      	b.n	8000848 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f022 0204 	bic.w	r2, r2, #4
 8000846:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	431a      	orrs	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	691b      	ldr	r3, [r3, #16]
 8000856:	431a      	orrs	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	ea42 0103 	orr.w	r1, r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	1e5a      	subs	r2, r3, #1
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	430a      	orrs	r2, r1
 800086c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2201      	movs	r2, #1
 8000878:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000886:	b480      	push	{r7}
 8000888:	b087      	sub	sp, #28
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f893 3020 	ldrb.w	r3, [r3, #32]
 800089c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800089e:	7cfb      	ldrb	r3, [r7, #19]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d003      	beq.n	80008ac <HAL_CAN_ConfigFilter+0x26>
 80008a4:	7cfb      	ldrb	r3, [r7, #19]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	f040 80aa 	bne.w	8000a00 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80008b2:	f043 0201 	orr.w	r2, r3, #1
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	f003 031f 	and.w	r3, r3, #31
 80008c4:	2201      	movs	r2, #1
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	43db      	mvns	r3, r3
 80008d6:	401a      	ands	r2, r3
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d123      	bne.n	800092e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	43db      	mvns	r3, r3
 80008f0:	401a      	ands	r2, r3
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000908:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	3248      	adds	r2, #72	@ 0x48
 800090e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000922:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000924:	6979      	ldr	r1, [r7, #20]
 8000926:	3348      	adds	r3, #72	@ 0x48
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	440b      	add	r3, r1
 800092c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d122      	bne.n	800097c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	431a      	orrs	r2, r3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000952:	683a      	ldr	r2, [r7, #0]
 8000954:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000956:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	3248      	adds	r2, #72	@ 0x48
 800095c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000970:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000972:	6979      	ldr	r1, [r7, #20]
 8000974:	3348      	adds	r3, #72	@ 0x48
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	440b      	add	r3, r1
 800097a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d109      	bne.n	8000998 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	43db      	mvns	r3, r3
 800098e:	401a      	ands	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000996:	e007      	b.n	80009a8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	431a      	orrs	r2, r3
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	691b      	ldr	r3, [r3, #16]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d109      	bne.n	80009c4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	43db      	mvns	r3, r3
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80009c2:	e007      	b.n	80009d4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	431a      	orrs	r2, r3
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	6a1b      	ldr	r3, [r3, #32]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d107      	bne.n	80009ec <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	431a      	orrs	r2, r3
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80009f2:	f023 0201 	bic.w	r2, r3, #1
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80009fc:	2300      	movs	r3, #0
 80009fe:	e006      	b.n	8000a0e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a04:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000a0c:	2301      	movs	r3, #1
  }
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	371c      	adds	r7, #28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b087      	sub	sp, #28
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	60f8      	str	r0, [r7, #12]
 8000a22:	60b9      	str	r1, [r7, #8]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a2e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a30:	7dfb      	ldrb	r3, [r7, #23]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d003      	beq.n	8000a3e <HAL_CAN_GetRxMessage+0x24>
 8000a36:	7dfb      	ldrb	r3, [r7, #23]
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	f040 8103 	bne.w	8000c44 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10e      	bne.n	8000a62 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	f003 0303 	and.w	r3, r3, #3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d116      	bne.n	8000a80 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a56:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e0f7      	b.n	8000c52 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	691b      	ldr	r3, [r3, #16]
 8000a68:	f003 0303 	and.w	r3, r3, #3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d107      	bne.n	8000a80 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a74:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e0e8      	b.n	8000c52 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	331b      	adds	r3, #27
 8000a88:	011b      	lsls	r3, r3, #4
 8000a8a:	4413      	add	r3, r2
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 0204 	and.w	r2, r3, #4
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10c      	bne.n	8000ab8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	331b      	adds	r3, #27
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	4413      	add	r3, r2
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	0d5b      	lsrs	r3, r3, #21
 8000aae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	e00b      	b.n	8000ad0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	331b      	adds	r3, #27
 8000ac0:	011b      	lsls	r3, r3, #4
 8000ac2:	4413      	add	r3, r2
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	08db      	lsrs	r3, r3, #3
 8000ac8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	331b      	adds	r3, #27
 8000ad8:	011b      	lsls	r3, r3, #4
 8000ada:	4413      	add	r3, r2
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f003 0202 	and.w	r2, r3, #2
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	331b      	adds	r3, #27
 8000aee:	011b      	lsls	r3, r3, #4
 8000af0:	4413      	add	r3, r2
 8000af2:	3304      	adds	r3, #4
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f003 0308 	and.w	r3, r3, #8
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2208      	movs	r2, #8
 8000b02:	611a      	str	r2, [r3, #16]
 8000b04:	e00b      	b.n	8000b1e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	331b      	adds	r3, #27
 8000b0e:	011b      	lsls	r3, r3, #4
 8000b10:	4413      	add	r3, r2
 8000b12:	3304      	adds	r3, #4
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f003 020f 	and.w	r2, r3, #15
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	331b      	adds	r3, #27
 8000b26:	011b      	lsls	r3, r3, #4
 8000b28:	4413      	add	r3, r2
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	0a1b      	lsrs	r3, r3, #8
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	331b      	adds	r3, #27
 8000b3e:	011b      	lsls	r3, r3, #4
 8000b40:	4413      	add	r3, r2
 8000b42:	3304      	adds	r3, #4
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	0c1b      	lsrs	r3, r3, #16
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	011b      	lsls	r3, r3, #4
 8000b56:	4413      	add	r3, r2
 8000b58:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	011b      	lsls	r3, r3, #4
 8000b6c:	4413      	add	r3, r2
 8000b6e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	0a1a      	lsrs	r2, r3, #8
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	011b      	lsls	r3, r3, #4
 8000b86:	4413      	add	r3, r2
 8000b88:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	0c1a      	lsrs	r2, r3, #16
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	3302      	adds	r3, #2
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	011b      	lsls	r3, r3, #4
 8000ba0:	4413      	add	r3, r2
 8000ba2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	0e1a      	lsrs	r2, r3, #24
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	3303      	adds	r3, #3
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	011b      	lsls	r3, r3, #4
 8000bba:	4413      	add	r3, r2
 8000bbc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	4413      	add	r3, r2
 8000bd4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	0a1a      	lsrs	r2, r3, #8
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	3305      	adds	r3, #5
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	011b      	lsls	r3, r3, #4
 8000bec:	4413      	add	r3, r2
 8000bee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	0c1a      	lsrs	r2, r3, #16
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	3306      	adds	r3, #6
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	011b      	lsls	r3, r3, #4
 8000c06:	4413      	add	r3, r2
 8000c08:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	0e1a      	lsrs	r2, r3, #24
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	3307      	adds	r3, #7
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d108      	bne.n	8000c30 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f042 0220 	orr.w	r2, r2, #32
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	e007      	b.n	8000c40 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	691a      	ldr	r2, [r3, #16]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f042 0220 	orr.w	r2, r2, #32
 8000c3e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	e006      	b.n	8000c52 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c48:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
  }
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	371c      	adds	r7, #28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b085      	sub	sp, #20
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c6e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d002      	beq.n	8000c7c <HAL_CAN_ActivateNotification+0x1e>
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d109      	bne.n	8000c90 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6959      	ldr	r1, [r3, #20]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	e006      	b.n	8000c9e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c94:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
  }
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b08a      	sub	sp, #40	@ 0x28
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d07c      	beq.n	8000dea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d023      	beq.n	8000d42 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f000 f983 	bl	8001018 <HAL_CAN_TxMailbox0CompleteCallback>
 8000d12:	e016      	b.n	8000d42 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d004      	beq.n	8000d28 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d26:	e00c      	b.n	8000d42 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	f003 0308 	and.w	r3, r3, #8
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d004      	beq.n	8000d3c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d3a:	e002      	b.n	8000d42 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f000 f989 	bl	8001054 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d024      	beq.n	8000d96 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f000 f963 	bl	800102c <HAL_CAN_TxMailbox1CompleteCallback>
 8000d66:	e016      	b.n	8000d96 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d004      	beq.n	8000d7c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d7a:	e00c      	b.n	8000d96 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d004      	beq.n	8000d90 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d8e:	e002      	b.n	8000d96 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f000 f969 	bl	8001068 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d024      	beq.n	8000dea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000da8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f000 f943 	bl	8001040 <HAL_CAN_TxMailbox2CompleteCallback>
 8000dba:	e016      	b.n	8000dea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d004      	beq.n	8000dd0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dce:	e00c      	b.n	8000dea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d004      	beq.n	8000de4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000de2:	e002      	b.n	8000dea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f000 f949 	bl	800107c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000dea:	6a3b      	ldr	r3, [r7, #32]
 8000dec:	f003 0308 	and.w	r3, r3, #8
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00c      	beq.n	8000e0e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	f003 0310 	and.w	r3, r3, #16
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d007      	beq.n	8000e0e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2210      	movs	r2, #16
 8000e0c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000e0e:	6a3b      	ldr	r3, [r7, #32]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00b      	beq.n	8000e30 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d006      	beq.n	8000e30 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2208      	movs	r2, #8
 8000e28:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 f93a 	bl	80010a4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d009      	beq.n	8000e4e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f000 f921 	bl	8001090 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000e4e:	6a3b      	ldr	r3, [r7, #32]
 8000e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00c      	beq.n	8000e72 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d007      	beq.n	8000e72 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2210      	movs	r2, #16
 8000e70:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000e72:	6a3b      	ldr	r3, [r7, #32]
 8000e74:	f003 0320 	and.w	r3, r3, #32
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d006      	beq.n	8000e94 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2208      	movs	r2, #8
 8000e8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f000 f912 	bl	80010b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000e94:	6a3b      	ldr	r3, [r7, #32]
 8000e96:	f003 0310 	and.w	r3, r3, #16
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d009      	beq.n	8000eb2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d002      	beq.n	8000eb2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff f991 	bl	80001d4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000eb2:	6a3b      	ldr	r3, [r7, #32]
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d00b      	beq.n	8000ed4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f003 0310 	and.w	r3, r3, #16
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d006      	beq.n	8000ed4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2210      	movs	r2, #16
 8000ecc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 f8fc 	bl	80010cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
 8000ed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00b      	beq.n	8000ef6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	f003 0308 	and.w	r3, r3, #8
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d006      	beq.n	8000ef6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2208      	movs	r2, #8
 8000eee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 f8f5 	bl	80010e0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d07b      	beq.n	8000ff8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d072      	beq.n	8000ff0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d008      	beq.n	8000f26 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000f26:	6a3b      	ldr	r3, [r7, #32]
 8000f28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d008      	beq.n	8000f42 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000f42:	6a3b      	ldr	r3, [r7, #32]
 8000f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d008      	beq.n	8000f5e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d043      	beq.n	8000ff0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d03e      	beq.n	8000ff0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000f78:	2b60      	cmp	r3, #96	@ 0x60
 8000f7a:	d02b      	beq.n	8000fd4 <HAL_CAN_IRQHandler+0x32a>
 8000f7c:	2b60      	cmp	r3, #96	@ 0x60
 8000f7e:	d82e      	bhi.n	8000fde <HAL_CAN_IRQHandler+0x334>
 8000f80:	2b50      	cmp	r3, #80	@ 0x50
 8000f82:	d022      	beq.n	8000fca <HAL_CAN_IRQHandler+0x320>
 8000f84:	2b50      	cmp	r3, #80	@ 0x50
 8000f86:	d82a      	bhi.n	8000fde <HAL_CAN_IRQHandler+0x334>
 8000f88:	2b40      	cmp	r3, #64	@ 0x40
 8000f8a:	d019      	beq.n	8000fc0 <HAL_CAN_IRQHandler+0x316>
 8000f8c:	2b40      	cmp	r3, #64	@ 0x40
 8000f8e:	d826      	bhi.n	8000fde <HAL_CAN_IRQHandler+0x334>
 8000f90:	2b30      	cmp	r3, #48	@ 0x30
 8000f92:	d010      	beq.n	8000fb6 <HAL_CAN_IRQHandler+0x30c>
 8000f94:	2b30      	cmp	r3, #48	@ 0x30
 8000f96:	d822      	bhi.n	8000fde <HAL_CAN_IRQHandler+0x334>
 8000f98:	2b10      	cmp	r3, #16
 8000f9a:	d002      	beq.n	8000fa2 <HAL_CAN_IRQHandler+0x2f8>
 8000f9c:	2b20      	cmp	r3, #32
 8000f9e:	d005      	beq.n	8000fac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000fa0:	e01d      	b.n	8000fde <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000faa:	e019      	b.n	8000fe0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fae:	f043 0310 	orr.w	r3, r3, #16
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000fb4:	e014      	b.n	8000fe0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb8:	f043 0320 	orr.w	r3, r3, #32
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000fbe:	e00f      	b.n	8000fe0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000fc8:	e00a      	b.n	8000fe0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000fd2:	e005      	b.n	8000fe0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000fdc:	e000      	b.n	8000fe0 <HAL_CAN_IRQHandler+0x336>
            break;
 8000fde:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8000fee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d008      	beq.n	8001010 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001004:	431a      	orrs	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f872 	bl	80010f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	@ 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	@ (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	db0b      	blt.n	8001196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 021f 	and.w	r2, r3, #31
 8001184:	4907      	ldr	r1, [pc, #28]	@ (80011a4 <__NVIC_EnableIRQ+0x38>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	2001      	movs	r0, #1
 800118e:	fa00 f202 	lsl.w	r2, r0, r2
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000e100 	.word	0xe000e100

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	@ (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	@ (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	@ 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf28      	it	cs
 800121a:	2304      	movcs	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3304      	adds	r3, #4
 8001222:	2b06      	cmp	r3, #6
 8001224:	d902      	bls.n	800122c <NVIC_EncodePriority+0x30>
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3b03      	subs	r3, #3
 800122a:	e000      	b.n	800122e <NVIC_EncodePriority+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43d9      	mvns	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	4313      	orrs	r3, r2
         );
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	@ 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001274:	d301      	bcc.n	800127a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001276:	2301      	movs	r3, #1
 8001278:	e00f      	b.n	800129a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127a:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <SysTick_Config+0x40>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001282:	210f      	movs	r1, #15
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f7ff ff8e 	bl	80011a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800128c:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <SysTick_Config+0x40>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001292:	4b04      	ldr	r3, [pc, #16]	@ (80012a4 <SysTick_Config+0x40>)
 8001294:	2207      	movs	r2, #7
 8001296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	e000e010 	.word	0xe000e010

080012a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ff29 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d0:	f7ff ff3e 	bl	8001150 <__NVIC_GetPriorityGrouping>
 80012d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	6978      	ldr	r0, [r7, #20]
 80012dc:	f7ff ff8e 	bl	80011fc <NVIC_EncodePriority>
 80012e0:	4602      	mov	r2, r0
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff5d 	bl	80011a8 <__NVIC_SetPriority>
}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff31 	bl	800116c <__NVIC_EnableIRQ>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffa2 	bl	8001264 <SysTick_Config>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133a:	e160      	b.n	80015fe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 8152 	beq.w	80015f8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b01      	cmp	r3, #1
 800135e:	d005      	beq.n	800136c <HAL_GPIO_Init+0x40>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d130      	bne.n	80013ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013a2:	2201      	movs	r2, #1
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	091b      	lsrs	r3, r3, #4
 80013b8:	f003 0201 	and.w	r2, r3, #1
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d017      	beq.n	800140a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	2203      	movs	r2, #3
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d123      	bne.n	800145e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	08da      	lsrs	r2, r3, #3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3208      	adds	r2, #8
 800141e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	220f      	movs	r2, #15
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	691a      	ldr	r2, [r3, #16]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	08da      	lsrs	r2, r3, #3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3208      	adds	r2, #8
 8001458:	6939      	ldr	r1, [r7, #16]
 800145a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0203 	and.w	r2, r3, #3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 80ac 	beq.w	80015f8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a0:	4b5e      	ldr	r3, [pc, #376]	@ (800161c <HAL_GPIO_Init+0x2f0>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a5d      	ldr	r2, [pc, #372]	@ (800161c <HAL_GPIO_Init+0x2f0>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b5b      	ldr	r3, [pc, #364]	@ (800161c <HAL_GPIO_Init+0x2f0>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b8:	4a59      	ldr	r2, [pc, #356]	@ (8001620 <HAL_GPIO_Init+0x2f4>)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	220f      	movs	r2, #15
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014e2:	d025      	beq.n	8001530 <HAL_GPIO_Init+0x204>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a4f      	ldr	r2, [pc, #316]	@ (8001624 <HAL_GPIO_Init+0x2f8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d01f      	beq.n	800152c <HAL_GPIO_Init+0x200>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a4e      	ldr	r2, [pc, #312]	@ (8001628 <HAL_GPIO_Init+0x2fc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d019      	beq.n	8001528 <HAL_GPIO_Init+0x1fc>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a4d      	ldr	r2, [pc, #308]	@ (800162c <HAL_GPIO_Init+0x300>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d013      	beq.n	8001524 <HAL_GPIO_Init+0x1f8>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a4c      	ldr	r2, [pc, #304]	@ (8001630 <HAL_GPIO_Init+0x304>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d00d      	beq.n	8001520 <HAL_GPIO_Init+0x1f4>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a4b      	ldr	r2, [pc, #300]	@ (8001634 <HAL_GPIO_Init+0x308>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d007      	beq.n	800151c <HAL_GPIO_Init+0x1f0>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a4a      	ldr	r2, [pc, #296]	@ (8001638 <HAL_GPIO_Init+0x30c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d101      	bne.n	8001518 <HAL_GPIO_Init+0x1ec>
 8001514:	2306      	movs	r3, #6
 8001516:	e00c      	b.n	8001532 <HAL_GPIO_Init+0x206>
 8001518:	2307      	movs	r3, #7
 800151a:	e00a      	b.n	8001532 <HAL_GPIO_Init+0x206>
 800151c:	2305      	movs	r3, #5
 800151e:	e008      	b.n	8001532 <HAL_GPIO_Init+0x206>
 8001520:	2304      	movs	r3, #4
 8001522:	e006      	b.n	8001532 <HAL_GPIO_Init+0x206>
 8001524:	2303      	movs	r3, #3
 8001526:	e004      	b.n	8001532 <HAL_GPIO_Init+0x206>
 8001528:	2302      	movs	r3, #2
 800152a:	e002      	b.n	8001532 <HAL_GPIO_Init+0x206>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <HAL_GPIO_Init+0x206>
 8001530:	2300      	movs	r3, #0
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	f002 0203 	and.w	r2, r2, #3
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	4093      	lsls	r3, r2
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001542:	4937      	ldr	r1, [pc, #220]	@ (8001620 <HAL_GPIO_Init+0x2f4>)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001550:	4b3a      	ldr	r3, [pc, #232]	@ (800163c <HAL_GPIO_Init+0x310>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001574:	4a31      	ldr	r2, [pc, #196]	@ (800163c <HAL_GPIO_Init+0x310>)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800157a:	4b30      	ldr	r3, [pc, #192]	@ (800163c <HAL_GPIO_Init+0x310>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	43db      	mvns	r3, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800159e:	4a27      	ldr	r2, [pc, #156]	@ (800163c <HAL_GPIO_Init+0x310>)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015a4:	4b25      	ldr	r3, [pc, #148]	@ (800163c <HAL_GPIO_Init+0x310>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015c8:	4a1c      	ldr	r2, [pc, #112]	@ (800163c <HAL_GPIO_Init+0x310>)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ce:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <HAL_GPIO_Init+0x310>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015f2:	4a12      	ldr	r2, [pc, #72]	@ (800163c <HAL_GPIO_Init+0x310>)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3301      	adds	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	f47f ae97 	bne.w	800133c <HAL_GPIO_Init+0x10>
  }
}
 800160e:	bf00      	nop
 8001610:	bf00      	nop
 8001612:	371c      	adds	r7, #28
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000
 8001624:	48000400 	.word	0x48000400
 8001628:	48000800 	.word	0x48000800
 800162c:	48000c00 	.word	0x48000c00
 8001630:	48001000 	.word	0x48001000
 8001634:	48001400 	.word	0x48001400
 8001638:	48001800 	.word	0x48001800
 800163c:	40010400 	.word	0x40010400

08001640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
 800164c:	4613      	mov	r3, r2
 800164e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001650:	787b      	ldrb	r3, [r7, #1]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800165c:	e002      	b.n	8001664 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800165e:	887a      	ldrh	r2, [r7, #2]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001676:	af00      	add	r7, sp, #0
 8001678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800167c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001680:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001682:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001686:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	f001 b83a 	b.w	800270a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800169a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 816f 	beq.w	800198a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016ac:	4bb5      	ldr	r3, [pc, #724]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d00c      	beq.n	80016d2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016b8:	4bb2      	ldr	r3, [pc, #712]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d15c      	bne.n	800177e <HAL_RCC_OscConfig+0x10e>
 80016c4:	4baf      	ldr	r3, [pc, #700]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80016cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016d0:	d155      	bne.n	800177e <HAL_RCC_OscConfig+0x10e>
 80016d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016d6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80016de:	fa93 f3a3 	rbit	r3, r3
 80016e2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ea:	fab3 f383 	clz	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	095b      	lsrs	r3, r3, #5
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d102      	bne.n	8001704 <HAL_RCC_OscConfig+0x94>
 80016fe:	4ba1      	ldr	r3, [pc, #644]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	e015      	b.n	8001730 <HAL_RCC_OscConfig+0xc0>
 8001704:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001708:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001710:	fa93 f3a3 	rbit	r3, r3
 8001714:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001718:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800171c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001720:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001724:	fa93 f3a3 	rbit	r3, r3
 8001728:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800172c:	4b95      	ldr	r3, [pc, #596]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 800172e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001730:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001734:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001738:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800173c:	fa92 f2a2 	rbit	r2, r2
 8001740:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001744:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001748:	fab2 f282 	clz	r2, r2
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	f042 0220 	orr.w	r2, r2, #32
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	f002 021f 	and.w	r2, r2, #31
 8001758:	2101      	movs	r1, #1
 800175a:	fa01 f202 	lsl.w	r2, r1, r2
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 8111 	beq.w	8001988 <HAL_RCC_OscConfig+0x318>
 8001766:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800176a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f040 8108 	bne.w	8001988 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	f000 bfc6 	b.w	800270a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001782:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800178e:	d106      	bne.n	800179e <HAL_RCC_OscConfig+0x12e>
 8001790:	4b7c      	ldr	r3, [pc, #496]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a7b      	ldr	r2, [pc, #492]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 8001796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	e036      	b.n	800180c <HAL_RCC_OscConfig+0x19c>
 800179e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x158>
 80017ae:	4b75      	ldr	r3, [pc, #468]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a74      	ldr	r2, [pc, #464]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 80017b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b72      	ldr	r3, [pc, #456]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a71      	ldr	r2, [pc, #452]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 80017c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e021      	b.n	800180c <HAL_RCC_OscConfig+0x19c>
 80017c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017d8:	d10c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x184>
 80017da:	4b6a      	ldr	r3, [pc, #424]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a69      	ldr	r2, [pc, #420]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 80017e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	4b67      	ldr	r3, [pc, #412]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a66      	ldr	r2, [pc, #408]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e00b      	b.n	800180c <HAL_RCC_OscConfig+0x19c>
 80017f4:	4b63      	ldr	r3, [pc, #396]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a62      	ldr	r2, [pc, #392]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 80017fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b60      	ldr	r3, [pc, #384]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a5f      	ldr	r2, [pc, #380]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 8001806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800180a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800180c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001810:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d059      	beq.n	80018d0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7fe ff2c 	bl	8000678 <HAL_GetTick>
 8001820:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001824:	e00a      	b.n	800183c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001826:	f7fe ff27 	bl	8000678 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	@ 0x64
 8001834:	d902      	bls.n	800183c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	f000 bf67 	b.w	800270a <HAL_RCC_OscConfig+0x109a>
 800183c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001840:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001850:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d102      	bne.n	800186e <HAL_RCC_OscConfig+0x1fe>
 8001868:	4b46      	ldr	r3, [pc, #280]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e015      	b.n	800189a <HAL_RCC_OscConfig+0x22a>
 800186e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001872:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800187a:	fa93 f3a3 	rbit	r3, r3
 800187e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001882:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001886:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800188a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001896:	4b3b      	ldr	r3, [pc, #236]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 8001898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800189e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80018a2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80018a6:	fa92 f2a2 	rbit	r2, r2
 80018aa:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80018ae:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80018b2:	fab2 f282 	clz	r2, r2
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	f042 0220 	orr.w	r2, r2, #32
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	f002 021f 	and.w	r2, r2, #31
 80018c2:	2101      	movs	r1, #1
 80018c4:	fa01 f202 	lsl.w	r2, r1, r2
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0ab      	beq.n	8001826 <HAL_RCC_OscConfig+0x1b6>
 80018ce:	e05c      	b.n	800198a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7fe fed2 	bl	8000678 <HAL_GetTick>
 80018d4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018da:	f7fe fecd 	bl	8000678 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	@ 0x64
 80018e8:	d902      	bls.n	80018f0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	f000 bf0d 	b.w	800270a <HAL_RCC_OscConfig+0x109a>
 80018f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018f4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001904:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d102      	bne.n	8001922 <HAL_RCC_OscConfig+0x2b2>
 800191c:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	e015      	b.n	800194e <HAL_RCC_OscConfig+0x2de>
 8001922:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001926:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001936:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800193a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800193e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <HAL_RCC_OscConfig+0x314>)
 800194c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001952:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001956:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800195a:	fa92 f2a2 	rbit	r2, r2
 800195e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001962:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001966:	fab2 f282 	clz	r2, r2
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f042 0220 	orr.w	r2, r2, #32
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f002 021f 	and.w	r2, r2, #31
 8001976:	2101      	movs	r1, #1
 8001978:	fa01 f202 	lsl.w	r2, r1, r2
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1ab      	bne.n	80018da <HAL_RCC_OscConfig+0x26a>
 8001982:	e002      	b.n	800198a <HAL_RCC_OscConfig+0x31a>
 8001984:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800198e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 817f 	beq.w	8001c9e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019a0:	4ba7      	ldr	r3, [pc, #668]	@ (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019ac:	4ba4      	ldr	r3, [pc, #656]	@ (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d173      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x430>
 80019b8:	4ba1      	ldr	r3, [pc, #644]	@ (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80019c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019c4:	d16c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x430>
 80019c6:	2302      	movs	r3, #2
 80019c8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80019d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d102      	bne.n	80019f6 <HAL_RCC_OscConfig+0x386>
 80019f0:	4b93      	ldr	r3, [pc, #588]	@ (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	e013      	b.n	8001a1e <HAL_RCC_OscConfig+0x3ae>
 80019f6:	2302      	movs	r3, #2
 80019f8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001a08:	2302      	movs	r3, #2
 8001a0a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001a0e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001a1a:	4b89      	ldr	r3, [pc, #548]	@ (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1e:	2202      	movs	r2, #2
 8001a20:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001a24:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001a28:	fa92 f2a2 	rbit	r2, r2
 8001a2c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001a30:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001a34:	fab2 f282 	clz	r2, r2
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	f042 0220 	orr.w	r2, r2, #32
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	f002 021f 	and.w	r2, r2, #31
 8001a44:	2101      	movs	r1, #1
 8001a46:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00a      	beq.n	8001a66 <HAL_RCC_OscConfig+0x3f6>
 8001a50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d002      	beq.n	8001a66 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	f000 be52 	b.w	800270a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a66:	4b76      	ldr	r3, [pc, #472]	@ (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	21f8      	movs	r1, #248	@ 0xf8
 8001a7c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001a84:	fa91 f1a1 	rbit	r1, r1
 8001a88:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001a8c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001a90:	fab1 f181 	clz	r1, r1
 8001a94:	b2c9      	uxtb	r1, r1
 8001a96:	408b      	lsls	r3, r1
 8001a98:	4969      	ldr	r1, [pc, #420]	@ (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	e0fe      	b.n	8001c9e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 8088 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x552>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001ac4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac8:	fab3 f383 	clz	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ad2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2301      	movs	r3, #1
 8001adc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ade:	f7fe fdcb 	bl	8000678 <HAL_GetTick>
 8001ae2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae8:	f7fe fdc6 	bl	8000678 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d902      	bls.n	8001afe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	f000 be06 	b.w	800270a <HAL_RCC_OscConfig+0x109a>
 8001afe:	2302      	movs	r3, #2
 8001b00:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001b08:	fa93 f3a3 	rbit	r3, r3
 8001b0c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001b10:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b14:	fab3 f383 	clz	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d102      	bne.n	8001b2e <HAL_RCC_OscConfig+0x4be>
 8001b28:	4b45      	ldr	r3, [pc, #276]	@ (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	e013      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e6>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001b38:	fa93 f3a3 	rbit	r3, r3
 8001b3c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001b40:	2302      	movs	r3, #2
 8001b42:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001b46:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001b52:	4b3b      	ldr	r3, [pc, #236]	@ (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	2202      	movs	r2, #2
 8001b58:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001b5c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001b60:	fa92 f2a2 	rbit	r2, r2
 8001b64:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001b68:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001b6c:	fab2 f282 	clz	r2, r2
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	f042 0220 	orr.w	r2, r2, #32
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	f002 021f 	and.w	r2, r2, #31
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0af      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b2d      	ldr	r3, [pc, #180]	@ (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	21f8      	movs	r1, #248	@ 0xf8
 8001b9e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001ba6:	fa91 f1a1 	rbit	r1, r1
 8001baa:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001bae:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001bb2:	fab1 f181 	clz	r1, r1
 8001bb6:	b2c9      	uxtb	r1, r1
 8001bb8:	408b      	lsls	r3, r1
 8001bba:	4921      	ldr	r1, [pc, #132]	@ (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
 8001bc0:	e06d      	b.n	8001c9e <HAL_RCC_OscConfig+0x62e>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001bd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001be2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	461a      	mov	r2, r3
 8001bea:	2300      	movs	r3, #0
 8001bec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7fe fd43 	bl	8000678 <HAL_GetTick>
 8001bf2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf8:	f7fe fd3e 	bl	8000678 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d902      	bls.n	8001c0e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	f000 bd7e 	b.w	800270a <HAL_RCC_OscConfig+0x109a>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001c20:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d105      	bne.n	8001c44 <HAL_RCC_OscConfig+0x5d4>
 8001c38:	4b01      	ldr	r3, [pc, #4]	@ (8001c40 <HAL_RCC_OscConfig+0x5d0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	e016      	b.n	8001c6c <HAL_RCC_OscConfig+0x5fc>
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	2302      	movs	r3, #2
 8001c46:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001c4e:	fa93 f3a3 	rbit	r3, r3
 8001c52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001c56:	2302      	movs	r3, #2
 8001c58:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001c5c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001c68:	4bbf      	ldr	r3, [pc, #764]	@ (8001f68 <HAL_RCC_OscConfig+0x8f8>)
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001c72:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001c76:	fa92 f2a2 	rbit	r2, r2
 8001c7a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001c7e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001c82:	fab2 f282 	clz	r2, r2
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	f042 0220 	orr.w	r2, r2, #32
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	f002 021f 	and.w	r2, r2, #31
 8001c92:	2101      	movs	r1, #1
 8001c94:	fa01 f202 	lsl.w	r2, r1, r2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1ac      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8113 	beq.w	8001eda <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d07c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x74e>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001cd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4ba2      	ldr	r3, [pc, #648]	@ (8001f6c <HAL_RCC_OscConfig+0x8fc>)
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2301      	movs	r3, #1
 8001cec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cee:	f7fe fcc3 	bl	8000678 <HAL_GetTick>
 8001cf2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf8:	f7fe fcbe 	bl	8000678 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d902      	bls.n	8001d0e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	f000 bcfe 	b.w	800270a <HAL_RCC_OscConfig+0x109a>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d20:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d2e:	2202      	movs	r2, #2
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	fa93 f2a3 	rbit	r2, r3
 8001d40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d52:	2202      	movs	r2, #2
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	fa93 f2a3 	rbit	r2, r3
 8001d64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d68:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d6c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	4b7e      	ldr	r3, [pc, #504]	@ (8001f68 <HAL_RCC_OscConfig+0x8f8>)
 8001d70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d76:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	6019      	str	r1, [r3, #0]
 8001d7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d82:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fa93 f1a3 	rbit	r1, r3
 8001d8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d90:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d94:	6019      	str	r1, [r3, #0]
  return result;
 8001d96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d9a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	2101      	movs	r1, #1
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d09d      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x688>
 8001dbc:	e08d      	b.n	8001eda <HAL_RCC_OscConfig+0x86a>
 8001dbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	fa93 f2a3 	rbit	r2, r3
 8001dd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ddc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001de0:	601a      	str	r2, [r3, #0]
  return result;
 8001de2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001dea:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b5d      	ldr	r3, [pc, #372]	@ (8001f6c <HAL_RCC_OscConfig+0x8fc>)
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7fe fc3a 	bl	8000678 <HAL_GetTick>
 8001e04:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0a:	f7fe fc35 	bl	8000678 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d902      	bls.n	8001e20 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	f000 bc75 	b.w	800270a <HAL_RCC_OscConfig+0x109a>
 8001e20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e24:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e28:	2202      	movs	r2, #2
 8001e2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e30:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	fa93 f2a3 	rbit	r2, r3
 8001e3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e3e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	fa93 f2a3 	rbit	r2, r3
 8001e5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e62:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e6c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e70:	2202      	movs	r2, #2
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e78:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	fa93 f2a3 	rbit	r2, r3
 8001e82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e86:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e8a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	4b36      	ldr	r3, [pc, #216]	@ (8001f68 <HAL_RCC_OscConfig+0x8f8>)
 8001e8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e94:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e98:	2102      	movs	r1, #2
 8001e9a:	6019      	str	r1, [r3, #0]
 8001e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	fa93 f1a3 	rbit	r1, r3
 8001eaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eae:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001eb2:	6019      	str	r1, [r3, #0]
  return result;
 8001eb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eb8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	2101      	movs	r1, #1
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d197      	bne.n	8001e0a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ede:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 81a5 	beq.w	800223a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f68 <HAL_RCC_OscConfig+0x8f8>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d116      	bne.n	8001f30 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <HAL_RCC_OscConfig+0x8f8>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	4a18      	ldr	r2, [pc, #96]	@ (8001f68 <HAL_RCC_OscConfig+0x8f8>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f0c:	61d3      	str	r3, [r2, #28]
 8001f0e:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <HAL_RCC_OscConfig+0x8f8>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001f16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f28:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <HAL_RCC_OscConfig+0x900>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d121      	bne.n	8001f80 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <HAL_RCC_OscConfig+0x900>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0b      	ldr	r2, [pc, #44]	@ (8001f70 <HAL_RCC_OscConfig+0x900>)
 8001f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f46:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f48:	f7fe fb96 	bl	8000678 <HAL_GetTick>
 8001f4c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	e010      	b.n	8001f74 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f52:	f7fe fb91 	bl	8000678 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	@ 0x64
 8001f60:	d908      	bls.n	8001f74 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e3d1      	b.n	800270a <HAL_RCC_OscConfig+0x109a>
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	10908120 	.word	0x10908120
 8001f70:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	4b8d      	ldr	r3, [pc, #564]	@ (80021ac <HAL_RCC_OscConfig+0xb3c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0e8      	beq.n	8001f52 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x92e>
 8001f90:	4b87      	ldr	r3, [pc, #540]	@ (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4a86      	ldr	r2, [pc, #536]	@ (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6213      	str	r3, [r2, #32]
 8001f9c:	e035      	b.n	800200a <HAL_RCC_OscConfig+0x99a>
 8001f9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fa2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x958>
 8001fae:	4b80      	ldr	r3, [pc, #512]	@ (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4a7f      	ldr	r2, [pc, #508]	@ (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	6213      	str	r3, [r2, #32]
 8001fba:	4b7d      	ldr	r3, [pc, #500]	@ (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4a7c      	ldr	r2, [pc, #496]	@ (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001fc0:	f023 0304 	bic.w	r3, r3, #4
 8001fc4:	6213      	str	r3, [r2, #32]
 8001fc6:	e020      	b.n	800200a <HAL_RCC_OscConfig+0x99a>
 8001fc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fcc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d10c      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x982>
 8001fd8:	4b75      	ldr	r3, [pc, #468]	@ (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4a74      	ldr	r2, [pc, #464]	@ (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001fde:	f043 0304 	orr.w	r3, r3, #4
 8001fe2:	6213      	str	r3, [r2, #32]
 8001fe4:	4b72      	ldr	r3, [pc, #456]	@ (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a71      	ldr	r2, [pc, #452]	@ (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	e00b      	b.n	800200a <HAL_RCC_OscConfig+0x99a>
 8001ff2:	4b6f      	ldr	r3, [pc, #444]	@ (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	4a6e      	ldr	r2, [pc, #440]	@ (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	6213      	str	r3, [r2, #32]
 8001ffe:	4b6c      	ldr	r3, [pc, #432]	@ (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4a6b      	ldr	r2, [pc, #428]	@ (80021b0 <HAL_RCC_OscConfig+0xb40>)
 8002004:	f023 0304 	bic.w	r3, r3, #4
 8002008:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800200a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 8081 	beq.w	800211e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201c:	f7fe fb2c 	bl	8000678 <HAL_GetTick>
 8002020:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002024:	e00b      	b.n	800203e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7fe fb27 	bl	8000678 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e365      	b.n	800270a <HAL_RCC_OscConfig+0x109a>
 800203e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002042:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002046:	2202      	movs	r2, #2
 8002048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fa93 f2a3 	rbit	r2, r3
 8002058:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800205c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002066:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800206a:	2202      	movs	r2, #2
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002072:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	fa93 f2a3 	rbit	r2, r3
 800207c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002080:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002084:	601a      	str	r2, [r3, #0]
  return result;
 8002086:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800208a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800208e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	b2db      	uxtb	r3, r3
 800209a:	f043 0302 	orr.w	r3, r3, #2
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d102      	bne.n	80020aa <HAL_RCC_OscConfig+0xa3a>
 80020a4:	4b42      	ldr	r3, [pc, #264]	@ (80021b0 <HAL_RCC_OscConfig+0xb40>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	e013      	b.n	80020d2 <HAL_RCC_OscConfig+0xa62>
 80020aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80020b2:	2202      	movs	r2, #2
 80020b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ba:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	fa93 f2a3 	rbit	r2, r3
 80020c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020c8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	4b38      	ldr	r3, [pc, #224]	@ (80021b0 <HAL_RCC_OscConfig+0xb40>)
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020d6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80020da:	2102      	movs	r1, #2
 80020dc:	6011      	str	r1, [r2, #0]
 80020de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020e2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	fa92 f1a2 	rbit	r1, r2
 80020ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020f0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80020f4:	6011      	str	r1, [r2, #0]
  return result;
 80020f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020fa:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	fab2 f282 	clz	r2, r2
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	f002 021f 	and.w	r2, r2, #31
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f202 	lsl.w	r2, r1, r2
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d084      	beq.n	8002026 <HAL_RCC_OscConfig+0x9b6>
 800211c:	e083      	b.n	8002226 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211e:	f7fe faab 	bl	8000678 <HAL_GetTick>
 8002122:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002126:	e00b      	b.n	8002140 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7fe faa6 	bl	8000678 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e2e4      	b.n	800270a <HAL_RCC_OscConfig+0x109a>
 8002140:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002144:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002148:	2202      	movs	r2, #2
 800214a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002150:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	fa93 f2a3 	rbit	r2, r3
 800215a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800215e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002168:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800216c:	2202      	movs	r2, #2
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002174:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	fa93 f2a3 	rbit	r2, r3
 800217e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002182:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002186:	601a      	str	r2, [r3, #0]
  return result;
 8002188:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800218c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002190:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	095b      	lsrs	r3, r3, #5
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d106      	bne.n	80021b4 <HAL_RCC_OscConfig+0xb44>
 80021a6:	4b02      	ldr	r3, [pc, #8]	@ (80021b0 <HAL_RCC_OscConfig+0xb40>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	e017      	b.n	80021dc <HAL_RCC_OscConfig+0xb6c>
 80021ac:	40007000 	.word	0x40007000
 80021b0:	40021000 	.word	0x40021000
 80021b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80021bc:	2202      	movs	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	fa93 f2a3 	rbit	r2, r3
 80021ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	4bb3      	ldr	r3, [pc, #716]	@ (80024a8 <HAL_RCC_OscConfig+0xe38>)
 80021da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021dc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021e0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80021e4:	2102      	movs	r1, #2
 80021e6:	6011      	str	r1, [r2, #0]
 80021e8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021ec:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	fa92 f1a2 	rbit	r1, r2
 80021f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021fa:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80021fe:	6011      	str	r1, [r2, #0]
  return result;
 8002200:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002204:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	fab2 f282 	clz	r2, r2
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	f002 021f 	and.w	r2, r2, #31
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f202 	lsl.w	r2, r1, r2
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d180      	bne.n	8002128 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002226:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800222a:	2b01      	cmp	r3, #1
 800222c:	d105      	bne.n	800223a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222e:	4b9e      	ldr	r3, [pc, #632]	@ (80024a8 <HAL_RCC_OscConfig+0xe38>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	4a9d      	ldr	r2, [pc, #628]	@ (80024a8 <HAL_RCC_OscConfig+0xe38>)
 8002234:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002238:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800223e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 825e 	beq.w	8002708 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800224c:	4b96      	ldr	r3, [pc, #600]	@ (80024a8 <HAL_RCC_OscConfig+0xe38>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	f000 821f 	beq.w	8002698 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800225e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b02      	cmp	r3, #2
 8002268:	f040 8170 	bne.w	800254c <HAL_RCC_OscConfig+0xedc>
 800226c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002270:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002274:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800227e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	fa93 f2a3 	rbit	r2, r3
 8002288:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800228c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002290:	601a      	str	r2, [r3, #0]
  return result;
 8002292:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002296:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800229a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022a6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	461a      	mov	r2, r3
 80022ae:	2300      	movs	r3, #0
 80022b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b2:	f7fe f9e1 	bl	8000678 <HAL_GetTick>
 80022b6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ba:	e009      	b.n	80022d0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022bc:	f7fe f9dc 	bl	8000678 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e21c      	b.n	800270a <HAL_RCC_OscConfig+0x109a>
 80022d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fa93 f2a3 	rbit	r2, r3
 80022ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80022f4:	601a      	str	r2, [r3, #0]
  return result;
 80022f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022fa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80022fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b01      	cmp	r3, #1
 8002312:	d102      	bne.n	800231a <HAL_RCC_OscConfig+0xcaa>
 8002314:	4b64      	ldr	r3, [pc, #400]	@ (80024a8 <HAL_RCC_OscConfig+0xe38>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	e027      	b.n	800236a <HAL_RCC_OscConfig+0xcfa>
 800231a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800231e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002322:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800232c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	fa93 f2a3 	rbit	r2, r3
 8002336:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800233a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002344:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002348:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002352:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	fa93 f2a3 	rbit	r2, r3
 800235c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002360:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	4b50      	ldr	r3, [pc, #320]	@ (80024a8 <HAL_RCC_OscConfig+0xe38>)
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800236e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002372:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002376:	6011      	str	r1, [r2, #0]
 8002378:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800237c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	fa92 f1a2 	rbit	r1, r2
 8002386:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800238a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800238e:	6011      	str	r1, [r2, #0]
  return result;
 8002390:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002394:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	fab2 f282 	clz	r2, r2
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f042 0220 	orr.w	r2, r2, #32
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	f002 021f 	and.w	r2, r2, #31
 80023aa:	2101      	movs	r1, #1
 80023ac:	fa01 f202 	lsl.w	r2, r1, r2
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d182      	bne.n	80022bc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b6:	4b3c      	ldr	r3, [pc, #240]	@ (80024a8 <HAL_RCC_OscConfig+0xe38>)
 80023b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ba:	f023 020f 	bic.w	r2, r3, #15
 80023be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	4937      	ldr	r1, [pc, #220]	@ (80024a8 <HAL_RCC_OscConfig+0xe38>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80023d0:	4b35      	ldr	r3, [pc, #212]	@ (80024a8 <HAL_RCC_OscConfig+0xe38>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80023d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6a19      	ldr	r1, [r3, #32]
 80023e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	430b      	orrs	r3, r1
 80023f2:	492d      	ldr	r1, [pc, #180]	@ (80024a8 <HAL_RCC_OscConfig+0xe38>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
 80023f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023fc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002400:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800240a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f2a3 	rbit	r2, r3
 8002414:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002418:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800241c:	601a      	str	r2, [r3, #0]
  return result;
 800241e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002422:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002426:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002432:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	461a      	mov	r2, r3
 800243a:	2301      	movs	r3, #1
 800243c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243e:	f7fe f91b 	bl	8000678 <HAL_GetTick>
 8002442:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002446:	e009      	b.n	800245c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe f916 	bl	8000678 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e156      	b.n	800270a <HAL_RCC_OscConfig+0x109a>
 800245c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002460:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002464:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800246e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	fa93 f2a3 	rbit	r2, r3
 8002478:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800247c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002480:	601a      	str	r2, [r3, #0]
  return result;
 8002482:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002486:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800248a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d105      	bne.n	80024ac <HAL_RCC_OscConfig+0xe3c>
 80024a0:	4b01      	ldr	r3, [pc, #4]	@ (80024a8 <HAL_RCC_OscConfig+0xe38>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	e02a      	b.n	80024fc <HAL_RCC_OscConfig+0xe8c>
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
 80024ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024be:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	fa93 f2a3 	rbit	r2, r3
 80024c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024cc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80024da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	fa93 f2a3 	rbit	r2, r3
 80024ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	4b86      	ldr	r3, [pc, #536]	@ (8002714 <HAL_RCC_OscConfig+0x10a4>)
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002500:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002504:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002508:	6011      	str	r1, [r2, #0]
 800250a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800250e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	fa92 f1a2 	rbit	r1, r2
 8002518:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800251c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002520:	6011      	str	r1, [r2, #0]
  return result;
 8002522:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002526:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	fab2 f282 	clz	r2, r2
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f042 0220 	orr.w	r2, r2, #32
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	f002 021f 	and.w	r2, r2, #31
 800253c:	2101      	movs	r1, #1
 800253e:	fa01 f202 	lsl.w	r2, r1, r2
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	f43f af7f 	beq.w	8002448 <HAL_RCC_OscConfig+0xdd8>
 800254a:	e0dd      	b.n	8002708 <HAL_RCC_OscConfig+0x1098>
 800254c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002550:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002554:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800255e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	fa93 f2a3 	rbit	r2, r3
 8002568:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800256c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002570:	601a      	str	r2, [r3, #0]
  return result;
 8002572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002576:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800257a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002586:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	461a      	mov	r2, r3
 800258e:	2300      	movs	r3, #0
 8002590:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fe f871 	bl	8000678 <HAL_GetTick>
 8002596:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259a:	e009      	b.n	80025b0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259c:	f7fe f86c 	bl	8000678 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e0ac      	b.n	800270a <HAL_RCC_OscConfig+0x109a>
 80025b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80025b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	fa93 f2a3 	rbit	r2, r3
 80025cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80025d4:	601a      	str	r2, [r3, #0]
  return result;
 80025d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025da:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80025de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d102      	bne.n	80025fa <HAL_RCC_OscConfig+0xf8a>
 80025f4:	4b47      	ldr	r3, [pc, #284]	@ (8002714 <HAL_RCC_OscConfig+0x10a4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	e027      	b.n	800264a <HAL_RCC_OscConfig+0xfda>
 80025fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025fe:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002602:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002606:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800260c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	fa93 f2a3 	rbit	r2, r3
 8002616:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800261a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002624:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002628:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002632:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	fa93 f2a3 	rbit	r2, r3
 800263c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002640:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	4b33      	ldr	r3, [pc, #204]	@ (8002714 <HAL_RCC_OscConfig+0x10a4>)
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800264e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002652:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002656:	6011      	str	r1, [r2, #0]
 8002658:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800265c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	fa92 f1a2 	rbit	r1, r2
 8002666:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800266a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800266e:	6011      	str	r1, [r2, #0]
  return result;
 8002670:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002674:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	fab2 f282 	clz	r2, r2
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	f042 0220 	orr.w	r2, r2, #32
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	f002 021f 	and.w	r2, r2, #31
 800268a:	2101      	movs	r1, #1
 800268c:	fa01 f202 	lsl.w	r2, r1, r2
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d182      	bne.n	800259c <HAL_RCC_OscConfig+0xf2c>
 8002696:	e037      	b.n	8002708 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002698:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800269c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e02e      	b.n	800270a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026ac:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <HAL_RCC_OscConfig+0x10a4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80026b4:	4b17      	ldr	r3, [pc, #92]	@ (8002714 <HAL_RCC_OscConfig+0x10a4>)
 80026b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80026c0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80026c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d117      	bne.n	8002704 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80026d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80026d8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d10b      	bne.n	8002704 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80026ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026f0:	f003 020f 	and.w	r2, r3, #15
 80026f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b09e      	sub	sp, #120	@ 0x78
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e162      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002730:	4b90      	ldr	r3, [pc, #576]	@ (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d910      	bls.n	8002760 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b8d      	ldr	r3, [pc, #564]	@ (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 0207 	bic.w	r2, r3, #7
 8002746:	498b      	ldr	r1, [pc, #556]	@ (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274e:	4b89      	ldr	r3, [pc, #548]	@ (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d001      	beq.n	8002760 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e14a      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800276c:	4b82      	ldr	r3, [pc, #520]	@ (8002978 <HAL_RCC_ClockConfig+0x260>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	497f      	ldr	r1, [pc, #508]	@ (8002978 <HAL_RCC_ClockConfig+0x260>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80dc 	beq.w	8002944 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d13c      	bne.n	800280e <HAL_RCC_ClockConfig+0xf6>
 8002794:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002798:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80027a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d102      	bne.n	80027be <HAL_RCC_ClockConfig+0xa6>
 80027b8:	4b6f      	ldr	r3, [pc, #444]	@ (8002978 <HAL_RCC_ClockConfig+0x260>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	e00f      	b.n	80027de <HAL_RCC_ClockConfig+0xc6>
 80027be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027c2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80027cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80027d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027da:	4b67      	ldr	r3, [pc, #412]	@ (8002978 <HAL_RCC_ClockConfig+0x260>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027e2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80027e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027e6:	fa92 f2a2 	rbit	r2, r2
 80027ea:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80027ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80027ee:	fab2 f282 	clz	r2, r2
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f042 0220 	orr.w	r2, r2, #32
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f002 021f 	and.w	r2, r2, #31
 80027fe:	2101      	movs	r1, #1
 8002800:	fa01 f202 	lsl.w	r2, r1, r2
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d17b      	bne.n	8002902 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0f3      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d13c      	bne.n	8002890 <HAL_RCC_ClockConfig+0x178>
 8002816:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800281a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d102      	bne.n	8002840 <HAL_RCC_ClockConfig+0x128>
 800283a:	4b4f      	ldr	r3, [pc, #316]	@ (8002978 <HAL_RCC_ClockConfig+0x260>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	e00f      	b.n	8002860 <HAL_RCC_ClockConfig+0x148>
 8002840:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002844:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	647b      	str	r3, [r7, #68]	@ 0x44
 800284e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002852:	643b      	str	r3, [r7, #64]	@ 0x40
 8002854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800285c:	4b46      	ldr	r3, [pc, #280]	@ (8002978 <HAL_RCC_ClockConfig+0x260>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002864:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002866:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002868:	fa92 f2a2 	rbit	r2, r2
 800286c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800286e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f042 0220 	orr.w	r2, r2, #32
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	f002 021f 	and.w	r2, r2, #31
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d13a      	bne.n	8002902 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0b2      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
 8002890:	2302      	movs	r3, #2
 8002892:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800289c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d102      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x1a0>
 80028b2:	4b31      	ldr	r3, [pc, #196]	@ (8002978 <HAL_RCC_ClockConfig+0x260>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	e00d      	b.n	80028d4 <HAL_RCC_ClockConfig+0x1bc>
 80028b8:	2302      	movs	r3, #2
 80028ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c4:	2302      	movs	r3, #2
 80028c6:	623b      	str	r3, [r7, #32]
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	4b29      	ldr	r3, [pc, #164]	@ (8002978 <HAL_RCC_ClockConfig+0x260>)
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	2202      	movs	r2, #2
 80028d6:	61ba      	str	r2, [r7, #24]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	fa92 f2a2 	rbit	r2, r2
 80028de:	617a      	str	r2, [r7, #20]
  return result;
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	fab2 f282 	clz	r2, r2
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	f042 0220 	orr.w	r2, r2, #32
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	f002 021f 	and.w	r2, r2, #31
 80028f2:	2101      	movs	r1, #1
 80028f4:	fa01 f202 	lsl.w	r2, r1, r2
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e079      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002902:	4b1d      	ldr	r3, [pc, #116]	@ (8002978 <HAL_RCC_ClockConfig+0x260>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f023 0203 	bic.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	491a      	ldr	r1, [pc, #104]	@ (8002978 <HAL_RCC_ClockConfig+0x260>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002914:	f7fd feb0 	bl	8000678 <HAL_GetTick>
 8002918:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	e00a      	b.n	8002932 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291c:	f7fd feac 	bl	8000678 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e061      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <HAL_RCC_ClockConfig+0x260>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 020c 	and.w	r2, r3, #12
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	429a      	cmp	r2, r3
 8002942:	d1eb      	bne.n	800291c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002944:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d214      	bcs.n	800297c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b08      	ldr	r3, [pc, #32]	@ (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 0207 	bic.w	r2, r3, #7
 800295a:	4906      	ldr	r1, [pc, #24]	@ (8002974 <HAL_RCC_ClockConfig+0x25c>)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b04      	ldr	r3, [pc, #16]	@ (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e040      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
 8002974:	40022000 	.word	0x40022000
 8002978:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002988:	4b1d      	ldr	r3, [pc, #116]	@ (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	491a      	ldr	r1, [pc, #104]	@ (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 8002996:	4313      	orrs	r3, r2
 8002998:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a6:	4b16      	ldr	r3, [pc, #88]	@ (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4912      	ldr	r1, [pc, #72]	@ (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029ba:	f000 f829 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 80029be:	4601      	mov	r1, r0
 80029c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029c8:	22f0      	movs	r2, #240	@ 0xf0
 80029ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	fa92 f2a2 	rbit	r2, r2
 80029d2:	60fa      	str	r2, [r7, #12]
  return result;
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	fab2 f282 	clz	r2, r2
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	40d3      	lsrs	r3, r2
 80029de:	4a09      	ldr	r2, [pc, #36]	@ (8002a04 <HAL_RCC_ClockConfig+0x2ec>)
 80029e0:	5cd3      	ldrb	r3, [r2, r3]
 80029e2:	fa21 f303 	lsr.w	r3, r1, r3
 80029e6:	4a08      	ldr	r2, [pc, #32]	@ (8002a08 <HAL_RCC_ClockConfig+0x2f0>)
 80029e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029ea:	4b08      	ldr	r3, [pc, #32]	@ (8002a0c <HAL_RCC_ClockConfig+0x2f4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fd fdfe 	bl	80005f0 <HAL_InitTick>
  
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3778      	adds	r7, #120	@ 0x78
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	08002b28 	.word	0x08002b28
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	20000004 	.word	0x20000004

08002a10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	2300      	movs	r3, #0
 8002a24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d002      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0x30>
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0x36>
 8002a3e:	e029      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a40:	4b1a      	ldr	r3, [pc, #104]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a42:	613b      	str	r3, [r7, #16]
      break;
 8002a44:	e029      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	0c9b      	lsrs	r3, r3, #18
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	4a18      	ldr	r2, [pc, #96]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a50:	5cd3      	ldrb	r3, [r2, r3]
 8002a52:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002a54:	4b14      	ldr	r3, [pc, #80]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	4a15      	ldr	r2, [pc, #84]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a5e:	5cd3      	ldrb	r3, [r2, r3]
 8002a60:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a6c:	4a0f      	ldr	r2, [pc, #60]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	e007      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	fb02 f303 	mul.w	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	613b      	str	r3, [r7, #16]
      break;
 8002a92:	e002      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a96:	613b      	str	r3, [r7, #16]
      break;
 8002a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9a:	693b      	ldr	r3, [r7, #16]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	371c      	adds	r7, #28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	007a1200 	.word	0x007a1200
 8002ab0:	08002b38 	.word	0x08002b38
 8002ab4:	08002b48 	.word	0x08002b48

08002ab8 <memset>:
 8002ab8:	4402      	add	r2, r0
 8002aba:	4603      	mov	r3, r0
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d100      	bne.n	8002ac2 <memset+0xa>
 8002ac0:	4770      	bx	lr
 8002ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ac6:	e7f9      	b.n	8002abc <memset+0x4>

08002ac8 <__libc_init_array>:
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	4d0d      	ldr	r5, [pc, #52]	@ (8002b00 <__libc_init_array+0x38>)
 8002acc:	4c0d      	ldr	r4, [pc, #52]	@ (8002b04 <__libc_init_array+0x3c>)
 8002ace:	1b64      	subs	r4, r4, r5
 8002ad0:	10a4      	asrs	r4, r4, #2
 8002ad2:	2600      	movs	r6, #0
 8002ad4:	42a6      	cmp	r6, r4
 8002ad6:	d109      	bne.n	8002aec <__libc_init_array+0x24>
 8002ad8:	4d0b      	ldr	r5, [pc, #44]	@ (8002b08 <__libc_init_array+0x40>)
 8002ada:	4c0c      	ldr	r4, [pc, #48]	@ (8002b0c <__libc_init_array+0x44>)
 8002adc:	f000 f818 	bl	8002b10 <_init>
 8002ae0:	1b64      	subs	r4, r4, r5
 8002ae2:	10a4      	asrs	r4, r4, #2
 8002ae4:	2600      	movs	r6, #0
 8002ae6:	42a6      	cmp	r6, r4
 8002ae8:	d105      	bne.n	8002af6 <__libc_init_array+0x2e>
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
 8002aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af0:	4798      	blx	r3
 8002af2:	3601      	adds	r6, #1
 8002af4:	e7ee      	b.n	8002ad4 <__libc_init_array+0xc>
 8002af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afa:	4798      	blx	r3
 8002afc:	3601      	adds	r6, #1
 8002afe:	e7f2      	b.n	8002ae6 <__libc_init_array+0x1e>
 8002b00:	08002b58 	.word	0x08002b58
 8002b04:	08002b58 	.word	0x08002b58
 8002b08:	08002b58 	.word	0x08002b58
 8002b0c:	08002b5c 	.word	0x08002b5c

08002b10 <_init>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr

08002b1c <_fini>:
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1e:	bf00      	nop
 8002b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b22:	bc08      	pop	{r3}
 8002b24:	469e      	mov	lr, r3
 8002b26:	4770      	bx	lr
