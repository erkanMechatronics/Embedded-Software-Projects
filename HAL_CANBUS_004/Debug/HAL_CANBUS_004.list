
HAL_CANBUS_004.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002238  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080023c0  080023c0  000123c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023d0  080023d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080023d0  080023d0  000123d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023d8  080023d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023d8  080023d8  000123d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023dc  080023dc  000123dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000007c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000088  20000088  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000061c8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000149b  00000000  00000000  00026247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006a0  00000000  00000000  000276e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004e5  00000000  00000000  00027d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001264  00000000  00000000  0002826d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007577  00000000  00000000  000294d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000be70b  00000000  00000000  00030a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000199c  00000000  00000000  000ef154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000f0af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080023a8 	.word	0x080023a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080023a8 	.word	0x080023a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MCP2515_Reset>:
	return false;
}


void MCP2515_Reset(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	MCP2515_CS_LOW();
 80004c8:	2200      	movs	r2, #0
 80004ca:	2110      	movs	r1, #16
 80004cc:	4806      	ldr	r0, [pc, #24]	; (80004e8 <MCP2515_Reset+0x24>)
 80004ce:	f000 fd19 	bl	8000f04 <HAL_GPIO_WritePin>

	MCP2515_SPI_Transfer(MCP2515_RESET);
 80004d2:	20c0      	movs	r0, #192	; 0xc0
 80004d4:	f000 f80a 	bl	80004ec <MCP2515_SPI_Transfer>

	MCP2515_CS_HIGH();
 80004d8:	2201      	movs	r2, #1
 80004da:	2110      	movs	r1, #16
 80004dc:	4802      	ldr	r0, [pc, #8]	; (80004e8 <MCP2515_Reset+0x24>)
 80004de:	f000 fd11 	bl	8000f04 <HAL_GPIO_WritePin>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40020000 	.word	0x40020000

080004ec <MCP2515_SPI_Transfer>:

void MCP2515_SPI_Transfer(uint8_t data)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1,&data ,1, 100);
 80004f6:	1df9      	adds	r1, r7, #7
 80004f8:	2364      	movs	r3, #100	; 0x64
 80004fa:	2201      	movs	r2, #1
 80004fc:	4803      	ldr	r0, [pc, #12]	; (800050c <MCP2515_SPI_Transfer+0x20>)
 80004fe:	f001 fa08 	bl	8001912 <HAL_SPI_Transmit>
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c

08000510 <MCP2515_SPI_Receive>:
{
  HAL_SPI_Transmit(&hspi1, &data, length, 100);
}

uint8_t MCP2515_SPI_Receive(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  uint8_t returnVal;

  HAL_SPI_Receive(&hspi1, &returnVal, 1, 100);
 8000516:	1df9      	adds	r1, r7, #7
 8000518:	2364      	movs	r3, #100	; 0x64
 800051a:	2201      	movs	r2, #1
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <MCP2515_SPI_Receive+0x1c>)
 800051e:	f001 fb34 	bl	8001b8a <HAL_SPI_Receive>

  return returnVal;
 8000522:	79fb      	ldrb	r3, [r7, #7]
}
 8000524:	4618      	mov	r0, r3
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	2000002c 	.word	0x2000002c

08000530 <MCP2515_ReadByte>:
{
	HAL_SPI_Receive(&hspi1,&returnVal,length,100);
}

uint8_t MCP2515_ReadByte(uint8_t address)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
  uint8_t returnVal;

  MCP2515_CS_LOW();
 800053a:	2200      	movs	r2, #0
 800053c:	2110      	movs	r1, #16
 800053e:	480c      	ldr	r0, [pc, #48]	; (8000570 <MCP2515_ReadByte+0x40>)
 8000540:	f000 fce0 	bl	8000f04 <HAL_GPIO_WritePin>

  MCP2515_SPI_Transfer(MCP2515_READ); // Read Instruction Byte
 8000544:	2003      	movs	r0, #3
 8000546:	f7ff ffd1 	bl	80004ec <MCP2515_SPI_Transfer>
  MCP2515_SPI_Transfer(address);      // Address Byte
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff ffcd 	bl	80004ec <MCP2515_SPI_Transfer>
  returnVal = MCP2515_SPI_Receive();  // Data Return
 8000552:	f7ff ffdd 	bl	8000510 <MCP2515_SPI_Receive>
 8000556:	4603      	mov	r3, r0
 8000558:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 800055a:	2201      	movs	r2, #1
 800055c:	2110      	movs	r1, #16
 800055e:	4804      	ldr	r0, [pc, #16]	; (8000570 <MCP2515_ReadByte+0x40>)
 8000560:	f000 fcd0 	bl	8000f04 <HAL_GPIO_WritePin>

  return returnVal;
 8000564:	7bfb      	ldrb	r3, [r7, #15]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40020000 	.word	0x40020000

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 f9d0 	bl	800091c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f810 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f8ae 	bl	80006e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000584:	f000 f876 	bl	8000674 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  MCP2515_Reset();
 8000588:	f7ff ff9c 	bl	80004c4 <MCP2515_Reset>

  Status_reg_data = MCP2515_ReadByte(MCP2515_CANSTAT);
 800058c:	200e      	movs	r0, #14
 800058e:	f7ff ffcf 	bl	8000530 <MCP2515_ReadByte>
 8000592:	4603      	mov	r3, r0
 8000594:	461a      	mov	r2, r3
 8000596:	4b01      	ldr	r3, [pc, #4]	; (800059c <main+0x28>)
 8000598:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059a:	e7fe      	b.n	800059a <main+0x26>
 800059c:	20000028 	.word	0x20000028

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fece 	bl	8002350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a27      	ldr	r2, [pc, #156]	; (800066c <SystemClock_Config+0xcc>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b25      	ldr	r3, [pc, #148]	; (800066c <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a21      	ldr	r2, [pc, #132]	; (8000670 <SystemClock_Config+0xd0>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000610:	2304      	movs	r3, #4
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000614:	23a8      	movs	r3, #168	; 0xa8
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800061c:	2304      	movs	r3, #4
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fc87 	bl	8000f38 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000630:	f000 f898 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000640:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2105      	movs	r1, #5
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fee8 	bl	8001428 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800065e:	f000 f881 	bl	8000764 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	; 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_SPI1_Init+0x64>)
 800067a:	4a18      	ldr	r2, [pc, #96]	; (80006dc <MX_SPI1_Init+0x68>)
 800067c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <MX_SPI1_Init+0x64>)
 8000680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000684:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_SPI1_Init+0x64>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_SPI1_Init+0x64>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_SPI1_Init+0x64>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_SPI1_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_SPI1_Init+0x64>)
 80006a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_SPI1_Init+0x64>)
 80006a8:	2210      	movs	r2, #16
 80006aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_SPI1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_SPI1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_SPI1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_SPI1_Init+0x64>)
 80006c0:	220a      	movs	r2, #10
 80006c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_SPI1_Init+0x64>)
 80006c6:	f001 f89b 	bl	8001800 <HAL_SPI_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006d0:	f000 f848 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000002c 	.word	0x2000002c
 80006dc:	40013000 	.word	0x40013000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_GPIO_Init+0x7c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a17      	ldr	r2, [pc, #92]	; (800075c <MX_GPIO_Init+0x7c>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_GPIO_Init+0x7c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_GPIO_Init+0x7c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a10      	ldr	r2, [pc, #64]	; (800075c <MX_GPIO_Init+0x7c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_GPIO_Init+0x7c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2110      	movs	r1, #16
 8000732:	480b      	ldr	r0, [pc, #44]	; (8000760 <MX_GPIO_Init+0x80>)
 8000734:	f000 fbe6 	bl	8000f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000738:	2310      	movs	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	4619      	mov	r1, r3
 800074e:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_GPIO_Init+0x80>)
 8000750:	f000 fa3c 	bl	8000bcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000754:	bf00      	nop
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40020000 	.word	0x40020000

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	e7fe      	b.n	800076c <Error_Handler+0x8>
	...

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <HAL_MspInit+0x4c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <HAL_MspInit+0x4c>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000784:	6453      	str	r3, [r2, #68]	; 0x44
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_MspInit+0x4c>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <HAL_MspInit+0x4c>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	6413      	str	r3, [r2, #64]	; 0x40
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_MspInit+0x4c>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a19      	ldr	r2, [pc, #100]	; (8000844 <HAL_SPI_MspInit+0x84>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d12b      	bne.n	800083a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_SPI_MspInit+0x88>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <HAL_SPI_MspInit+0x88>)
 80007ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007f0:	6453      	str	r3, [r2, #68]	; 0x44
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <HAL_SPI_MspInit+0x88>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <HAL_SPI_MspInit+0x88>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <HAL_SPI_MspInit+0x88>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_SPI_MspInit+0x88>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800081a:	23e0      	movs	r3, #224	; 0xe0
 800081c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800082a:	2305      	movs	r3, #5
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <HAL_SPI_MspInit+0x8c>)
 8000836:	f000 f9c9 	bl	8000bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	; 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40013000 	.word	0x40013000
 8000848:	40023800 	.word	0x40023800
 800084c:	40020000 	.word	0x40020000

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 f890 	bl	80009c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <SystemInit+0x20>)
 80008aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ae:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <SystemInit+0x20>)
 80008b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000900 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008ce:	490e      	ldr	r1, [pc, #56]	; (8000908 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008d0:	4a0e      	ldr	r2, [pc, #56]	; (800090c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d4:	e002      	b.n	80008dc <LoopCopyDataInit>

080008d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008da:	3304      	adds	r3, #4

080008dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e0:	d3f9      	bcc.n	80008d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e2:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008e4:	4c0b      	ldr	r4, [pc, #44]	; (8000914 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e8:	e001      	b.n	80008ee <LoopFillZerobss>

080008ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ec:	3204      	adds	r2, #4

080008ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f0:	d3fb      	bcc.n	80008ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008f2:	f7ff ffd7 	bl	80008a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008f6:	f001 fd33 	bl	8002360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008fa:	f7ff fe3b 	bl	8000574 <main>
  bx  lr    
 80008fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000900:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800090c:	080023e0 	.word	0x080023e0
  ldr r2, =_sbss
 8000910:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000914:	20000088 	.word	0x20000088

08000918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC_IRQHandler>
	...

0800091c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_Init+0x40>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0d      	ldr	r2, [pc, #52]	; (800095c <HAL_Init+0x40>)
 8000926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_Init+0x40>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0a      	ldr	r2, [pc, #40]	; (800095c <HAL_Init+0x40>)
 8000932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000936:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_Init+0x40>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <HAL_Init+0x40>)
 800093e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000942:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f90d 	bl	8000b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094a:	200f      	movs	r0, #15
 800094c:	f000 f808 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000950:	f7ff ff0e 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023c00 	.word	0x40023c00

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_InitTick+0x54>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_InitTick+0x58>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000976:	fbb3 f3f1 	udiv	r3, r3, r1
 800097a:	fbb2 f3f3 	udiv	r3, r2, r3
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f917 	bl	8000bb2 <HAL_SYSTICK_Config>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e00e      	b.n	80009ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d80a      	bhi.n	80009aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f000 f8ed 	bl	8000b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <HAL_InitTick+0x5c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e000      	b.n	80009ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000004 	.word	0x20000004

080009c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_IncTick+0x20>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_IncTick+0x24>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_IncTick+0x24>)
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000084 	.word	0x20000084

080009e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return uwTick;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <HAL_GetTick+0x14>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000084 	.word	0x20000084

08000a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a32:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	60d3      	str	r3, [r2, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <__NVIC_GetPriorityGrouping+0x18>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	0a1b      	lsrs	r3, r3, #8
 8000a52:	f003 0307 	and.w	r3, r3, #7
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db0a      	blt.n	8000a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	490c      	ldr	r1, [pc, #48]	; (8000ab0 <__NVIC_SetPriority+0x4c>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a8c:	e00a      	b.n	8000aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4908      	ldr	r1, [pc, #32]	; (8000ab4 <__NVIC_SetPriority+0x50>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	761a      	strb	r2, [r3, #24]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f1c3 0307 	rsb	r3, r3, #7
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	bf28      	it	cs
 8000ad6:	2304      	movcs	r3, #4
 8000ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3304      	adds	r3, #4
 8000ade:	2b06      	cmp	r3, #6
 8000ae0:	d902      	bls.n	8000ae8 <NVIC_EncodePriority+0x30>
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3b03      	subs	r3, #3
 8000ae6:	e000      	b.n	8000aea <NVIC_EncodePriority+0x32>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43da      	mvns	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	401a      	ands	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43d9      	mvns	r1, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	4313      	orrs	r3, r2
         );
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3724      	adds	r7, #36	; 0x24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b30:	d301      	bcc.n	8000b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00f      	b.n	8000b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <SysTick_Config+0x40>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3e:	210f      	movs	r1, #15
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f7ff ff8e 	bl	8000a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <SysTick_Config+0x40>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <SysTick_Config+0x40>)
 8000b50:	2207      	movs	r2, #7
 8000b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	e000e010 	.word	0xe000e010

08000b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff47 	bl	8000a00 <__NVIC_SetPriorityGrouping>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b8c:	f7ff ff5c 	bl	8000a48 <__NVIC_GetPriorityGrouping>
 8000b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	68b9      	ldr	r1, [r7, #8]
 8000b96:	6978      	ldr	r0, [r7, #20]
 8000b98:	f7ff ff8e 	bl	8000ab8 <NVIC_EncodePriority>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff5d 	bl	8000a64 <__NVIC_SetPriority>
}
 8000baa:	bf00      	nop
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffb0 	bl	8000b20 <SysTick_Config>
 8000bc0:	4603      	mov	r3, r0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
 8000be6:	e16b      	b.n	8000ec0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000be8:	2201      	movs	r2, #1
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	f040 815a 	bne.w	8000eba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d005      	beq.n	8000c1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d130      	bne.n	8000c80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2203      	movs	r2, #3
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4013      	ands	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	68da      	ldr	r2, [r3, #12]
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c54:	2201      	movs	r2, #1
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4013      	ands	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	091b      	lsrs	r3, r3, #4
 8000c6a:	f003 0201 	and.w	r2, r3, #1
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d017      	beq.n	8000cbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d123      	bne.n	8000d10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	08da      	lsrs	r2, r3, #3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3208      	adds	r2, #8
 8000cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	f003 0307 	and.w	r3, r3, #7
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	220f      	movs	r2, #15
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	691a      	ldr	r2, [r3, #16]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	08da      	lsrs	r2, r3, #3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3208      	adds	r2, #8
 8000d0a:	69b9      	ldr	r1, [r7, #24]
 8000d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0203 	and.w	r2, r3, #3
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f000 80b4 	beq.w	8000eba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b60      	ldr	r3, [pc, #384]	; (8000ed8 <HAL_GPIO_Init+0x30c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a5f      	ldr	r2, [pc, #380]	; (8000ed8 <HAL_GPIO_Init+0x30c>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b5d      	ldr	r3, [pc, #372]	; (8000ed8 <HAL_GPIO_Init+0x30c>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d6e:	4a5b      	ldr	r2, [pc, #364]	; (8000edc <HAL_GPIO_Init+0x310>)
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3302      	adds	r3, #2
 8000d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	220f      	movs	r2, #15
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a52      	ldr	r2, [pc, #328]	; (8000ee0 <HAL_GPIO_Init+0x314>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d02b      	beq.n	8000df2 <HAL_GPIO_Init+0x226>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a51      	ldr	r2, [pc, #324]	; (8000ee4 <HAL_GPIO_Init+0x318>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d025      	beq.n	8000dee <HAL_GPIO_Init+0x222>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a50      	ldr	r2, [pc, #320]	; (8000ee8 <HAL_GPIO_Init+0x31c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d01f      	beq.n	8000dea <HAL_GPIO_Init+0x21e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4f      	ldr	r2, [pc, #316]	; (8000eec <HAL_GPIO_Init+0x320>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d019      	beq.n	8000de6 <HAL_GPIO_Init+0x21a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4e      	ldr	r2, [pc, #312]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d013      	beq.n	8000de2 <HAL_GPIO_Init+0x216>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4d      	ldr	r2, [pc, #308]	; (8000ef4 <HAL_GPIO_Init+0x328>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d00d      	beq.n	8000dde <HAL_GPIO_Init+0x212>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4c      	ldr	r2, [pc, #304]	; (8000ef8 <HAL_GPIO_Init+0x32c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d007      	beq.n	8000dda <HAL_GPIO_Init+0x20e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a4b      	ldr	r2, [pc, #300]	; (8000efc <HAL_GPIO_Init+0x330>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d101      	bne.n	8000dd6 <HAL_GPIO_Init+0x20a>
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	e00e      	b.n	8000df4 <HAL_GPIO_Init+0x228>
 8000dd6:	2308      	movs	r3, #8
 8000dd8:	e00c      	b.n	8000df4 <HAL_GPIO_Init+0x228>
 8000dda:	2306      	movs	r3, #6
 8000ddc:	e00a      	b.n	8000df4 <HAL_GPIO_Init+0x228>
 8000dde:	2305      	movs	r3, #5
 8000de0:	e008      	b.n	8000df4 <HAL_GPIO_Init+0x228>
 8000de2:	2304      	movs	r3, #4
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x228>
 8000de6:	2303      	movs	r3, #3
 8000de8:	e004      	b.n	8000df4 <HAL_GPIO_Init+0x228>
 8000dea:	2302      	movs	r3, #2
 8000dec:	e002      	b.n	8000df4 <HAL_GPIO_Init+0x228>
 8000dee:	2301      	movs	r3, #1
 8000df0:	e000      	b.n	8000df4 <HAL_GPIO_Init+0x228>
 8000df2:	2300      	movs	r3, #0
 8000df4:	69fa      	ldr	r2, [r7, #28]
 8000df6:	f002 0203 	and.w	r2, r2, #3
 8000dfa:	0092      	lsls	r2, r2, #2
 8000dfc:	4093      	lsls	r3, r2
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e04:	4935      	ldr	r1, [pc, #212]	; (8000edc <HAL_GPIO_Init+0x310>)
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e12:	4b3b      	ldr	r3, [pc, #236]	; (8000f00 <HAL_GPIO_Init+0x334>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e36:	4a32      	ldr	r2, [pc, #200]	; (8000f00 <HAL_GPIO_Init+0x334>)
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e3c:	4b30      	ldr	r3, [pc, #192]	; (8000f00 <HAL_GPIO_Init+0x334>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e60:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <HAL_GPIO_Init+0x334>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <HAL_GPIO_Init+0x334>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e8a:	4a1d      	ldr	r2, [pc, #116]	; (8000f00 <HAL_GPIO_Init+0x334>)
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <HAL_GPIO_Init+0x334>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eb4:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <HAL_GPIO_Init+0x334>)
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	61fb      	str	r3, [r7, #28]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	2b0f      	cmp	r3, #15
 8000ec4:	f67f ae90 	bls.w	8000be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3724      	adds	r7, #36	; 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40013800 	.word	0x40013800
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	40020400 	.word	0x40020400
 8000ee8:	40020800 	.word	0x40020800
 8000eec:	40020c00 	.word	0x40020c00
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40021400 	.word	0x40021400
 8000ef8:	40021800 	.word	0x40021800
 8000efc:	40021c00 	.word	0x40021c00
 8000f00:	40013c00 	.word	0x40013c00

08000f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	807b      	strh	r3, [r7, #2]
 8000f10:	4613      	mov	r3, r2
 8000f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f14:	787b      	ldrb	r3, [r7, #1]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f1a:	887a      	ldrh	r2, [r7, #2]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f20:	e003      	b.n	8000f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f22:	887b      	ldrh	r3, [r7, #2]
 8000f24:	041a      	lsls	r2, r3, #16
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	619a      	str	r2, [r3, #24]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e267      	b.n	800141a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d075      	beq.n	8001042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f56:	4b88      	ldr	r3, [pc, #544]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	d00c      	beq.n	8000f7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f62:	4b85      	ldr	r3, [pc, #532]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f6a:	2b08      	cmp	r3, #8
 8000f6c:	d112      	bne.n	8000f94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f6e:	4b82      	ldr	r3, [pc, #520]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f7a:	d10b      	bne.n	8000f94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7c:	4b7e      	ldr	r3, [pc, #504]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d05b      	beq.n	8001040 <HAL_RCC_OscConfig+0x108>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d157      	bne.n	8001040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e242      	b.n	800141a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9c:	d106      	bne.n	8000fac <HAL_RCC_OscConfig+0x74>
 8000f9e:	4b76      	ldr	r3, [pc, #472]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a75      	ldr	r2, [pc, #468]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8000fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	e01d      	b.n	8000fe8 <HAL_RCC_OscConfig+0xb0>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb4:	d10c      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x98>
 8000fb6:	4b70      	ldr	r3, [pc, #448]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a6f      	ldr	r2, [pc, #444]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8000fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	4b6d      	ldr	r3, [pc, #436]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a6c      	ldr	r2, [pc, #432]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8000fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e00b      	b.n	8000fe8 <HAL_RCC_OscConfig+0xb0>
 8000fd0:	4b69      	ldr	r3, [pc, #420]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a68      	ldr	r2, [pc, #416]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8000fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b66      	ldr	r3, [pc, #408]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a65      	ldr	r2, [pc, #404]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8000fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d013      	beq.n	8001018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fcfa 	bl	80009e8 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fcf6 	bl	80009e8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b64      	cmp	r3, #100	; 0x64
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e207      	b.n	800141a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100a:	4b5b      	ldr	r3, [pc, #364]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f0      	beq.n	8000ff8 <HAL_RCC_OscConfig+0xc0>
 8001016:	e014      	b.n	8001042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fce6 	bl	80009e8 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001020:	f7ff fce2 	bl	80009e8 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b64      	cmp	r3, #100	; 0x64
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e1f3      	b.n	800141a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001032:	4b51      	ldr	r3, [pc, #324]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0xe8>
 800103e:	e000      	b.n	8001042 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d063      	beq.n	8001116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800104e:	4b4a      	ldr	r3, [pc, #296]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00b      	beq.n	8001072 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800105a:	4b47      	ldr	r3, [pc, #284]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001062:	2b08      	cmp	r3, #8
 8001064:	d11c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001066:	4b44      	ldr	r3, [pc, #272]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d116      	bne.n	80010a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001072:	4b41      	ldr	r3, [pc, #260]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <HAL_RCC_OscConfig+0x152>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d001      	beq.n	800108a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e1c7      	b.n	800141a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108a:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	4937      	ldr	r1, [pc, #220]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 800109a:	4313      	orrs	r3, r2
 800109c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109e:	e03a      	b.n	8001116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d020      	beq.n	80010ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a8:	4b34      	ldr	r3, [pc, #208]	; (800117c <HAL_RCC_OscConfig+0x244>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ae:	f7ff fc9b 	bl	80009e8 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b6:	f7ff fc97 	bl	80009e8 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e1a8      	b.n	800141a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c8:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d4:	4b28      	ldr	r3, [pc, #160]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	4925      	ldr	r1, [pc, #148]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	600b      	str	r3, [r1, #0]
 80010e8:	e015      	b.n	8001116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_RCC_OscConfig+0x244>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f0:	f7ff fc7a 	bl	80009e8 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f8:	f7ff fc76 	bl	80009e8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e187      	b.n	800141a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110a:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d036      	beq.n	8001190 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d016      	beq.n	8001158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_RCC_OscConfig+0x248>)
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001130:	f7ff fc5a 	bl	80009e8 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001138:	f7ff fc56 	bl	80009e8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e167      	b.n	800141a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <HAL_RCC_OscConfig+0x240>)
 800114c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f0      	beq.n	8001138 <HAL_RCC_OscConfig+0x200>
 8001156:	e01b      	b.n	8001190 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_RCC_OscConfig+0x248>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115e:	f7ff fc43 	bl	80009e8 <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001164:	e00e      	b.n	8001184 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001166:	f7ff fc3f 	bl	80009e8 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d907      	bls.n	8001184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e150      	b.n	800141a <HAL_RCC_OscConfig+0x4e2>
 8001178:	40023800 	.word	0x40023800
 800117c:	42470000 	.word	0x42470000
 8001180:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001184:	4b88      	ldr	r3, [pc, #544]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 8001186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1ea      	bne.n	8001166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 8097 	beq.w	80012cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011a2:	4b81      	ldr	r3, [pc, #516]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10f      	bne.n	80011ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	4b7d      	ldr	r3, [pc, #500]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	4a7c      	ldr	r2, [pc, #496]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
 80011be:	4b7a      	ldr	r3, [pc, #488]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ca:	2301      	movs	r3, #1
 80011cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ce:	4b77      	ldr	r3, [pc, #476]	; (80013ac <HAL_RCC_OscConfig+0x474>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d118      	bne.n	800120c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011da:	4b74      	ldr	r3, [pc, #464]	; (80013ac <HAL_RCC_OscConfig+0x474>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a73      	ldr	r2, [pc, #460]	; (80013ac <HAL_RCC_OscConfig+0x474>)
 80011e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011e6:	f7ff fbff 	bl	80009e8 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ee:	f7ff fbfb 	bl	80009e8 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e10c      	b.n	800141a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001200:	4b6a      	ldr	r3, [pc, #424]	; (80013ac <HAL_RCC_OscConfig+0x474>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d106      	bne.n	8001222 <HAL_RCC_OscConfig+0x2ea>
 8001214:	4b64      	ldr	r3, [pc, #400]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 8001216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001218:	4a63      	ldr	r2, [pc, #396]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6713      	str	r3, [r2, #112]	; 0x70
 8001220:	e01c      	b.n	800125c <HAL_RCC_OscConfig+0x324>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b05      	cmp	r3, #5
 8001228:	d10c      	bne.n	8001244 <HAL_RCC_OscConfig+0x30c>
 800122a:	4b5f      	ldr	r3, [pc, #380]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 800122c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122e:	4a5e      	ldr	r2, [pc, #376]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6713      	str	r3, [r2, #112]	; 0x70
 8001236:	4b5c      	ldr	r3, [pc, #368]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 8001238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123a:	4a5b      	ldr	r2, [pc, #364]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6713      	str	r3, [r2, #112]	; 0x70
 8001242:	e00b      	b.n	800125c <HAL_RCC_OscConfig+0x324>
 8001244:	4b58      	ldr	r3, [pc, #352]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 8001246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001248:	4a57      	ldr	r2, [pc, #348]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 800124a:	f023 0301 	bic.w	r3, r3, #1
 800124e:	6713      	str	r3, [r2, #112]	; 0x70
 8001250:	4b55      	ldr	r3, [pc, #340]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 8001252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001254:	4a54      	ldr	r2, [pc, #336]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 8001256:	f023 0304 	bic.w	r3, r3, #4
 800125a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d015      	beq.n	8001290 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001264:	f7ff fbc0 	bl	80009e8 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800126a:	e00a      	b.n	8001282 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800126c:	f7ff fbbc 	bl	80009e8 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f241 3288 	movw	r2, #5000	; 0x1388
 800127a:	4293      	cmp	r3, r2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e0cb      	b.n	800141a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001282:	4b49      	ldr	r3, [pc, #292]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 8001284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0ee      	beq.n	800126c <HAL_RCC_OscConfig+0x334>
 800128e:	e014      	b.n	80012ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001290:	f7ff fbaa 	bl	80009e8 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001296:	e00a      	b.n	80012ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001298:	f7ff fba6 	bl	80009e8 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e0b5      	b.n	800141a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ae:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 80012b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1ee      	bne.n	8001298 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d105      	bne.n	80012cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c0:	4b39      	ldr	r3, [pc, #228]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	4a38      	ldr	r2, [pc, #224]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 80012c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 80a1 	beq.w	8001418 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012d6:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d05c      	beq.n	800139c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d141      	bne.n	800136e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ea:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <HAL_RCC_OscConfig+0x478>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fb7a 	bl	80009e8 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f8:	f7ff fb76 	bl	80009e8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e087      	b.n	800141a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800130a:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69da      	ldr	r2, [r3, #28]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	019b      	lsls	r3, r3, #6
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132c:	085b      	lsrs	r3, r3, #1
 800132e:	3b01      	subs	r3, #1
 8001330:	041b      	lsls	r3, r3, #16
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	061b      	lsls	r3, r3, #24
 800133a:	491b      	ldr	r1, [pc, #108]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_RCC_OscConfig+0x478>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001346:	f7ff fb4f 	bl	80009e8 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800134e:	f7ff fb4b 	bl	80009e8 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e05c      	b.n	800141a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x416>
 800136c:	e054      	b.n	8001418 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <HAL_RCC_OscConfig+0x478>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fb38 	bl	80009e8 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800137c:	f7ff fb34 	bl	80009e8 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e045      	b.n	800141a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_RCC_OscConfig+0x470>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x444>
 800139a:	e03d      	b.n	8001418 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d107      	bne.n	80013b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e038      	b.n	800141a <HAL_RCC_OscConfig+0x4e2>
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40007000 	.word	0x40007000
 80013b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <HAL_RCC_OscConfig+0x4ec>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d028      	beq.n	8001414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d121      	bne.n	8001414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013da:	429a      	cmp	r2, r3
 80013dc:	d11a      	bne.n	8001414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013e4:	4013      	ands	r3, r2
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d111      	bne.n	8001414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	085b      	lsrs	r3, r3, #1
 80013fc:	3b01      	subs	r3, #1
 80013fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001400:	429a      	cmp	r2, r3
 8001402:	d107      	bne.n	8001414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001410:	429a      	cmp	r2, r3
 8001412:	d001      	beq.n	8001418 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800

08001428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0cc      	b.n	80015d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800143c:	4b68      	ldr	r3, [pc, #416]	; (80015e0 <HAL_RCC_ClockConfig+0x1b8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d90c      	bls.n	8001464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144a:	4b65      	ldr	r3, [pc, #404]	; (80015e0 <HAL_RCC_ClockConfig+0x1b8>)
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001452:	4b63      	ldr	r3, [pc, #396]	; (80015e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d001      	beq.n	8001464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0b8      	b.n	80015d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d020      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800147c:	4b59      	ldr	r3, [pc, #356]	; (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4a58      	ldr	r2, [pc, #352]	; (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001486:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001494:	4b53      	ldr	r3, [pc, #332]	; (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4a52      	ldr	r2, [pc, #328]	; (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800149e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a0:	4b50      	ldr	r3, [pc, #320]	; (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	494d      	ldr	r1, [pc, #308]	; (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d044      	beq.n	8001548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d107      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	4b47      	ldr	r3, [pc, #284]	; (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d119      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e07f      	b.n	80015d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d003      	beq.n	80014e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d107      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e6:	4b3f      	ldr	r3, [pc, #252]	; (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d109      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e06f      	b.n	80015d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f6:	4b3b      	ldr	r3, [pc, #236]	; (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e067      	b.n	80015d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001506:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f023 0203 	bic.w	r2, r3, #3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4934      	ldr	r1, [pc, #208]	; (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	4313      	orrs	r3, r2
 8001516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001518:	f7ff fa66 	bl	80009e8 <HAL_GetTick>
 800151c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151e:	e00a      	b.n	8001536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001520:	f7ff fa62 	bl	80009e8 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f241 3288 	movw	r2, #5000	; 0x1388
 800152e:	4293      	cmp	r3, r2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e04f      	b.n	80015d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001536:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 020c 	and.w	r2, r3, #12
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	429a      	cmp	r2, r3
 8001546:	d1eb      	bne.n	8001520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <HAL_RCC_ClockConfig+0x1b8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d20c      	bcs.n	8001570 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155e:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d001      	beq.n	8001570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e032      	b.n	80015d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d008      	beq.n	800158e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	4916      	ldr	r1, [pc, #88]	; (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	4313      	orrs	r3, r2
 800158c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d009      	beq.n	80015ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	490e      	ldr	r1, [pc, #56]	; (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015ae:	f000 f821 	bl	80015f4 <HAL_RCC_GetSysClockFreq>
 80015b2:	4602      	mov	r2, r0
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	091b      	lsrs	r3, r3, #4
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	490a      	ldr	r1, [pc, #40]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 80015c0:	5ccb      	ldrb	r3, [r1, r3]
 80015c2:	fa22 f303 	lsr.w	r3, r2, r3
 80015c6:	4a09      	ldr	r2, [pc, #36]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80015c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff f9c6 	bl	8000960 <HAL_InitTick>

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023c00 	.word	0x40023c00
 80015e4:	40023800 	.word	0x40023800
 80015e8:	080023c0 	.word	0x080023c0
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000004 	.word	0x20000004

080015f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015f8:	b094      	sub	sp, #80	; 0x50
 80015fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001600:	2300      	movs	r3, #0
 8001602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001604:	2300      	movs	r3, #0
 8001606:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800160c:	4b79      	ldr	r3, [pc, #484]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b08      	cmp	r3, #8
 8001616:	d00d      	beq.n	8001634 <HAL_RCC_GetSysClockFreq+0x40>
 8001618:	2b08      	cmp	r3, #8
 800161a:	f200 80e1 	bhi.w	80017e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x34>
 8001622:	2b04      	cmp	r3, #4
 8001624:	d003      	beq.n	800162e <HAL_RCC_GetSysClockFreq+0x3a>
 8001626:	e0db      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001628:	4b73      	ldr	r3, [pc, #460]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800162a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800162c:	e0db      	b.n	80017e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800162e:	4b73      	ldr	r3, [pc, #460]	; (80017fc <HAL_RCC_GetSysClockFreq+0x208>)
 8001630:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001632:	e0d8      	b.n	80017e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001634:	4b6f      	ldr	r3, [pc, #444]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800163c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800163e:	4b6d      	ldr	r3, [pc, #436]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d063      	beq.n	8001712 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800164a:	4b6a      	ldr	r3, [pc, #424]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	099b      	lsrs	r3, r3, #6
 8001650:	2200      	movs	r2, #0
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
 8001654:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800165c:	633b      	str	r3, [r7, #48]	; 0x30
 800165e:	2300      	movs	r3, #0
 8001660:	637b      	str	r3, [r7, #52]	; 0x34
 8001662:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001666:	4622      	mov	r2, r4
 8001668:	462b      	mov	r3, r5
 800166a:	f04f 0000 	mov.w	r0, #0
 800166e:	f04f 0100 	mov.w	r1, #0
 8001672:	0159      	lsls	r1, r3, #5
 8001674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001678:	0150      	lsls	r0, r2, #5
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4621      	mov	r1, r4
 8001680:	1a51      	subs	r1, r2, r1
 8001682:	6139      	str	r1, [r7, #16]
 8001684:	4629      	mov	r1, r5
 8001686:	eb63 0301 	sbc.w	r3, r3, r1
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001698:	4659      	mov	r1, fp
 800169a:	018b      	lsls	r3, r1, #6
 800169c:	4651      	mov	r1, sl
 800169e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016a2:	4651      	mov	r1, sl
 80016a4:	018a      	lsls	r2, r1, #6
 80016a6:	4651      	mov	r1, sl
 80016a8:	ebb2 0801 	subs.w	r8, r2, r1
 80016ac:	4659      	mov	r1, fp
 80016ae:	eb63 0901 	sbc.w	r9, r3, r1
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016c6:	4690      	mov	r8, r2
 80016c8:	4699      	mov	r9, r3
 80016ca:	4623      	mov	r3, r4
 80016cc:	eb18 0303 	adds.w	r3, r8, r3
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	462b      	mov	r3, r5
 80016d4:	eb49 0303 	adc.w	r3, r9, r3
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016e6:	4629      	mov	r1, r5
 80016e8:	024b      	lsls	r3, r1, #9
 80016ea:	4621      	mov	r1, r4
 80016ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016f0:	4621      	mov	r1, r4
 80016f2:	024a      	lsls	r2, r1, #9
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016fa:	2200      	movs	r2, #0
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80016fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001700:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001704:	f7fe fd60 	bl	80001c8 <__aeabi_uldivmod>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4613      	mov	r3, r2
 800170e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001710:	e058      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001712:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	099b      	lsrs	r3, r3, #6
 8001718:	2200      	movs	r2, #0
 800171a:	4618      	mov	r0, r3
 800171c:	4611      	mov	r1, r2
 800171e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001722:	623b      	str	r3, [r7, #32]
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
 8001728:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800172c:	4642      	mov	r2, r8
 800172e:	464b      	mov	r3, r9
 8001730:	f04f 0000 	mov.w	r0, #0
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	0159      	lsls	r1, r3, #5
 800173a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800173e:	0150      	lsls	r0, r2, #5
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4641      	mov	r1, r8
 8001746:	ebb2 0a01 	subs.w	sl, r2, r1
 800174a:	4649      	mov	r1, r9
 800174c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800175c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001760:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001764:	ebb2 040a 	subs.w	r4, r2, sl
 8001768:	eb63 050b 	sbc.w	r5, r3, fp
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	00eb      	lsls	r3, r5, #3
 8001776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800177a:	00e2      	lsls	r2, r4, #3
 800177c:	4614      	mov	r4, r2
 800177e:	461d      	mov	r5, r3
 8001780:	4643      	mov	r3, r8
 8001782:	18e3      	adds	r3, r4, r3
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	464b      	mov	r3, r9
 8001788:	eb45 0303 	adc.w	r3, r5, r3
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800179a:	4629      	mov	r1, r5
 800179c:	028b      	lsls	r3, r1, #10
 800179e:	4621      	mov	r1, r4
 80017a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017a4:	4621      	mov	r1, r4
 80017a6:	028a      	lsls	r2, r1, #10
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ae:	2200      	movs	r2, #0
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	61fa      	str	r2, [r7, #28]
 80017b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017b8:	f7fe fd06 	bl	80001c8 <__aeabi_uldivmod>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4613      	mov	r3, r2
 80017c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	0c1b      	lsrs	r3, r3, #16
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	3301      	adds	r3, #1
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80017d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017de:	e002      	b.n	80017e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80017e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3750      	adds	r7, #80	; 0x50
 80017ec:	46bd      	mov	sp, r7
 80017ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	00f42400 	.word	0x00f42400
 80017fc:	007a1200 	.word	0x007a1200

08001800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e07b      	b.n	800190a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	2b00      	cmp	r3, #0
 8001818:	d108      	bne.n	800182c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001822:	d009      	beq.n	8001838 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
 800182a:	e005      	b.n	8001838 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d106      	bne.n	8001858 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7fe ffb4 	bl	80007c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2202      	movs	r2, #2
 800185c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800186e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	431a      	orrs	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018bc:	ea42 0103 	orr.w	r1, r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	0c1b      	lsrs	r3, r3, #16
 80018d6:	f003 0104 	and.w	r1, r3, #4
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	f003 0210 	and.w	r2, r3, #16
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	69da      	ldr	r2, [r3, #28]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b088      	sub	sp, #32
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	4613      	mov	r3, r2
 8001920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_SPI_Transmit+0x22>
 8001930:	2302      	movs	r3, #2
 8001932:	e126      	b.n	8001b82 <HAL_SPI_Transmit+0x270>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800193c:	f7ff f854 	bl	80009e8 <HAL_GetTick>
 8001940:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b01      	cmp	r3, #1
 8001950:	d002      	beq.n	8001958 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001952:	2302      	movs	r3, #2
 8001954:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001956:	e10b      	b.n	8001b70 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_SPI_Transmit+0x52>
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001968:	e102      	b.n	8001b70 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2203      	movs	r2, #3
 800196e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	88fa      	ldrh	r2, [r7, #6]
 8001982:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	88fa      	ldrh	r2, [r7, #6]
 8001988:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019b0:	d10f      	bne.n	80019d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019dc:	2b40      	cmp	r3, #64	; 0x40
 80019de:	d007      	beq.n	80019f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019f8:	d14b      	bne.n	8001a92 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <HAL_SPI_Transmit+0xf6>
 8001a02:	8afb      	ldrh	r3, [r7, #22]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d13e      	bne.n	8001a86 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	881a      	ldrh	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	1c9a      	adds	r2, r3, #2
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a2c:	e02b      	b.n	8001a86 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d112      	bne.n	8001a62 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	881a      	ldrh	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	1c9a      	adds	r2, r3, #2
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a60:	e011      	b.n	8001a86 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a62:	f7fe ffc1 	bl	80009e8 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d803      	bhi.n	8001a7a <HAL_SPI_Transmit+0x168>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d102      	bne.n	8001a80 <HAL_SPI_Transmit+0x16e>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a84:	e074      	b.n	8001b70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1ce      	bne.n	8001a2e <HAL_SPI_Transmit+0x11c>
 8001a90:	e04c      	b.n	8001b2c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <HAL_SPI_Transmit+0x18e>
 8001a9a:	8afb      	ldrh	r3, [r7, #22]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d140      	bne.n	8001b22 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	330c      	adds	r3, #12
 8001aaa:	7812      	ldrb	r2, [r2, #0]
 8001aac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ac6:	e02c      	b.n	8001b22 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d113      	bne.n	8001afe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	330c      	adds	r3, #12
 8001ae0:	7812      	ldrb	r2, [r2, #0]
 8001ae2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	86da      	strh	r2, [r3, #54]	; 0x36
 8001afc:	e011      	b.n	8001b22 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001afe:	f7fe ff73 	bl	80009e8 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d803      	bhi.n	8001b16 <HAL_SPI_Transmit+0x204>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d102      	bne.n	8001b1c <HAL_SPI_Transmit+0x20a>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b20:	e026      	b.n	8001b70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1cd      	bne.n	8001ac8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	6839      	ldr	r1, [r7, #0]
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 fbcb 	bl	80022cc <SPI_EndRxTxTransaction>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10a      	bne.n	8001b60 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	77fb      	strb	r3, [r7, #31]
 8001b6c:	e000      	b.n	8001b70 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001b6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b80:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3720      	adds	r7, #32
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b088      	sub	sp, #32
 8001b8e:	af02      	add	r7, sp, #8
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ba6:	d112      	bne.n	8001bce <HAL_SPI_Receive+0x44>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10e      	bne.n	8001bce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001bb8:	88fa      	ldrh	r2, [r7, #6]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	68b9      	ldr	r1, [r7, #8]
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 f8f1 	bl	8001dac <HAL_SPI_TransmitReceive>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	e0ea      	b.n	8001da4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_SPI_Receive+0x52>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e0e3      	b.n	8001da4 <HAL_SPI_Receive+0x21a>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001be4:	f7fe ff00 	bl	80009e8 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d002      	beq.n	8001bfc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001bfa:	e0ca      	b.n	8001d92 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_SPI_Receive+0x7e>
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c0c:	e0c1      	b.n	8001d92 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2204      	movs	r2, #4
 8001c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	88fa      	ldrh	r2, [r7, #6]
 8001c26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	88fa      	ldrh	r2, [r7, #6]
 8001c2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c54:	d10f      	bne.n	8001c76 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c80:	2b40      	cmp	r3, #64	; 0x40
 8001c82:	d007      	beq.n	8001c94 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c92:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d162      	bne.n	8001d62 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001c9c:	e02e      	b.n	8001cfc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d115      	bne.n	8001cd8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f103 020c 	add.w	r2, r3, #12
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb8:	7812      	ldrb	r2, [r2, #0]
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cd6:	e011      	b.n	8001cfc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cd8:	f7fe fe86 	bl	80009e8 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d803      	bhi.n	8001cf0 <HAL_SPI_Receive+0x166>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cee:	d102      	bne.n	8001cf6 <HAL_SPI_Receive+0x16c>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001cfa:	e04a      	b.n	8001d92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1cb      	bne.n	8001c9e <HAL_SPI_Receive+0x114>
 8001d06:	e031      	b.n	8001d6c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d113      	bne.n	8001d3e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d20:	b292      	uxth	r2, r2
 8001d22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d28:	1c9a      	adds	r2, r3, #2
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d3c:	e011      	b.n	8001d62 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d3e:	f7fe fe53 	bl	80009e8 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d803      	bhi.n	8001d56 <HAL_SPI_Receive+0x1cc>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d54:	d102      	bne.n	8001d5c <HAL_SPI_Receive+0x1d2>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001d60:	e017      	b.n	8001d92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1cd      	bne.n	8001d08 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	6839      	ldr	r1, [r7, #0]
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 fa45 	bl	8002200 <SPI_EndRxTransaction>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	75fb      	strb	r3, [r7, #23]
 8001d8e:	e000      	b.n	8001d92 <HAL_SPI_Receive+0x208>
  }

error :
 8001d90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08c      	sub	sp, #48	; 0x30
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_SPI_TransmitReceive+0x26>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e18a      	b.n	80020e8 <HAL_SPI_TransmitReceive+0x33c>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dda:	f7fe fe05 	bl	80009e8 <HAL_GetTick>
 8001dde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001df4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d00f      	beq.n	8001e1c <HAL_SPI_TransmitReceive+0x70>
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e02:	d107      	bne.n	8001e14 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d103      	bne.n	8001e14 <HAL_SPI_TransmitReceive+0x68>
 8001e0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d003      	beq.n	8001e1c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001e14:	2302      	movs	r3, #2
 8001e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e1a:	e15b      	b.n	80020d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <HAL_SPI_TransmitReceive+0x82>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HAL_SPI_TransmitReceive+0x82>
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d103      	bne.n	8001e36 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e34:	e14e      	b.n	80020d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d003      	beq.n	8001e4a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2205      	movs	r2, #5
 8001e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	887a      	ldrh	r2, [r7, #2]
 8001e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	887a      	ldrh	r2, [r7, #2]
 8001e72:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8a:	2b40      	cmp	r3, #64	; 0x40
 8001e8c:	d007      	beq.n	8001e9e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ea6:	d178      	bne.n	8001f9a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <HAL_SPI_TransmitReceive+0x10a>
 8001eb0:	8b7b      	ldrh	r3, [r7, #26]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d166      	bne.n	8001f84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	881a      	ldrh	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	1c9a      	adds	r2, r3, #2
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001eda:	e053      	b.n	8001f84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d11b      	bne.n	8001f22 <HAL_SPI_TransmitReceive+0x176>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d016      	beq.n	8001f22 <HAL_SPI_TransmitReceive+0x176>
 8001ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d113      	bne.n	8001f22 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	881a      	ldrh	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	1c9a      	adds	r2, r3, #2
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d119      	bne.n	8001f64 <HAL_SPI_TransmitReceive+0x1b8>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d014      	beq.n	8001f64 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	b292      	uxth	r2, r2
 8001f46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4c:	1c9a      	adds	r2, r3, #2
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f60:	2301      	movs	r3, #1
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f64:	f7fe fd40 	bl	80009e8 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d807      	bhi.n	8001f84 <HAL_SPI_TransmitReceive+0x1d8>
 8001f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7a:	d003      	beq.n	8001f84 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f82:	e0a7      	b.n	80020d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1a6      	bne.n	8001edc <HAL_SPI_TransmitReceive+0x130>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1a1      	bne.n	8001edc <HAL_SPI_TransmitReceive+0x130>
 8001f98:	e07c      	b.n	8002094 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_SPI_TransmitReceive+0x1fc>
 8001fa2:	8b7b      	ldrh	r3, [r7, #26]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d16b      	bne.n	8002080 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	330c      	adds	r3, #12
 8001fb2:	7812      	ldrb	r2, [r2, #0]
 8001fb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fce:	e057      	b.n	8002080 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d11c      	bne.n	8002018 <HAL_SPI_TransmitReceive+0x26c>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d017      	beq.n	8002018 <HAL_SPI_TransmitReceive+0x26c>
 8001fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d114      	bne.n	8002018 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	330c      	adds	r3, #12
 8001ff8:	7812      	ldrb	r2, [r2, #0]
 8001ffa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d119      	bne.n	800205a <HAL_SPI_TransmitReceive+0x2ae>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800202a:	b29b      	uxth	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d014      	beq.n	800205a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002056:	2301      	movs	r3, #1
 8002058:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800205a:	f7fe fcc5 	bl	80009e8 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002066:	429a      	cmp	r2, r3
 8002068:	d803      	bhi.n	8002072 <HAL_SPI_TransmitReceive+0x2c6>
 800206a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d102      	bne.n	8002078 <HAL_SPI_TransmitReceive+0x2cc>
 8002072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002074:	2b00      	cmp	r3, #0
 8002076:	d103      	bne.n	8002080 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800207e:	e029      	b.n	80020d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002084:	b29b      	uxth	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1a2      	bne.n	8001fd0 <HAL_SPI_TransmitReceive+0x224>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d19d      	bne.n	8001fd0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 f917 	bl	80022cc <SPI_EndRxTxTransaction>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2220      	movs	r2, #32
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80020b0:	e010      	b.n	80020d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10b      	bne.n	80020d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	e000      	b.n	80020d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80020d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3730      	adds	r7, #48	; 0x30
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	4613      	mov	r3, r2
 80020fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002100:	f7fe fc72 	bl	80009e8 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	4413      	add	r3, r2
 800210e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002110:	f7fe fc6a 	bl	80009e8 <HAL_GetTick>
 8002114:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002116:	4b39      	ldr	r3, [pc, #228]	; (80021fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	015b      	lsls	r3, r3, #5
 800211c:	0d1b      	lsrs	r3, r3, #20
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	fb02 f303 	mul.w	r3, r2, r3
 8002124:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002126:	e054      	b.n	80021d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212e:	d050      	beq.n	80021d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002130:	f7fe fc5a 	bl	80009e8 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	429a      	cmp	r2, r3
 800213e:	d902      	bls.n	8002146 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d13d      	bne.n	80021c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002154:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800215e:	d111      	bne.n	8002184 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002168:	d004      	beq.n	8002174 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002172:	d107      	bne.n	8002184 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002182:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800218c:	d10f      	bne.n	80021ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e017      	b.n	80021f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4013      	ands	r3, r2
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	429a      	cmp	r2, r3
 80021e0:	bf0c      	ite	eq
 80021e2:	2301      	moveq	r3, #1
 80021e4:	2300      	movne	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d19b      	bne.n	8002128 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3720      	adds	r7, #32
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000000 	.word	0x20000000

08002200 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af02      	add	r7, sp, #8
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002214:	d111      	bne.n	800223a <SPI_EndRxTransaction+0x3a>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800221e:	d004      	beq.n	800222a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002228:	d107      	bne.n	800223a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002242:	d12a      	bne.n	800229a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224c:	d012      	beq.n	8002274 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2200      	movs	r2, #0
 8002256:	2180      	movs	r1, #128	; 0x80
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f7ff ff49 	bl	80020f0 <SPI_WaitFlagStateUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d02d      	beq.n	80022c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002268:	f043 0220 	orr.w	r2, r3, #32
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e026      	b.n	80022c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2200      	movs	r2, #0
 800227c:	2101      	movs	r1, #1
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f7ff ff36 	bl	80020f0 <SPI_WaitFlagStateUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d01a      	beq.n	80022c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228e:	f043 0220 	orr.w	r2, r3, #32
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e013      	b.n	80022c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	2101      	movs	r1, #1
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7ff ff23 	bl	80020f0 <SPI_WaitFlagStateUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b4:	f043 0220 	orr.w	r2, r3, #32
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e000      	b.n	80022c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80022d8:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <SPI_EndRxTxTransaction+0x7c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1b      	ldr	r2, [pc, #108]	; (800234c <SPI_EndRxTxTransaction+0x80>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0d5b      	lsrs	r3, r3, #21
 80022e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022f6:	d112      	bne.n	800231e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2200      	movs	r2, #0
 8002300:	2180      	movs	r1, #128	; 0x80
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f7ff fef4 	bl	80020f0 <SPI_WaitFlagStateUntilTimeout>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d016      	beq.n	800233c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002312:	f043 0220 	orr.w	r2, r3, #32
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e00f      	b.n	800233e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	3b01      	subs	r3, #1
 8002328:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002334:	2b80      	cmp	r3, #128	; 0x80
 8002336:	d0f2      	beq.n	800231e <SPI_EndRxTxTransaction+0x52>
 8002338:	e000      	b.n	800233c <SPI_EndRxTxTransaction+0x70>
        break;
 800233a:	bf00      	nop
  }

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000000 	.word	0x20000000
 800234c:	165e9f81 	.word	0x165e9f81

08002350 <memset>:
 8002350:	4402      	add	r2, r0
 8002352:	4603      	mov	r3, r0
 8002354:	4293      	cmp	r3, r2
 8002356:	d100      	bne.n	800235a <memset+0xa>
 8002358:	4770      	bx	lr
 800235a:	f803 1b01 	strb.w	r1, [r3], #1
 800235e:	e7f9      	b.n	8002354 <memset+0x4>

08002360 <__libc_init_array>:
 8002360:	b570      	push	{r4, r5, r6, lr}
 8002362:	4d0d      	ldr	r5, [pc, #52]	; (8002398 <__libc_init_array+0x38>)
 8002364:	4c0d      	ldr	r4, [pc, #52]	; (800239c <__libc_init_array+0x3c>)
 8002366:	1b64      	subs	r4, r4, r5
 8002368:	10a4      	asrs	r4, r4, #2
 800236a:	2600      	movs	r6, #0
 800236c:	42a6      	cmp	r6, r4
 800236e:	d109      	bne.n	8002384 <__libc_init_array+0x24>
 8002370:	4d0b      	ldr	r5, [pc, #44]	; (80023a0 <__libc_init_array+0x40>)
 8002372:	4c0c      	ldr	r4, [pc, #48]	; (80023a4 <__libc_init_array+0x44>)
 8002374:	f000 f818 	bl	80023a8 <_init>
 8002378:	1b64      	subs	r4, r4, r5
 800237a:	10a4      	asrs	r4, r4, #2
 800237c:	2600      	movs	r6, #0
 800237e:	42a6      	cmp	r6, r4
 8002380:	d105      	bne.n	800238e <__libc_init_array+0x2e>
 8002382:	bd70      	pop	{r4, r5, r6, pc}
 8002384:	f855 3b04 	ldr.w	r3, [r5], #4
 8002388:	4798      	blx	r3
 800238a:	3601      	adds	r6, #1
 800238c:	e7ee      	b.n	800236c <__libc_init_array+0xc>
 800238e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002392:	4798      	blx	r3
 8002394:	3601      	adds	r6, #1
 8002396:	e7f2      	b.n	800237e <__libc_init_array+0x1e>
 8002398:	080023d8 	.word	0x080023d8
 800239c:	080023d8 	.word	0x080023d8
 80023a0:	080023d8 	.word	0x080023d8
 80023a4:	080023dc 	.word	0x080023dc

080023a8 <_init>:
 80023a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023aa:	bf00      	nop
 80023ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ae:	bc08      	pop	{r3}
 80023b0:	469e      	mov	lr, r3
 80023b2:	4770      	bx	lr

080023b4 <_fini>:
 80023b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023b6:	bf00      	nop
 80023b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ba:	bc08      	pop	{r3}
 80023bc:	469e      	mov	lr, r3
 80023be:	4770      	bx	lr
